package gocurry

func Prelude_LbRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "()", args... )
    return( root )
}

func Prelude_LbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "(,)", args... )
    return( root )
}

func Prelude_LbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "(,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "(,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 5, "(,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 6, "(,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "(,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "(,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 9, "(,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 10, "(,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 11, "(,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 12, "(,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 13, "(,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 14, "(,,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 15, "(,,,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_FalseCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "False", args... )
    return( root )
}

func Prelude_TrueCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 0, "True", args... )
    return( root )
}

func Prelude_LeftCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 1, "Left", args... )
    return( root )
}

func Prelude_RightCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "Right", args... )
    return( root )
}

func Prelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 1, "IOError", args... )
    return( root )
}

func Prelude_UserErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "UserError", args... )
    return( root )
}

func Prelude_FailErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 2, 1, "FailError", args... )
    return( root )
}

func Prelude_NondetErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 3, 1, "NondetError", args... )
    return( root )
}

func Prelude_NothingCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "Nothing", args... )
    return( root )
}

func Prelude_JustCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "Just", args... )
    return( root )
}

func Prelude_LTCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "LT", args... )
    return( root )
}

func Prelude_EQCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 0, "EQ", args... )
    return( root )
}

func Prelude_GTCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 2, 0, "GT", args... )
    return( root )
}

func Prelude_LSbRSbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "[]", args... )
    return( root )
}

func Prelude_ColCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 2, ":", args... )
    return( root )
}

func Prelude__DictHashBoundedCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Bounded", args... )
    return( root )
}

func Prelude__DictHashEnumCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "_Dict#Enum", args... )
    return( root )
}

func Prelude__DictHashEqCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Eq", args... )
    return( root )
}

func Prelude__DictHashFractionalCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "_Dict#Fractional", args... )
    return( root )
}

func Prelude__DictHashFunctorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 1, "_Dict#Functor", args... )
    return( root )
}

func Prelude__DictHashIntegralCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "_Dict#Integral", args... )
    return( root )
}

func Prelude__DictHashMonadCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "_Dict#Monad", args... )
    return( root )
}

func Prelude__DictHashNumCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "_Dict#Num", args... )
    return( root )
}

func Prelude__DictHashOrdCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "_Dict#Ord", args... )
    return( root )
}

func Prelude__DictHashReadCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Read", args... )
    return( root )
}

func Prelude__DictHashRealCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Real", args... )
    return( root )
}

func Prelude__DictHashShowCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "_Dict#Show", args... )
    return( root )
}

func Prelude__defHashEqEqHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashEqEqHashPrelude_Eq, "Prelude__defHashEqEqHashPrelude_Eq", 3, -1, args... )
    return( root )
}

func Prelude__defHashSlashEqHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSlashEqHashPrelude_Eq, "Prelude__defHashSlashEqHashPrelude_Eq", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Char, "Prelude__instHashPrelude_EqHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Int, "Prelude__instHashPrelude_EqHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Float, "Prelude__instHashPrelude_EqHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLSbRSb, "Prelude__instHashPrelude_EqHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1", 4, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb, "Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbRb, "Prelude__instHashPrelude_EqHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRb, "Prelude__implHashEqEqHashPrelude_EqHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaRb, "Prelude__instHashPrelude_EqHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb", 6, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb", 8, 6, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb_CASE0", 13, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb", 6, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb", 7, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb", 9, 7, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb_CASE0", 15, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb", 7, -1, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord, "Prelude__defHashcompareHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__defHashLtEqHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtEqHashPrelude_Ord, "Prelude__defHashLtEqHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtEqHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtEqHashPrelude_Ord, "Prelude__defHashGtEqHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashLtHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtHashPrelude_Ord, "Prelude__defHashLtHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtHashPrelude_Ord, "Prelude__defHashGtHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord, "Prelude__defHashminHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord, "Prelude__defHashmaxHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Char, "Prelude__instHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Char, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Char, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Char, "Prelude__implHashminHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Int, "Prelude__instHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Int, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Int, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Int, "Prelude__implHashminHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Float, "Prelude__instHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Float, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Float, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Float, "Prelude__implHashminHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLSbRSb, "Prelude__instHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLSbRSb, "Prelude__implHashcompareHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb", 3, 1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1", 4, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2", 6, 5, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb, "Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLSbRSb, "Prelude__implHashLtHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLSbRSb, "Prelude__implHashGtHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLSbRSb, "Prelude__implHashminHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLSbRSb, "Prelude__implHashmaxHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbRb, "Prelude__instHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbRb, "Prelude__implHashcompareHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbRb, "Prelude__implHashLtHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbRb, "Prelude__implHashGtHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbRb, "Prelude__implHashminHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbRb, "Prelude__implHashmaxHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__defHashshowHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowHashPrelude_Show, "Prelude__defHashshowHashPrelude_Show", 2, -1, args... )
    return( root )
}

func Prelude__defHashshowsPrecHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowsPrecHashPrelude_Show, "Prelude__defHashshowsPrecHashPrelude_Show", 4, -1, args... )
    return( root )
}

func Prelude__defHashshowListHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowListHashPrelude_Show, "Prelude__defHashshowListHashPrelude_Show", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbRb, "Prelude__instHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbRb, "Prelude__implHashshowHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbRb, "Prelude__implHashshowListHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 7, 6, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLSbRSb, "Prelude__instHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowListHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Char, "Prelude__instHashPrelude_ShowHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Int, "Prelude__instHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Float, "Prelude__instHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__defHashreadsPrecHashPrelude_ReadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreadsPrecHashPrelude_Read, "Prelude__defHashreadsPrecHashPrelude_Read", 1, -1, args... )
    return( root )
}

func Prelude__defHashreadListHashPrelude_ReadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreadListHashPrelude_Read, "Prelude__defHashreadListHashPrelude_Read", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbRb, "Prelude__instHashPrelude_ReadHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbRb, "Prelude__implHashreadListHashPrelude_ReadHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Int, "Prelude__instHashPrelude_ReadHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Float, "Prelude__instHashPrelude_ReadHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897__Hashlambda21Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897__Hashlambda21, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897__Hashlambda21", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Char, "Prelude__instHashPrelude_ReadHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE0, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE1, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48_CASE0, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLSbRSb, "Prelude__instHashPrelude_ReadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLSbRSb, "Prelude__implHashreadListHashPrelude_ReadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 6, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137", 6, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__defHashminBoundHashPrelude_BoundedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminBoundHashPrelude_Bounded, "Prelude__defHashminBoundHashPrelude_Bounded", 2, 1, args... )
    return( root )
}

func Prelude__defHashmaxBoundHashPrelude_BoundedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxBoundHashPrelude_Bounded, "Prelude__defHashmaxBoundHashPrelude_Bounded", 2, 1, args... )
    return( root )
}

func Prelude__defHashsuccHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsuccHashPrelude_Enum, "Prelude__defHashsuccHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashpredHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpredHashPrelude_Enum, "Prelude__defHashpredHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashpredHashPrelude_Enum__Hashlambda182Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpredHashPrelude_Enum__Hashlambda182, "Prelude__defHashpredHashPrelude_Enum__Hashlambda182", 1, -1, args... )
    return( root )
}

func Prelude__defHashtoEnumHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtoEnumHashPrelude_Enum, "Prelude__defHashtoEnumHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashfromEnumHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromEnumHashPrelude_Enum, "Prelude__defHashfromEnumHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashenumFromHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromHashPrelude_Enum, "Prelude__defHashenumFromHashPrelude_Enum", 2, -1, args... )
    return( root )
}

func Prelude__defHashenumFromThenHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromThenHashPrelude_Enum, "Prelude__defHashenumFromThenHashPrelude_Enum", 3, -1, args... )
    return( root )
}

func Prelude__defHashenumFromToHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromToHashPrelude_Enum, "Prelude__defHashenumFromToHashPrelude_Enum", 3, -1, args... )
    return( root )
}

func Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromThenToHashPrelude_Enum, "Prelude__defHashenumFromThenToHashPrelude_Enum", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbRb, "Prelude__instHashPrelude_BoundedHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashLbRb, "Prelude__instHashPrelude_EnumHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashLbRb, "Prelude__implHashsuccHashPrelude_EnumHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashLbRb, "Prelude__implHashpredHashPrelude_EnumHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashLbRb, "Prelude__implHashtoEnumHashPrelude_EnumHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE0, "Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE1, "Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashLbRb, "Prelude__implHashfromEnumHashPrelude_EnumHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromHashPrelude_EnumHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromToHashPrelude_EnumHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb", 3, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Bool, "Prelude__instHashPrelude_BoundedHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Bool, "Prelude__instHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE0, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE1, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE2, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Ordering, "Prelude__instHashPrelude_BoundedHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Ordering, "Prelude__instHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE1, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE2, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE3, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE3", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Char, "Prelude__instHashPrelude_BoundedHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Char, "Prelude__instHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Char, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Int, "Prelude__instHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Int, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__defHashAddHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashAddHashPrelude_Num, "Prelude__defHashAddHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashSubHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSubHashPrelude_Num, "Prelude__defHashSubHashPrelude_Num", 3, -1, args... )
    return( root )
}

func Prelude__defHashMulHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashMulHashPrelude_Num, "Prelude__defHashMulHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashnegateHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashnegateHashPrelude_Num, "Prelude__defHashnegateHashPrelude_Num", 2, -1, args... )
    return( root )
}

func Prelude__defHashabsHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashabsHashPrelude_Num, "Prelude__defHashabsHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashsignumHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsignumHashPrelude_Num, "Prelude__defHashsignumHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashfromIntHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromIntHashPrelude_Num, "Prelude__defHashfromIntHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_NumHashPrelude_Int, "Prelude__instHashPrelude_NumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_Int, "Prelude__implHashAddHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_Int, "Prelude__implHashSubHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulHashPrelude_NumHashPrelude_Int, "Prelude__implHashMulHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashnegateHashPrelude_NumHashPrelude_Int, "Prelude__implHashnegateHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int, "Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_NumHashPrelude_Float, "Prelude__instHashPrelude_NumHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_Float, "Prelude__implHashAddHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_Float, "Prelude__implHashSubHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulHashPrelude_NumHashPrelude_Float, "Prelude__implHashMulHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashnegateHashPrelude_NumHashPrelude_Float, "Prelude__implHashnegateHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float, "Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashSlashHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSlashHashPrelude_Fractional, "Prelude__defHashSlashHashPrelude_Fractional", 3, -1, args... )
    return( root )
}

func Prelude__defHashrecipHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashrecipHashPrelude_Fractional, "Prelude__defHashrecipHashPrelude_Fractional", 2, -1, args... )
    return( root )
}

func Prelude__defHashfromFloatHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromFloatHashPrelude_Fractional, "Prelude__defHashfromFloatHashPrelude_Fractional", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FractionalHashPrelude_Float, "Prelude__instHashPrelude_FractionalHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashSlashHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashrecipHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashdivHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivHashPrelude_Integral, "Prelude__defHashdivHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashdivHashPrelude_Integral__HashselFP2HashqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq, "Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq", 1, 0, args... )
    return( root )
}

func Prelude__defHashmodHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmodHashPrelude_Integral, "Prelude__defHashmodHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashmodHashPrelude_Integral__HashselFP4HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr, "Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashquotHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotHashPrelude_Integral, "Prelude__defHashquotHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashquotHashPrelude_Integral__HashselFP6HashqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq, "Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq", 1, 0, args... )
    return( root )
}

func Prelude__defHashremHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashremHashPrelude_Integral, "Prelude__defHashremHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashremHashPrelude_Integral__HashselFP8HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr, "Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashdivModHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivModHashPrelude_Integral, "Prelude__defHashdivModHashPrelude_Integral", 1, -1, args... )
    return( root )
}

func Prelude__defHashquotRemHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotRemHashPrelude_Integral, "Prelude__defHashquotRemHashPrelude_Integral", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_RealHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_RealHashPrelude_Int, "Prelude__instHashPrelude_RealHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_RealHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_RealHashPrelude_Float, "Prelude__instHashPrelude_RealHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_Int, "Prelude__instHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashdivHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashmodHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashquotHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashremHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashremHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashremHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashdivModHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__defHashfmapHashPrelude_FunctorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfmapHashPrelude_Functor, "Prelude__defHashfmapHashPrelude_Functor", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FunctorHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FunctorHashLSbRSb, "Prelude__instHashPrelude_FunctorHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashfmapHashPrelude_FunctorHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb, "Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__defHashGtGtEqHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtEqHashPrelude_Monad, "Prelude__defHashGtGtEqHashPrelude_Monad", 1, -1, args... )
    return( root )
}

func Prelude__defHashGtGtHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtHashPrelude_Monad, "Prelude__defHashGtGtHashPrelude_Monad", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtGtHashPrelude_Monad__Hashlambda183Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtHashPrelude_Monad__Hashlambda183, "Prelude__defHashGtGtHashPrelude_Monad__Hashlambda183", 2, -1, args... )
    return( root )
}

func Prelude__defHashreturnHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreturnHashPrelude_Monad, "Prelude__defHashreturnHashPrelude_Monad", 1, -1, args... )
    return( root )
}

func Prelude__defHashfailHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfailHashPrelude_Monad, "Prelude__defHashfailHashPrelude_Monad", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IO, "Prelude__instHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO, "Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO, "Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO", 2, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO, "Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO", 1, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadHashPrelude_IO, "Prelude__implHashfailHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashPrelude_Maybe, "Prelude__instHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe", 2, 0, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashfailHashPrelude_MonadHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashLSbRSb, "Prelude__instHashPrelude_MonadHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184__Hashlambda185Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184__Hashlambda185, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184__Hashlambda185", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb, "Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashLSbRSb, "Prelude__implHashreturnHashPrelude_MonadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadHashLSbRSb, "Prelude__implHashfailHashPrelude_MonadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Bool, "Prelude__instHashPrelude_EqHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Bool, "Prelude__instHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashminHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Bool, "Prelude__instHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Bool, "Prelude__instHashPrelude_ReadHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Ordering, "Prelude__instHashPrelude_EqHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Ordering, "Prelude__instHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Ordering, "Prelude__instHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Ordering, "Prelude__instHashPrelude_ReadHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Maybe, "Prelude__instHashPrelude_EqHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Maybe, "Prelude__instHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Maybe, "Prelude__instHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe", 3, 2, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Maybe, "Prelude__instHashPrelude_ReadHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219__Hashlambda223Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219__Hashlambda223, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219__Hashlambda223", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Either, "Prelude__instHashPrelude_EqHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Either, "Prelude__instHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either", 4, 2, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Either, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Either, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Either, "Prelude__implHashminHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Either, "Prelude__instHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either", 4, 3, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Either, "Prelude__instHashPrelude_ReadHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228__Hashlambda232Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228__Hashlambda232, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228__Hashlambda232", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE9", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE10", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237__Hashlambda241Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237__Hashlambda241, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237__Hashlambda241", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_IOError, "Prelude__instHashPrelude_EqHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0", 2, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOError, "Prelude__instHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_IOError, "Prelude__instHashPrelude_ReadHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246__Hashlambda250Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246__Hashlambda250, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246__Hashlambda250", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE15Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE15, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE15", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE16Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE16, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE16", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE17, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE17", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE18Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE18, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE18", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255__Hashlambda259Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255__Hashlambda259, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255__Hashlambda259", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE15Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE15, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE15", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE16Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE16, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE16", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE17, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE17", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE18Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE18, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE18", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264__Hashlambda268Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264__Hashlambda268, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264__Hashlambda268", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE15Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE15, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE15", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE16Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE16, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE16", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE17, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE17", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE18Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE18, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE18", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE19Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE19, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE19", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE20Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE20, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE20", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE21Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE21, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE21", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE22Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE22, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE22", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273__Hashlambda277Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273__Hashlambda277, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273__Hashlambda277", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_IOError, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__, "Prelude__", 2, -1, args... )
    return( root )
}

func Prelude____Hashlambda279Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude____Hashlambda279, "Prelude____Hashlambda279", 3, -1, args... )
    return( root )
}

func Prelude_idCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_id, "Prelude_id", 1, -1, args... )
    return( root )
}

func Prelude_constCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_const, "Prelude_const", 2, -1, args... )
    return( root )
}

func Prelude_curryCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_curry, "Prelude_curry", 3, -1, args... )
    return( root )
}

func Prelude_uncurryCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_uncurry, "Prelude_uncurry", 2, 1, args... )
    return( root )
}

func Prelude_flipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_flip, "Prelude_flip", 3, -1, args... )
    return( root )
}

func Prelude_untilCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_until, "Prelude_until", 3, -1, args... )
    return( root )
}

func Prelude_until_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_until_COMPLEXCASE0, "Prelude_until_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_seqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_seq, "Prelude_seq", 2, -1, args... )
    return( root )
}

func Prelude_ensureNotFreeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureNotFree, "Prelude_ensureNotFree", 1, -1, args... )
    return( root )
}

func Prelude_ensureSpineCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureSpine, "Prelude_ensureSpine", 1, -1, args... )
    return( root )
}

func Prelude_ensureSpine_ensureList_20Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureSpine_ensureList_20, "Prelude_ensureSpine_ensureList_20", 1, 0, args... )
    return( root )
}

func Prelude_DolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Dol, "Prelude_Dol", 2, -1, args... )
    return( root )
}

func Prelude_DolExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolExcl, "Prelude_DolExcl", 2, -1, args... )
    return( root )
}

func Prelude_DolExclExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolExclExcl, "Prelude_DolExclExcl", 2, -1, args... )
    return( root )
}

func Prelude_DolHashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolHash, "Prelude_DolHash", 2, -1, args... )
    return( root )
}

func Prelude_DolHashHashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolHashHash, "Prelude_DolHashHash", 2, -1, args... )
    return( root )
}

func Prelude_errorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_error, "Prelude_error", 1, -1, args... )
    return( root )
}

func Prelude_prim_errorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_error, "Prelude_prim_error", 1, -1, args... )
    return( root )
}

func Prelude_failedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_failed, "Prelude_failed", 0, -1, args... )
    return( root )
}

func Prelude_AndAndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AndAnd, "Prelude_AndAnd", 2, 0, args... )
    return( root )
}

func Prelude_StrtStrtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_StrtStrt, "Prelude_StrtStrt", 2, 0, args... )
    return( root )
}

func Prelude_notCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_not, "Prelude_not", 1, 0, args... )
    return( root )
}

func Prelude_otherwiseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_otherwise, "Prelude_otherwise", 0, -1, args... )
    return( root )
}

func Prelude_if_then_elseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_if_then_else, "Prelude_if_then_else", 3, 0, args... )
    return( root )
}

func Prelude_solveCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_solve, "Prelude_solve", 1, 0, args... )
    return( root )
}

func Prelude_AndGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AndGt, "Prelude_AndGt", 2, 0, args... )
    return( root )
}

func Prelude_EqColEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColEq, "Prelude_EqColEq", 2, -1, args... )
    return( root )
}

func Prelude_AndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_And, "Prelude_And", 2, -1, args... )
    return( root )
}

func Prelude_eqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqChar, "Prelude_eqChar", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqChar, "Prelude_prim_eqChar", 2, -1, args... )
    return( root )
}

func Prelude_eqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqInt, "Prelude_eqInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqInt, "Prelude_prim_eqInt", 2, -1, args... )
    return( root )
}

func Prelude_eqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqFloat, "Prelude_eqFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqFloat, "Prelude_prim_eqFloat", 2, -1, args... )
    return( root )
}

func Prelude_ltEqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqChar, "Prelude_ltEqChar", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqChar, "Prelude_prim_ltEqChar", 2, -1, args... )
    return( root )
}

func Prelude_ltEqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqInt, "Prelude_ltEqInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqInt, "Prelude_prim_ltEqInt", 2, -1, args... )
    return( root )
}

func Prelude_ltEqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqFloat, "Prelude_ltEqFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqFloat, "Prelude_prim_ltEqFloat", 2, -1, args... )
    return( root )
}

func Prelude_fstCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fst, "Prelude_fst", 1, 0, args... )
    return( root )
}

func Prelude_sndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_snd, "Prelude_snd", 1, 0, args... )
    return( root )
}

func Prelude_headCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_head, "Prelude_head", 1, 0, args... )
    return( root )
}

func Prelude_tailCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tail, "Prelude_tail", 1, 0, args... )
    return( root )
}

func Prelude_nullCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_null, "Prelude_null", 1, 0, args... )
    return( root )
}

func Prelude_AddAddCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AddAdd, "Prelude_AddAdd", 2, 0, args... )
    return( root )
}

func Prelude_lengthCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_length, "Prelude_length", 1, -1, args... )
    return( root )
}

func Prelude_length_len_92Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_length_len_92, "Prelude_length_len_92", 3, 1, args... )
    return( root )
}

func Prelude_length_len_92_LET0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_length_len_92_LET0, "Prelude_length_len_92_LET0", 3, -1, args... )
    return( root )
}

func Prelude_ExclExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl, "Prelude_ExclExcl", 2, 0, args... )
    return( root )
}

func Prelude_ExclExcl_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl_COMPLEXCASE0, "Prelude_ExclExcl_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_ExclExcl_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl_COMPLEXCASE1, "Prelude_ExclExcl_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_mapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_map, "Prelude_map", 2, 1, args... )
    return( root )
}

func Prelude_foldlCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldl, "Prelude_foldl", 3, 2, args... )
    return( root )
}

func Prelude_foldl1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldl1, "Prelude_foldl1", 2, 1, args... )
    return( root )
}

func Prelude_foldrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr, "Prelude_foldr", 3, 2, args... )
    return( root )
}

func Prelude_foldr1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr1, "Prelude_foldr1", 2, 1, args... )
    return( root )
}

func Prelude_foldr1_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr1_CASE0, "Prelude_foldr1_CASE0", 3, 2, args... )
    return( root )
}

func Prelude_filterCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_filter, "Prelude_filter", 2, 1, args... )
    return( root )
}

func Prelude_filter_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_filter_COMPLEXCASE0, "Prelude_filter_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_zipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip, "Prelude_zip", 2, 0, args... )
    return( root )
}

func Prelude_zip_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip_CASE0, "Prelude_zip_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_zip3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3, "Prelude_zip3", 3, 0, args... )
    return( root )
}

func Prelude_zip3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3_CASE0, "Prelude_zip3_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_zip3_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3_CASE1, "Prelude_zip3_CASE1", 5, 0, args... )
    return( root )
}

func Prelude_zipWithCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith, "Prelude_zipWith", 3, 1, args... )
    return( root )
}

func Prelude_zipWith_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith_CASE0, "Prelude_zipWith_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_zipWith3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3, "Prelude_zipWith3", 4, 1, args... )
    return( root )
}

func Prelude_zipWith3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3_CASE0, "Prelude_zipWith3_CASE0", 5, 0, args... )
    return( root )
}

func Prelude_zipWith3_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3_CASE1, "Prelude_zipWith3_CASE1", 6, 0, args... )
    return( root )
}

func Prelude_unzipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip, "Prelude_unzip", 1, 0, args... )
    return( root )
}

func Prelude_unzip_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip_CASE0, "Prelude_unzip_CASE0", 2, 0, args... )
    return( root )
}

func Prelude_unzip_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip_LET1, "Prelude_unzip_LET1", 3, -1, args... )
    return( root )
}

func Prelude_unzip__HashselFP10HashxsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip__HashselFP10Hashxs, "Prelude_unzip__HashselFP10Hashxs", 1, 0, args... )
    return( root )
}

func Prelude_unzip__HashselFP11HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip__HashselFP11Hashys, "Prelude_unzip__HashselFP11Hashys", 1, 0, args... )
    return( root )
}

func Prelude_unzip3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3, "Prelude_unzip3", 1, 0, args... )
    return( root )
}

func Prelude_unzip3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3_CASE0, "Prelude_unzip3_CASE0", 2, 0, args... )
    return( root )
}

func Prelude_unzip3_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3_LET1, "Prelude_unzip3_LET1", 4, -1, args... )
    return( root )
}

func Prelude_unzip3__HashselFP13HashxsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP13Hashxs, "Prelude_unzip3__HashselFP13Hashxs", 1, 0, args... )
    return( root )
}

func Prelude_unzip3__HashselFP14HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP14Hashys, "Prelude_unzip3__HashselFP14Hashys", 1, 0, args... )
    return( root )
}

func Prelude_unzip3__HashselFP15HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP15Hashzs, "Prelude_unzip3__HashselFP15Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_concatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_concat, "Prelude_concat", 1, -1, args... )
    return( root )
}

func Prelude_concatMapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_concatMap, "Prelude_concatMap", 1, -1, args... )
    return( root )
}

func Prelude_iterateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_iterate, "Prelude_iterate", 2, -1, args... )
    return( root )
}

func Prelude_repeatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_repeat, "Prelude_repeat", 1, -1, args... )
    return( root )
}

func Prelude_replicateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_replicate, "Prelude_replicate", 2, -1, args... )
    return( root )
}

func Prelude_takeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take, "Prelude_take", 2, -1, args... )
    return( root )
}

func Prelude_take_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take_COMPLEXCASE0, "Prelude_take_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_take_takep_209Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take_takep_209, "Prelude_take_takep_209", 2, 1, args... )
    return( root )
}

func Prelude_dropCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop, "Prelude_drop", 2, -1, args... )
    return( root )
}

func Prelude_drop_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop_COMPLEXCASE0, "Prelude_drop_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_drop_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop_CASE1, "Prelude_drop_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_splitAtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt, "Prelude_splitAt", 2, -1, args... )
    return( root )
}

func Prelude_splitAt_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_COMPLEXCASE0, "Prelude_splitAt_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_223Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_223, "Prelude_splitAt_splitAtp_223", 2, 1, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_223_LET0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_223_LET0, "Prelude_splitAt_splitAtp_223_LET0", 3, -1, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_223__HashselFP17HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_223__HashselFP17Hashys, "Prelude_splitAt_splitAtp_223__HashselFP17Hashys", 1, 0, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_223__HashselFP18HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_223__HashselFP18Hashzs, "Prelude_splitAt_splitAtp_223__HashselFP18Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_takeWhileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_takeWhile, "Prelude_takeWhile", 2, 1, args... )
    return( root )
}

func Prelude_takeWhile_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_takeWhile_COMPLEXCASE0, "Prelude_takeWhile_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_dropWhileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_dropWhile, "Prelude_dropWhile", 2, 1, args... )
    return( root )
}

func Prelude_dropWhile_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_dropWhile_COMPLEXCASE0, "Prelude_dropWhile_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_spanCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span, "Prelude_span", 2, 1, args... )
    return( root )
}

func Prelude_span_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_COMPLEXCASE0, "Prelude_span_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_span_LET2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_LET2, "Prelude_span_LET2", 3, -1, args... )
    return( root )
}

func Prelude_span_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_COMPLEXCASE1, "Prelude_span_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_span__HashselFP20HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span__HashselFP20Hashys, "Prelude_span__HashselFP20Hashys", 1, 0, args... )
    return( root )
}

func Prelude_span__HashselFP21HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span__HashselFP21Hashzs, "Prelude_span__HashselFP21Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_breakCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_break, "Prelude_break", 1, -1, args... )
    return( root )
}

func Prelude_linesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines, "Prelude_lines", 1, 0, args... )
    return( root )
}

func Prelude_lines_LET0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_LET0, "Prelude_lines_LET0", 2, -1, args... )
    return( root )
}

func Prelude_lines_splitline_253Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitline_253, "Prelude_lines_splitline_253", 1, 0, args... )
    return( root )
}

func Prelude_lines_splitline_253_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitline_253_COMPLEXCASE0, "Prelude_lines_splitline_253_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lines_splitline_253_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitline_253_LET1, "Prelude_lines_splitline_253_LET1", 2, -1, args... )
    return( root )
}

func Prelude_lines_splitline_253__HashselFP23HashdsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitline_253__HashselFP23Hashds, "Prelude_lines_splitline_253__HashselFP23Hashds", 1, 0, args... )
    return( root )
}

func Prelude_lines_splitline_253__HashselFP24HashesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitline_253__HashselFP24Hashes, "Prelude_lines_splitline_253__HashselFP24Hashes", 1, 0, args... )
    return( root )
}

func Prelude_lines__HashselFP26HashlCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines__HashselFP26Hashl, "Prelude_lines__HashselFP26Hashl", 1, 0, args... )
    return( root )
}

func Prelude_lines__HashselFP27Hashxs_lCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines__HashselFP27Hashxs_l, "Prelude_lines__HashselFP27Hashxs_l", 1, 0, args... )
    return( root )
}

func Prelude_unlinesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unlines, "Prelude_unlines", 1, -1, args... )
    return( root )
}

func Prelude_wordsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words, "Prelude_words", 1, -1, args... )
    return( root )
}

func Prelude_words_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words_COMPLEXCASE0, "Prelude_words_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_words_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words_LET1, "Prelude_words_LET1", 1, -1, args... )
    return( root )
}

func Prelude_words__HashselFP29HashwCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words__HashselFP29Hashw, "Prelude_words__HashselFP29Hashw", 1, 0, args... )
    return( root )
}

func Prelude_words__HashselFP30Hashs2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words__HashselFP30Hashs2, "Prelude_words__HashselFP30Hashs2", 1, 0, args... )
    return( root )
}

func Prelude_unwordsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords, "Prelude_unwords", 1, -1, args... )
    return( root )
}

func Prelude_unwords_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords_COMPLEXCASE0, "Prelude_unwords_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_unwords__Hashlambda282Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords__Hashlambda282, "Prelude_unwords__Hashlambda282", 2, -1, args... )
    return( root )
}

func Prelude_reverseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_reverse, "Prelude_reverse", 0, -1, args... )
    return( root )
}

func Prelude_andCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_and, "Prelude_and", 0, -1, args... )
    return( root )
}

func Prelude_orCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_or, "Prelude_or", 0, -1, args... )
    return( root )
}

func Prelude_anyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_any, "Prelude_any", 1, -1, args... )
    return( root )
}

func Prelude_allCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_all, "Prelude_all", 1, -1, args... )
    return( root )
}

func Prelude_elemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_elem, "Prelude_elem", 2, -1, args... )
    return( root )
}

func Prelude_notElemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_notElem, "Prelude_notElem", 2, -1, args... )
    return( root )
}

func Prelude_lookupCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup, "Prelude_lookup", 3, 2, args... )
    return( root )
}

func Prelude_lookup_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_CASE0, "Prelude_lookup_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_lookup_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_COMPLEXCASE1, "Prelude_lookup_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_lookup_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_COMPLEXCASE2, "Prelude_lookup_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_enumFrom_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFrom_, "Prelude_enumFrom_", 1, -1, args... )
    return( root )
}

func Prelude_enumFromThen_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThen_, "Prelude_enumFromThen_", 2, -1, args... )
    return( root )
}

func Prelude_enumFromTo_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromTo_, "Prelude_enumFromTo_", 2, -1, args... )
    return( root )
}

func Prelude_enumFromTo__COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromTo__COMPLEXCASE0, "Prelude_enumFromTo__COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_enumFromThenTo_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo_, "Prelude_enumFromThenTo_", 3, -1, args... )
    return( root )
}

func Prelude_enumFromThenTo__p_299Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo__p_299, "Prelude_enumFromThenTo__p_299", 4, -1, args... )
    return( root )
}

func Prelude_enumFromThenTo__p_299_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo__p_299_COMPLEXCASE0, "Prelude_enumFromThenTo__p_299_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_enumFromThenTo__p_299_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo__p_299_COMPLEXCASE1, "Prelude_enumFromThenTo__p_299_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_ordCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ord, "Prelude_ord", 1, -1, args... )
    return( root )
}

func Prelude_prim_ordCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ord, "Prelude_prim_ord", 1, -1, args... )
    return( root )
}

func Prelude_chrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr, "Prelude_chr", 1, -1, args... )
    return( root )
}

func Prelude_chr_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr_COMPLEXCASE0, "Prelude_chr_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_prim_chrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_chr, "Prelude_prim_chr", 1, -1, args... )
    return( root )
}

func Prelude_AddDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AddDol, "Prelude_AddDol", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_plusCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_plus, "Prelude_prim_Int_plus", 2, -1, args... )
    return( root )
}

func Prelude_SubDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_SubDol, "Prelude_SubDol", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_minusCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_minus, "Prelude_prim_Int_minus", 2, -1, args... )
    return( root )
}

func Prelude_MulDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_MulDol, "Prelude_MulDol", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_timesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_times, "Prelude_prim_Int_times", 2, -1, args... )
    return( root )
}

func Prelude_div_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_div_, "Prelude_div_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_divCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_div, "Prelude_prim_Int_div", 2, -1, args... )
    return( root )
}

func Prelude_mod_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mod_, "Prelude_mod_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_modCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_mod, "Prelude_prim_Int_mod", 2, -1, args... )
    return( root )
}

func Prelude_divMod_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_divMod_, "Prelude_divMod_", 2, -1, args... )
    return( root )
}

func Prelude_quot_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quot_, "Prelude_quot_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_quotCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_quot, "Prelude_prim_Int_quot", 2, -1, args... )
    return( root )
}

func Prelude_rem_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_rem_, "Prelude_rem_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Int_remCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Int_rem, "Prelude_prim_Int_rem", 2, -1, args... )
    return( root )
}

func Prelude_quotRem_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quotRem_, "Prelude_quotRem_", 2, -1, args... )
    return( root )
}

func Prelude_negate_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_negate_, "Prelude_negate_", 1, -1, args... )
    return( root )
}

func Prelude_negateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_negateFloat, "Prelude_negateFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_negateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_negateFloat, "Prelude_prim_negateFloat", 1, -1, args... )
    return( root )
}

func Prelude_successCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_success, "Prelude_success", 0, -1, args... )
    return( root )
}

func Prelude_maybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_maybe, "Prelude_maybe", 3, 2, args... )
    return( root )
}

func Prelude_eitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_either, "Prelude_either", 3, 2, args... )
    return( root )
}

func Prelude_GtGtEqDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGtEqDol, "Prelude_GtGtEqDol", 2, -1, args... )
    return( root )
}

func Prelude_returnIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_returnIO, "Prelude_returnIO", 1, -1, args... )
    return( root )
}

func Prelude_GtGtDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGtDol, "Prelude_GtGtDol", 2, -1, args... )
    return( root )
}

func Prelude_GtGtDol__Hashlambda283Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGtDol__Hashlambda283, "Prelude_GtGtDol__Hashlambda283", 2, -1, args... )
    return( root )
}

func Prelude_doneCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_done, "Prelude_done", 0, -1, args... )
    return( root )
}

func Prelude_putCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putChar, "Prelude_putChar", 1, -1, args... )
    return( root )
}

func Prelude_prim_putCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_putChar, "Prelude_prim_putChar", 1, -1, args... )
    return( root )
}

func Prelude_getCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getChar, "Prelude_getChar", 0, -1, args... )
    return( root )
}

func Prelude_readFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readFile, "Prelude_readFile", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFile, "Prelude_prim_readFile", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFileContentsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFileContents, "Prelude_prim_readFileContents", 1, -1, args... )
    return( root )
}

func Prelude_writeFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_writeFile, "Prelude_writeFile", 2, -1, args... )
    return( root )
}

func Prelude_prim_writeFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_writeFile, "Prelude_prim_writeFile", 2, -1, args... )
    return( root )
}

func Prelude_appendFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_appendFile, "Prelude_appendFile", 2, -1, args... )
    return( root )
}

func Prelude_prim_appendFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_appendFile, "Prelude_prim_appendFile", 2, -1, args... )
    return( root )
}

func Prelude_putStrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putStr, "Prelude_putStr", 1, 0, args... )
    return( root )
}

func Prelude_putStrLnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putStrLn, "Prelude_putStrLn", 1, -1, args... )
    return( root )
}

func Prelude_getLineCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine, "Prelude_getLine", 0, -1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda285Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda285, "Prelude_getLine__Hashlambda285", 1, -1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda285_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda285_COMPLEXCASE0, "Prelude_getLine__Hashlambda285_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda285__Hashlambda288Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda285__Hashlambda288, "Prelude_getLine__Hashlambda285__Hashlambda288", 2, -1, args... )
    return( root )
}

func Prelude_userErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_userError, "Prelude_userError", 1, -1, args... )
    return( root )
}

func Prelude_ioErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ioError, "Prelude_ioError", 1, -1, args... )
    return( root )
}

func Prelude_showErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showError, "Prelude_showError", 1, 0, args... )
    return( root )
}

func Prelude_catchCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_catch, "Prelude_catch", 2, -1, args... )
    return( root )
}

func Prelude_show_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_show_, "Prelude_show_", 1, -1, args... )
    return( root )
}

func Prelude_prim_showCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_show, "Prelude_prim_show", 1, -1, args... )
    return( root )
}

func Prelude_printCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_print, "Prelude_print", 2, -1, args... )
    return( root )
}

func Prelude_doSolveCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_doSolve, "Prelude_doSolve", 1, 0, args... )
    return( root )
}

func Prelude_sequenceIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequenceIO, "Prelude_sequenceIO", 1, 0, args... )
    return( root )
}

func Prelude_sequenceIO__Hashlambda292Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequenceIO__Hashlambda292, "Prelude_sequenceIO__Hashlambda292", 2, -1, args... )
    return( root )
}

func Prelude_sequenceIO__Hashlambda292__Hashlambda294Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequenceIO__Hashlambda292__Hashlambda294, "Prelude_sequenceIO__Hashlambda292__Hashlambda294", 2, -1, args... )
    return( root )
}

func Prelude_sequenceIO_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequenceIO_, "Prelude_sequenceIO_", 0, -1, args... )
    return( root )
}

func Prelude_mapIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapIO, "Prelude_mapIO", 1, -1, args... )
    return( root )
}

func Prelude_mapIO_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapIO_, "Prelude_mapIO_", 1, -1, args... )
    return( root )
}

func Prelude_foldIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldIO, "Prelude_foldIO", 3, 2, args... )
    return( root )
}

func Prelude_foldIO__Hashlambda296Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldIO__Hashlambda296, "Prelude_foldIO__Hashlambda296", 3, -1, args... )
    return( root )
}

func Prelude_liftIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftIO, "Prelude_liftIO", 2, -1, args... )
    return( root )
}

func Prelude_forIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_forIO, "Prelude_forIO", 2, -1, args... )
    return( root )
}

func Prelude_forIO_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_forIO_, "Prelude_forIO_", 2, -1, args... )
    return( root )
}

func Prelude_unlessCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unless, "Prelude_unless", 2, 0, args... )
    return( root )
}

func Prelude_whenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_when, "Prelude_when", 2, 0, args... )
    return( root )
}

func Prelude_QstnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Qstn, "Prelude_Qstn", 2, -1, args... )
    return( root )
}

func Prelude_anyOfCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_anyOf, "Prelude_anyOf", 0, -1, args... )
    return( root )
}

func Prelude_unknownCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unknown, "Prelude_unknown", 0, -1, args... )
    return( root )
}

func Prelude_PEVALCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_PEVAL, "Prelude_PEVAL", 1, -1, args... )
    return( root )
}

func Prelude_normalFormCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_normalForm, "Prelude_normalForm", 1, -1, args... )
    return( root )
}

func Prelude_groundNormalFormCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_groundNormalForm, "Prelude_groundNormalForm", 1, -1, args... )
    return( root )
}

func Prelude_applyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_apply, "Prelude_apply", 2, -1, args... )
    return( root )
}

func Prelude_condCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_cond, "Prelude_cond", 2, -1, args... )
    return( root )
}

func Prelude_letrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_letrec, "Prelude_letrec", 2, -1, args... )
    return( root )
}

func Prelude_EqColLtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColLtEq, "Prelude_EqColLtEq", 2, -1, args... )
    return( root )
}

func Prelude_EqColLtLtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColLtLtEq, "Prelude_EqColLtLtEq", 2, -1, args... )
    return( root )
}

func Prelude_ifVarCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ifVar, "Prelude_ifVar", 3, -1, args... )
    return( root )
}

func Prelude_failureCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_failure, "Prelude_failure", 2, -1, args... )
    return( root )
}

func Prelude_showListSQuoteCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showListSQuote, "Prelude_showListSQuote", 3, 1, args... )
    return( root )
}

func Prelude_showListSQuote_showl_433Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showListSQuote_showl_433, "Prelude_showListSQuote_showl_433", 3, 2, args... )
    return( root )
}

func Prelude_showsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_shows, "Prelude_shows", 1, -1, args... )
    return( root )
}

func Prelude_showCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showChar, "Prelude_showChar", 2, -1, args... )
    return( root )
}

func Prelude_showStringCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showString, "Prelude_showString", 2, -1, args... )
    return( root )
}

func Prelude_showParenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showParen, "Prelude_showParen", 2, 0, args... )
    return( root )
}

func Prelude_showSignedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned, "Prelude_showSigned", 4, -1, args... )
    return( root )
}

func Prelude_showSigned_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned_COMPLEXCASE0, "Prelude_showSigned_COMPLEXCASE0", 5, 4, args... )
    return( root )
}

func Prelude_showSigned_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned_COMPLEXCASE1, "Prelude_showSigned_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_showTupleCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showTuple, "Prelude_showTuple", 1, -1, args... )
    return( root )
}

func Prelude_showTuple__Hashlambda297Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showTuple__Hashlambda297, "Prelude_showTuple__Hashlambda297", 2, -1, args... )
    return( root )
}

func Prelude_appPrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_appPrec, "Prelude_appPrec", 0, -1, args... )
    return( root )
}

func Prelude_appPrec1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_appPrec1, "Prelude_appPrec1", 0, -1, args... )
    return( root )
}

func Prelude_readListDefaultCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault, "Prelude_readListDefault", 1, -1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456, "Prelude_readListDefault_readlSQuote_456", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda312, "Prelude_readListDefault_readlSQuote_456__Hashlambda312", 2, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE0, "Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda312_COMPLEXCASE1, "Prelude_readListDefault_readlSQuote_456__Hashlambda312_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE2, "Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE2", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316, "Prelude_readListDefault_readlSQuote_456__Hashlambda316", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE0, "Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316_COMPLEXCASE1, "Prelude_readListDefault_readlSQuote_456__Hashlambda316_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE2, "Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320, "Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320__Hashlambda324Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320__Hashlambda324, "Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320__Hashlambda324", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readl_456Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456, "Prelude_readListDefault_readl_456", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda300Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda300, "Prelude_readListDefault_readl_456__Hashlambda300", 2, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda300_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda300_CASE0, "Prelude_readListDefault_readl_456__Hashlambda300_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda300_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda300_COMPLEXCASE1, "Prelude_readListDefault_readl_456__Hashlambda300_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda300_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda300_CASE2, "Prelude_readListDefault_readl_456__Hashlambda300_CASE2", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda304Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda304, "Prelude_readListDefault_readl_456__Hashlambda304", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readl_456__Hashlambda304__Hashlambda308Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_456__Hashlambda304__Hashlambda308, "Prelude_readListDefault_readl_456__Hashlambda304__Hashlambda308", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326, "Prelude_readListDefault__Hashlambda326", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329, "Prelude_readListDefault__Hashlambda326__Hashlambda329", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE0, "Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329_COMPLEXCASE1, "Prelude_readListDefault__Hashlambda326__Hashlambda329_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE2, "Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329__Hashlambda331Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329__Hashlambda331, "Prelude_readListDefault__Hashlambda326__Hashlambda329__Hashlambda331", 1, -1, args... )
    return( root )
}

func Prelude_readsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_reads, "Prelude_reads", 1, -1, args... )
    return( root )
}

func Prelude_readParenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen, "Prelude_readParen", 2, 0, args... )
    return( root )
}

func Prelude_readParen_optional_474Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_optional_474, "Prelude_readParen_optional_474", 2, -1, args... )
    return( root )
}

func Prelude_readParen_mandatory_474Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474, "Prelude_readParen_mandatory_474", 2, -1, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334, "Prelude_readParen_mandatory_474__Hashlambda334", 3, 1, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334_CASE0, "Prelude_readParen_mandatory_474__Hashlambda334_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334_COMPLEXCASE1, "Prelude_readParen_mandatory_474__Hashlambda334_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334_CASE2, "Prelude_readParen_mandatory_474__Hashlambda334_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338, "Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338", 2, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342, "Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342", 3, 1, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE0, "Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_COMPLEXCASE1, "Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE2, "Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read, "Prelude_read", 2, -1, args... )
    return( root )
}

func Prelude_read_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read_COMPLEXCASE0, "Prelude_read_COMPLEXCASE0", 1, 0, args... )
    return( root )
}

func Prelude_read_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read_CASE1, "Prelude_read_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda346Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda346, "Prelude_read__Hashlambda346", 2, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda346__Hashlambda350Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda346__Hashlambda350, "Prelude_read__Hashlambda346__Hashlambda350", 3, 1, args... )
    return( root )
}

func Prelude_read__Hashlambda346__Hashlambda350_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda346__Hashlambda350_CASE0, "Prelude_read__Hashlambda346__Hashlambda350_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda346__Hashlambda350_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda346__Hashlambda350_CASE1, "Prelude_read__Hashlambda346__Hashlambda350_CASE1", 3, 0, args... )
    return( root )
}

func Prelude_readSignedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned, "Prelude_readSigned", 2, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_494Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_494, "Prelude_readSigned_readSQuoteSQuote_494", 2, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363, "Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363", 3, 1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367, "Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367", 3, 1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367_CASE0, "Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494, "Prelude_readSigned_readSQuote_494", 3, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494__Hashlambda355Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494__Hashlambda355, "Prelude_readSigned_readSQuote_494__Hashlambda355", 4, 2, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494__Hashlambda355_CASE0, "Prelude_readSigned_readSQuote_494__Hashlambda355_CASE0", 5, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494__Hashlambda355_COMPLEXCASE1, "Prelude_readSigned_readSQuote_494__Hashlambda355_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494__Hashlambda355_CASE2, "Prelude_readSigned_readSQuote_494__Hashlambda355_CASE2", 5, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_494__Hashlambda355__Hashlambda359Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_494__Hashlambda355__Hashlambda359, "Prelude_readSigned_readSQuote_494__Hashlambda355__Hashlambda359", 3, 1, args... )
    return( root )
}

func Prelude_readNatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readNatLiteral, "Prelude_readNatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readNatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readNatLiteral, "Prelude_prim_readNatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readFloatLiteral, "Prelude_readFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFloatLiteral, "Prelude_prim_readFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readCharLiteral, "Prelude_readCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readCharLiteral, "Prelude_prim_readCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readStringLiteral, "Prelude_readStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readStringLiteral, "Prelude_prim_readStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_lexCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex, "Prelude_lex", 1, 0, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE0, "Prelude_lex_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_CASE1, "Prelude_lex_CASE1", 1, 0, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE2, "Prelude_lex_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE3, "Prelude_lex_COMPLEXCASE3", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE4, "Prelude_lex_COMPLEXCASE4", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE5, "Prelude_lex_COMPLEXCASE5", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE6, "Prelude_lex_COMPLEXCASE6", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE7, "Prelude_lex_COMPLEXCASE7", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE8, "Prelude_lex_COMPLEXCASE8", 1, 0, args... )
    return( root )
}

func Prelude_lex_isSingle_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isSingle_512, "Prelude_lex_isSingle_512", 1, -1, args... )
    return( root )
}

func Prelude_lex_isSym_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isSym_512, "Prelude_lex_isSym_512", 1, -1, args... )
    return( root )
}

func Prelude_lex_isIdChar_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isIdChar_512, "Prelude_lex_isIdChar_512", 1, -1, args... )
    return( root )
}

func Prelude_lex_lexExp_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512, "Prelude_lex_lexExp_512", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexExp_512_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512_COMPLEXCASE0, "Prelude_lex_lexExp_512_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexExp_512__Hashlambda382Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512__Hashlambda382, "Prelude_lex_lexExp_512__Hashlambda382", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexExp_512__Hashlambda382_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512__Hashlambda382_COMPLEXCASE0, "Prelude_lex_lexExp_512__Hashlambda382_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexExp_512__Hashlambda382__Hashlambda386Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512__Hashlambda382__Hashlambda386, "Prelude_lex_lexExp_512__Hashlambda382__Hashlambda386", 4, 2, args... )
    return( root )
}

func Prelude_lex_lexExp_512__Hashlambda390Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_512__Hashlambda390, "Prelude_lex_lexExp_512__Hashlambda390", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512, "Prelude_lex_lexFracExp_512", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512_COMPLEXCASE0, "Prelude_lex_lexFracExp_512_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512_CASE1, "Prelude_lex_lexFracExp_512_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512_COMPLEXCASE2, "Prelude_lex_lexFracExp_512_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512__Hashlambda372Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512__Hashlambda372, "Prelude_lex_lexFracExp_512__Hashlambda372", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_512__Hashlambda372__Hashlambda376Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_512__Hashlambda372__Hashlambda376, "Prelude_lex_lexFracExp_512__Hashlambda372__Hashlambda376", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512, "Prelude_lex_lexStrItem_512", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512_COMPLEXCASE0, "Prelude_lex_lexStrItem_512_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512_CASE1, "Prelude_lex_lexStrItem_512_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512_COMPLEXCASE2, "Prelude_lex_lexStrItem_512_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512_COMPLEXCASE3, "Prelude_lex_lexStrItem_512_COMPLEXCASE3", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512__Hashlambda405Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512__Hashlambda405, "Prelude_lex_lexStrItem_512__Hashlambda405", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexStrItem_512__Hashlambda405_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStrItem_512__Hashlambda405_COMPLEXCASE0, "Prelude_lex_lexStrItem_512__Hashlambda405_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexString_512Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_512, "Prelude_lex_lexString_512", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexString_512_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_512_COMPLEXCASE0, "Prelude_lex_lexString_512_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexString_512__Hashlambda396Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_512__Hashlambda396, "Prelude_lex_lexString_512__Hashlambda396", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexString_512__Hashlambda396__Hashlambda400Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_512__Hashlambda396__Hashlambda400, "Prelude_lex_lexString_512__Hashlambda396__Hashlambda400", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda412Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda412, "Prelude_lex__Hashlambda412", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda412_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda412_CASE0, "Prelude_lex__Hashlambda412_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda412_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda412_COMPLEXCASE1, "Prelude_lex__Hashlambda412_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_lex__Hashlambda412_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda412_COMPLEXCASE2, "Prelude_lex__Hashlambda412_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda416Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda416, "Prelude_lex__Hashlambda416", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda420Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda420, "Prelude_lex__Hashlambda420", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda424Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda424, "Prelude_lex__Hashlambda424", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda428Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda428, "Prelude_lex__Hashlambda428", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda428__Hashlambda432Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda428__Hashlambda432, "Prelude_lex__Hashlambda428__Hashlambda432", 4, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda436Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda436, "Prelude_lex__Hashlambda436", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda436_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda436_CASE0, "Prelude_lex__Hashlambda436_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda436_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda436_COMPLEXCASE1, "Prelude_lex__Hashlambda436_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_lex__Hashlambda436_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda436_COMPLEXCASE2, "Prelude_lex__Hashlambda436_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda440Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda440, "Prelude_lex__Hashlambda440", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda444Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda444, "Prelude_lex__Hashlambda444", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda448Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda448, "Prelude_lex__Hashlambda448", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda452Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda452, "Prelude_lex__Hashlambda452", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda452__Hashlambda456Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda452__Hashlambda456, "Prelude_lex__Hashlambda452__Hashlambda456", 4, 2, args... )
    return( root )
}

func Prelude_lexLitCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar, "Prelude_lexLitChar", 1, 0, args... )
    return( root )
}

func Prelude_lexLitChar_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_COMPLEXCASE0, "Prelude_lexLitChar_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lexLitChar_isCharName_574Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_isCharName_574, "Prelude_lexLitChar_isCharName_574", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_prefix_574Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_prefix_574, "Prelude_lexLitChar_prefix_574", 2, 1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574, "Prelude_lexLitChar_lexEsc_574", 1, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE0, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_LET1, "Prelude_lexLitChar_lexEsc_574_LET1", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE2, "Prelude_lexLitChar_lexEsc_574_CASE2", 2, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE3, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE11, "Prelude_lexLitChar_lexEsc_574_CASE11", 4, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE16Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE16, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE16", 4, 3, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_LET17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_LET17, "Prelude_lexLitChar_lexEsc_574_LET17", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE18Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE18, "Prelude_lexLitChar_lexEsc_574_CASE18", 2, 1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE19Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE19, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE19", 3, 2, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_LET20Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_LET20, "Prelude_lexLitChar_lexEsc_574_LET20", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE21Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE21, "Prelude_lexLitChar_lexEsc_574_CASE21", 1, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE22Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE22, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE22", 2, 1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE12, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE12", 3, 2, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_LET13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_LET13, "Prelude_lexLitChar_lexEsc_574_LET13", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE14, "Prelude_lexLitChar_lexEsc_574_CASE14", 1, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE15Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE15, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE15", 2, 1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE4, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE4", 5, 4, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE5, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE6, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE6", 5, 4, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE7, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE7", 3, 2, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_LET8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_LET8, "Prelude_lexLitChar_lexEsc_574_LET8", 1, -1, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_CASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_CASE9, "Prelude_lexLitChar_lexEsc_574_CASE9", 1, 0, args... )
    return( root )
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexLitChar_lexEsc_574_COMPLEXCASE10, "Prelude_lexLitChar_lexEsc_574_COMPLEXCASE10", 2, 1, args... )
    return( root )
}

func Prelude_lexDigitsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexDigits, "Prelude_lexDigits", 0, -1, args... )
    return( root )
}

func Prelude_nonNullCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_nonNull, "Prelude_nonNull", 2, -1, args... )
    return( root )
}

func Prelude_nonNull__Hashlambda477Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_nonNull__Hashlambda477, "Prelude_nonNull__Hashlambda477", 2, 0, args... )
    return( root )
}

func Prelude_nonNull__Hashlambda477_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_nonNull__Hashlambda477_CASE0, "Prelude_nonNull__Hashlambda477_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_isUpperCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isUpper, "Prelude_isUpper", 1, -1, args... )
    return( root )
}

func Prelude_isLowerCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isLower, "Prelude_isLower", 1, -1, args... )
    return( root )
}

func Prelude_isAlphaCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isAlpha, "Prelude_isAlpha", 1, -1, args... )
    return( root )
}

func Prelude_isDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isDigit, "Prelude_isDigit", 1, -1, args... )
    return( root )
}

func Prelude_isAlphaNumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isAlphaNum, "Prelude_isAlphaNum", 1, -1, args... )
    return( root )
}

func Prelude_isBinDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isBinDigit, "Prelude_isBinDigit", 1, -1, args... )
    return( root )
}

func Prelude_isOctDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isOctDigit, "Prelude_isOctDigit", 1, -1, args... )
    return( root )
}

func Prelude_isHexDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isHexDigit, "Prelude_isHexDigit", 1, -1, args... )
    return( root )
}

func Prelude_isSpaceCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isSpace, "Prelude_isSpace", 1, -1, args... )
    return( root )
}

func Prelude_uppermostCharacterCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_uppermostCharacter, "Prelude_uppermostCharacter", 0, -1, args... )
    return( root )
}

func Prelude_boundedEnumFromCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_boundedEnumFrom, "Prelude_boundedEnumFrom", 3, -1, args... )
    return( root )
}

func Prelude_boundedEnumFromThenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_boundedEnumFromThen, "Prelude_boundedEnumFromThen", 4, -1, args... )
    return( root )
}

func Prelude_boundedEnumFromThen_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_boundedEnumFromThen_COMPLEXCASE0, "Prelude_boundedEnumFromThen_COMPLEXCASE0", 6, 5, args... )
    return( root )
}

func Prelude_boundedEnumFromThen_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_boundedEnumFromThen_COMPLEXCASE1, "Prelude_boundedEnumFromThen_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude_asTypeOfCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asTypeOf, "Prelude_asTypeOf", 0, -1, args... )
    return( root )
}

func Prelude_Add_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Add_, "Prelude_Add_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Float_plusCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Float_plus, "Prelude_prim_Float_plus", 2, -1, args... )
    return( root )
}

func Prelude_Sub_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Sub_, "Prelude_Sub_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Float_minusCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Float_minus, "Prelude_prim_Float_minus", 2, -1, args... )
    return( root )
}

func Prelude_Mul_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Mul_, "Prelude_Mul_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Float_timesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Float_times, "Prelude_prim_Float_times", 2, -1, args... )
    return( root )
}

func Prelude_Slash_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Slash_, "Prelude_Slash_", 2, -1, args... )
    return( root )
}

func Prelude_prim_Float_divCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_Float_div, "Prelude_prim_Float_div", 2, -1, args... )
    return( root )
}

func Prelude_i2fCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_i2f, "Prelude_i2f", 1, -1, args... )
    return( root )
}

func Prelude_prim_i2fCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_i2f, "Prelude_prim_i2f", 1, -1, args... )
    return( root )
}

func Prelude_sequenceCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence, "Prelude_sequence", 1, -1, args... )
    return( root )
}

func Prelude_sequence__Hashlambda479Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence__Hashlambda479, "Prelude_sequence__Hashlambda479", 3, -1, args... )
    return( root )
}

func Prelude_sequence__Hashlambda479__Hashlambda480Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence__Hashlambda479__Hashlambda480, "Prelude_sequence__Hashlambda479__Hashlambda480", 3, -1, args... )
    return( root )
}

func Prelude_sequence__Hashlambda479__Hashlambda480__Hashlambda481Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence__Hashlambda479__Hashlambda480__Hashlambda481, "Prelude_sequence__Hashlambda479__Hashlambda480__Hashlambda481", 3, -1, args... )
    return( root )
}

func Prelude_sequence_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence_, "Prelude_sequence_", 1, -1, args... )
    return( root )
}

func Prelude_mapMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapM, "Prelude_mapM", 2, -1, args... )
    return( root )
}

func Prelude_mapM_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapM_, "Prelude_mapM_", 2, -1, args... )
    return( root )
}

func Prelude_foldMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldM, "Prelude_foldM", 4, 3, args... )
    return( root )
}

func Prelude_foldM__Hashlambda482Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldM__Hashlambda482, "Prelude_foldM__Hashlambda482", 4, -1, args... )
    return( root )
}

func Prelude_liftMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM, "Prelude_liftM", 3, -1, args... )
    return( root )
}

func Prelude_liftM2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2, "Prelude_liftM2", 4, -1, args... )
    return( root )
}

func Prelude_liftM2__Hashlambda485Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2__Hashlambda485, "Prelude_liftM2__Hashlambda485", 4, -1, args... )
    return( root )
}

func Prelude_liftM2__Hashlambda485__Hashlambda487Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2__Hashlambda485__Hashlambda487, "Prelude_liftM2__Hashlambda485__Hashlambda487", 4, -1, args... )
    return( root )
}

func Prelude_forMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_forM, "Prelude_forM", 3, -1, args... )
    return( root )
}

func Prelude_forM_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_forM_, "Prelude_forM_", 3, -1, args... )
    return( root )
}

func Prelude_unlessMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unlessM, "Prelude_unlessM", 3, 1, args... )
    return( root )
}

func Prelude_whenMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_whenM, "Prelude_whenM", 3, 1, args... )
    return( root )
}

func Prelude_EqEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqEq, "Prelude_EqEq", 1, 0, args... )
    return( root )
}

func Prelude_SlashEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_SlashEq, "Prelude_SlashEq", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_OrdHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_OrdHashPrelude_Eq, "Prelude__superHashPrelude_OrdHashPrelude_Eq", 1, 0, args... )
    return( root )
}

func Prelude_compareCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_compare, "Prelude_compare", 1, 0, args... )
    return( root )
}

func Prelude_LtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtEq, "Prelude_LtEq", 1, 0, args... )
    return( root )
}

func Prelude_GtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtEq, "Prelude_GtEq", 1, 0, args... )
    return( root )
}

func Prelude_LtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Lt, "Prelude_Lt", 1, 0, args... )
    return( root )
}

func Prelude_GtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Gt, "Prelude_Gt", 1, 0, args... )
    return( root )
}

func Prelude_minCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_min, "Prelude_min", 1, 0, args... )
    return( root )
}

func Prelude_maxCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_max, "Prelude_max", 1, 0, args... )
    return( root )
}

func Prelude_showCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_show, "Prelude_show", 1, 0, args... )
    return( root )
}

func Prelude_showsPrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showsPrec, "Prelude_showsPrec", 1, 0, args... )
    return( root )
}

func Prelude_showListCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showList, "Prelude_showList", 1, 0, args... )
    return( root )
}

func Prelude_readsPrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readsPrec, "Prelude_readsPrec", 1, 0, args... )
    return( root )
}

func Prelude_readListCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readList, "Prelude_readList", 1, 0, args... )
    return( root )
}

func Prelude_minBoundCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_minBound, "Prelude_minBound", 1, 0, args... )
    return( root )
}

func Prelude_maxBoundCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_maxBound, "Prelude_maxBound", 1, 0, args... )
    return( root )
}

func Prelude_succCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_succ, "Prelude_succ", 1, 0, args... )
    return( root )
}

func Prelude_predCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_pred, "Prelude_pred", 1, 0, args... )
    return( root )
}

func Prelude_toEnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_toEnum, "Prelude_toEnum", 1, 0, args... )
    return( root )
}

func Prelude_fromEnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromEnum, "Prelude_fromEnum", 1, 0, args... )
    return( root )
}

func Prelude_enumFromCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFrom, "Prelude_enumFrom", 1, 0, args... )
    return( root )
}

func Prelude_enumFromThenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThen, "Prelude_enumFromThen", 1, 0, args... )
    return( root )
}

func Prelude_enumFromToCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromTo, "Prelude_enumFromTo", 1, 0, args... )
    return( root )
}

func Prelude_enumFromThenToCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo, "Prelude_enumFromThenTo", 1, 0, args... )
    return( root )
}

func Prelude_AddCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Add, "Prelude_Add", 1, 0, args... )
    return( root )
}

func Prelude_SubCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Sub, "Prelude_Sub", 1, 0, args... )
    return( root )
}

func Prelude_MulCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Mul, "Prelude_Mul", 1, 0, args... )
    return( root )
}

func Prelude_negateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_negate, "Prelude_negate", 1, 0, args... )
    return( root )
}

func Prelude_absCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_abs, "Prelude_abs", 1, 0, args... )
    return( root )
}

func Prelude_signumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_signum, "Prelude_signum", 1, 0, args... )
    return( root )
}

func Prelude_fromIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromInt, "Prelude_fromInt", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_FractionalHashPrelude_Num, "Prelude__superHashPrelude_FractionalHashPrelude_Num", 1, 0, args... )
    return( root )
}

func Prelude_SlashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Slash, "Prelude_Slash", 1, 0, args... )
    return( root )
}

func Prelude_recipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_recip, "Prelude_recip", 1, 0, args... )
    return( root )
}

func Prelude_fromFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromFloat, "Prelude_fromFloat", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealHashPrelude_Num, "Prelude__superHashPrelude_RealHashPrelude_Num", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealHashPrelude_Ord, "Prelude__superHashPrelude_RealHashPrelude_Ord", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_IntegralHashPrelude_Real, "Prelude__superHashPrelude_IntegralHashPrelude_Real", 1, 0, args... )
    return( root )
}

func Prelude_divCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_div, "Prelude_div", 1, 0, args... )
    return( root )
}

func Prelude_modCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mod, "Prelude_mod", 1, 0, args... )
    return( root )
}

func Prelude_quotCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quot, "Prelude_quot", 1, 0, args... )
    return( root )
}

func Prelude_remCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_rem, "Prelude_rem", 1, 0, args... )
    return( root )
}

func Prelude_divModCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_divMod, "Prelude_divMod", 1, 0, args... )
    return( root )
}

func Prelude_quotRemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quotRem, "Prelude_quotRem", 1, 0, args... )
    return( root )
}

func Prelude_fmapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fmap, "Prelude_fmap", 1, 0, args... )
    return( root )
}

func Prelude_GtGtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGtEq, "Prelude_GtGtEq", 1, 0, args... )
    return( root )
}

func Prelude_GtGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGt, "Prelude_GtGt", 1, 0, args... )
    return( root )
}

func Prelude_returnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_return, "Prelude_return", 1, 0, args... )
    return( root )
}

func Prelude_failCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fail, "Prelude_fail", 1, 0, args... )
    return( root )
}

func Prelude__defHashEqEqHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashSlashEqHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqCharCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0Create( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1Create( root, x3, x6, x1, x7 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x1 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x6 ), x8 ), Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1, x7, x9 ) )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRbCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x8 ), x11 ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x8 ), x12 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x10 ), x14 ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x10 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x5 ), x12 ), x17 ) ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    x8 = root.Children[ 7 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            x11 = x7.Children[ 2 ]
            x12 = x7.Children[ 3 ]
            x13 = x7.Children[ 4 ]
            x14 = x7.Children[ 5 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb_CASE0Create( root, x8, x1, x9, x2, x10, x3, x11, x4, x12, x5, x13, x6, x14 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x9 *Node
    var x2 *Node
    var x10 *Node
    var x3 *Node
    var x11 *Node
    var x4 *Node
    var x12 *Node
    var x5 *Node
    var x13 *Node
    var x6 *Node
    var x14 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x9 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x11 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x12 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x13 = root.Children[ 10 ]
    x6 = root.Children[ 11 ]
    x14 = root.Children[ 12 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, Prelude_LbCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x15 *Node
            var x16 *Node
            var x17 *Node
            var x18 *Node
            var x19 *Node
            var x20 *Node
            x15 = x8.Children[ 0 ]
            x16 = x8.Children[ 1 ]
            x17 = x8.Children[ 2 ]
            x18 = x8.Children[ 3 ]
            x19 = x8.Children[ 4 ]
            x20 = x8.Children[ 5 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x9 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x10 ), x16 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x11 ), x17 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x12 ), x18 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x5 ), x13 ), x19 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x6 ), x14 ), x20 ) ) ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6, x7 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6, x7 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    x8 = root.Children[ 7 ]
    x9 = root.Children[ 8 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x10 *Node
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            x12 = x8.Children[ 2 ]
            x13 = x8.Children[ 3 ]
            x14 = x8.Children[ 4 ]
            x15 = x8.Children[ 5 ]
            x16 = x8.Children[ 6 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb_CASE0Create( root, x9, x1, x10, x2, x11, x3, x12, x4, x13, x5, x14, x6, x15, x7, x16 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x10 *Node
    var x2 *Node
    var x11 *Node
    var x3 *Node
    var x12 *Node
    var x4 *Node
    var x13 *Node
    var x5 *Node
    var x14 *Node
    var x6 *Node
    var x15 *Node
    var x7 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x10 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x11 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x13 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x14 = root.Children[ 10 ]
    x6 = root.Children[ 11 ]
    x15 = root.Children[ 12 ]
    x7 = root.Children[ 13 ]
    x16 = root.Children[ 14 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x17 *Node
            var x18 *Node
            var x19 *Node
            var x20 *Node
            var x21 *Node
            var x22 *Node
            var x23 *Node
            x17 = x9.Children[ 0 ]
            x18 = x9.Children[ 1 ]
            x19 = x9.Children[ 2 ]
            x20 = x9.Children[ 3 ]
            x21 = x9.Children[ 4 ]
            x22 = x9.Children[ 5 ]
            x23 = x9.Children[ 6 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x10 ), x17 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x11 ), x18 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x12 ), x19 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x13 ), x20 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x5 ), x14 ), x21 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x6 ), x15 ), x22 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x7 ), x16 ), x23 ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6, x7 ) )
    return
}

func Prelude__defHashcompareHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x2 ), x3 ) )
    return
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1Create( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
            return
        case 1:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    x4 = root.Children[ 0 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_LTCreate( root )
            return
    }
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__defHashLtEqHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_StrtStrtCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_compareCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_EQCreate( new( Node ) ) ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_compareCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_LTCreate( new( Node ) ) ) )
    return
}

func Prelude__defHashGtEqHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x3 ), x2 )
    return
}

func Prelude__defHashLtHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x2 ), x3 ) )
    return
}

func Prelude__defHashGtHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashminHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0Create( root, x3, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1Create( root, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashmaxHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0Create( root, x3, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_GtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1Create( root, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__instHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqCharCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), Prelude__implHashcompareHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashGtEqHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashLtHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashGtHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashminHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashmaxHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0Create( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1Create( root, x3, x6, x1, x7 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x1 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2Create( root, x6, x8, x1, x7, x9, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x8 *Node
    var x1 *Node
    var x7 *Node
    var x9 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x8 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x10 = root.Children[ 5 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3Create( root, x1, x6, x8, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( root, x1, x7, x9 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x6 *Node
    var x8 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x6 ), x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbRbCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashminHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x2 ), x6 ), x8 ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x9 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x7 ), x10 ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x9 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x3 ), x8 ), x11 ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x8 ), x12 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x8 ), x12 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x3 ), x9 ), x13 ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x8 ), x12 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x4 ), x10 ), x14 ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x5 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x9 ), x14 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x3 ), x10 ), x15 ) ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x10 ), x15 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x4 ), x11 ), x16 ) ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x10 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ) ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x5 ), x12 ), x17 ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__defHashshowHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x2 ), Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__defHashshowsPrecHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_showCreate( new( Node ), x1 ), x3 ), x4 )
    return
}

func Prelude__defHashshowListHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_showListSQuoteCreate( root, Prelude_showsCreate( new( Node ), x1 ), x2, x3 )
    return
}

func Prelude__instHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbRbCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbRbCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x5 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x5.Children[ 0 ]
            x7 = x5.Children[ 1 ]
            x8 = x5.Children[ 2 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x6 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x7 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x8 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            x9 = x6.Children[ 2 ]
            x10 = x6.Children[ 3 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x7 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x8 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x9 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x4 ), x10 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x7 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            x10 = x7.Children[ 2 ]
            x11 = x7.Children[ 3 ]
            x12 = x7.Children[ 4 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x8 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x9 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x10 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x4 ), x11 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x5 ), x12 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashshowListHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_showListCreate( root, x1 )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_showStringCreate( root, Prelude_show_Create( new( Node ), x2 ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_nullCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_show_Create( new( Node ), x1 ) )
            return
    }
}

func Prelude__instHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_showSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ) ), Prelude_show_Create( new( Node ) ) ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_showSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ) ), Prelude_show_Create( new( Node ) ) ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__defHashreadsPrecHashPrelude_Read( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashreadListHashPrelude_Read( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readListDefaultCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRbCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda1__Hashlambda4__Hashlambda8_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_lexDigitsCreate( new( Node ) ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readNatLiteralCreate( new( Node ), x3 ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda10__Hashlambda13__Hashlambda17_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_allCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ) ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_readFloatLiteralCreate( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897__Hashlambda21Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readNatLiteralCreate( new( Node ), x1 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897__Hashlambda21( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_i2fCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE1Create( root, x4, x3, Prelude_isDigitCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_897Create( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda23__Hashlambda26__Hashlambda30_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE1Create( root, x4, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ), CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readCharLiteralCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda32__Hashlambda35__Hashlambda39_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41Create( new( Node ) ) ), x1 ), Prelude_applyCreate( new( Node ), Prelude_readListDefaultCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ) ), x1 ) )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE1Create( root, x4, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ), CharLitCreate( new( Node ), 34 ) ) )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readStringLiteralCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda41__Hashlambda44__Hashlambda48_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__instHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashreadListHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readListCreate( root, x1 )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50Create( new( Node ), x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x2 ), x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x2 ), x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0Create( root, x5, x2, x1, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1Create( root, x8, x2, x1, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2Create( root, x8, x2, x1, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaRbCreate( new( Node ), x2, x1 ), x6 ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71Create( new( Node ), x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0Create( root, x6, x3, x2, x1, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1Create( root, x9, x3, x2, x1, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2Create( root, x9, x3, x2, x1, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaRbCreate( new( Node ), x3, x2, x1 ), x7 ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100Create( new( Node ), x4, x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0Create( root, x7, x4, x3, x2, x1, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1Create( root, x10, x4, x3, x2, x1, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2Create( root, x10, x4, x3, x2, x1, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaCommaRbCreate( new( Node ), x4, x3, x2, x1 ), x8 ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137Create( new( Node ), x5, x4, x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140Create( new( Node ), x1, x2, x3, x4, x5 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0Create( root, x8, x5, x4, x3, x2, x1, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1Create( root, x11, x5, x4, x3, x2, x1, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2Create( root, x11, x5, x4, x3, x2, x1, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), x5, x4, x3, x2, x1 ), x9 ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__defHashminBoundHashPrelude_Bounded( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashmaxBoundHashPrelude_Bounded( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashsuccHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__Create( new( Node ), Prelude_flipCreate( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 1 ) ), Prelude_fromEnumCreate( new( Node ), x1 ) ) )
    return
}

func Prelude__defHashpredHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__Create( new( Node ), Prelude__defHashpredHashPrelude_Enum__Hashlambda182Create( new( Node ) ), Prelude_fromEnumCreate( new( Node ), x1 ) ) )
    return
}

func Prelude__defHashpredHashPrelude_Enum__Hashlambda182( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__defHashtoEnumHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashfromEnumHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashenumFromHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude__defHashenumFromThenHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ) ) )
    return
}

func Prelude__defHashenumFromToHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ) ) )
    return
}

func Prelude__defHashenumFromThenToHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x4 ) ) )
    return
}

func Prelude__instHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbRbCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__instHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE0Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE1Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbRbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1Create( root )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = Prelude_ColCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x3 )
    x3.SetChild( 1, x3 )
    RedirectCreate( root, x3 )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbRbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1Create( root, x3 )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2Create( root )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    x4 = Prelude_ColCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x4 )
    x4.SetChild( 1, x4 )
    RedirectCreate( root, x4 )
    return
}

func Prelude__instHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__instHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE0Create( root, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE1Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ) )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromThenCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LTCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__instHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_EQCreate( root )
            return
        case 1:
            Prelude_GTCreate( root )
            return
        case 2:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 79 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 79 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
        case 1:
            Prelude_LTCreate( root )
            return
        case 2:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0Create( root, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE1Create( root, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ) )
            return
        case 1:
            Prelude_LTCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE2Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 2 ) ) )
            return
        case 1:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE3Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 79 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
        case 2:
            IntLitCreate( root, 2 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromThenCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_chrCreate( root, IntLitCreate( new( Node ), 0 ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_chrCreate( root, Prelude_uppermostCharacterCreate( new( Node ) ) )
            return
    }
}

func Prelude__instHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude_ordCreate( new( Node ), x1 ) ), Prelude_uppermostCharacterCreate( new( Node ) ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_chrCreate( new( Node ) ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude_ordCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 67 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude_ordCreate( new( Node ), x1 ) ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_chrCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude_ordCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 67 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_chrCreate( root )
    return
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_ordCreate( root )
    return
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_boundedEnumFromThenCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ), Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_enumFrom_Create( root )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_enumFromThen_Create( root )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_enumFromTo_Create( root )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_enumFromThenTo_Create( root )
    return
}

func Prelude__defHashAddHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashSubHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_AddCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), x1 ), x3 ) )
    return
}

func Prelude__defHashMulHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 42 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashnegateHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SubCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) ) ), x2 )
    return
}

func Prelude__defHashabsHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashsignumHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashfromIntHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 73 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashNumCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashMulHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashabsHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashsignumHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashfromIntHashPrelude_NumHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddDolCreate( root, x1, x2 )
    return
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_SubDolCreate( root, x1, x2 )
    return
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_MulDolCreate( root, x1, x2 )
    return
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 0 ), x1 )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x1 )
            return
    }
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root, x1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            IntLitCreate( root, 0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 1 ) )
            return
    }
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashNumCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashMulHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashabsHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashsignumHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_Add_Create( root, x1, x2 )
    return
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_Sub_Create( root, x1, x2 )
    return
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_Mul_Create( root, x1, x2 )
    return
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_negateFloatCreate( root, x1 )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), x1 ), FloatLitCreate( new( Node ), 0.0 ) ) )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x1 )
            return
    }
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root, x1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), x1 ), FloatLitCreate( new( Node ), 0.0 ) ) )
    return
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ), x1, FloatLitCreate( new( Node ), 0.0 ) ) )
            return
        case 1:
            FloatLitCreate( root, 1.0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            FloatLitCreate( root, 0.0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root, FloatLitCreate( new( Node ), 1.0 ) )
            return
    }
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_i2fCreate( root, x1 )
    return
}

func Prelude__defHashSlashHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), x1 ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_recipCreate( new( Node ), x1 ), x3 ) )
    return
}

func Prelude__defHashrecipHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), x1 ) ), IntLitCreate( new( Node ), 1 ) ) ), x2 )
    return
}

func Prelude__defHashfromFloatHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFractionalCreate( root, Prelude__instHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSlashHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashrecipHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_Slash_Create( root, x1, x2 )
    return
}

func Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSlashHashPrelude_FractionalHashPrelude_FloatCreate( root, FloatLitCreate( new( Node ), 1.0 ), x1 )
    return
}

func Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashdivHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_divModCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashdivHashPrelude_Integral__HashselFP2HashqCreate( root, x4 )
    return
}

func Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashmodHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_divModCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashmodHashPrelude_Integral__HashselFP4HashrCreate( root, x4 )
    return
}

func Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashquotHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotRemCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashquotHashPrelude_Integral__HashselFP6HashqCreate( root, x4 )
    return
}

func Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashremHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotRemCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashremHashPrelude_Integral__HashselFP8HashrCreate( root, x4 )
    return
}

func Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashdivModHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 118 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 77 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashquotRemHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 113 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 82 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_RealHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashRealCreate( root, Prelude__instHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_RealHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashRealCreate( root, Prelude__instHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashIntegralCreate( root, Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__implHashdivHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashmodHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashquotHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashremHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashdivModHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashdivHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmodHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashquotHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashremHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashremHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_div_Create( new( Node ), x1, x2 ), Prelude_mod_Create( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_quot_Create( new( Node ), x1, x2 ), Prelude_rem_Create( new( Node ), x1, x2 ) )
    return
}

func Prelude__defHashfmapHashPrelude_Functor( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_FunctorHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFunctorCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_mapCreate( root )
    return
}

func Prelude__defHashGtGtEqHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashGtGtHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude__defHashGtGtHashPrelude_Monad__Hashlambda183Create( new( Node ), x3 ) )
    return
}

func Prelude__defHashGtGtHashPrelude_Monad__Hashlambda183( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashreturnHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashfailHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_errorCreate( root, x2 )
    return
}

func Prelude__instHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_GtGtEqDolCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_GtGtDolCreate( root, x1, x2 )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_returnIOCreate( root, x1 )
    return
}

func Prelude__implHashfailHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashfailHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude_applyCreate( root, x2, x3 )
            return
    }
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtGtHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_JustCreate( root )
    return
}

func Prelude__implHashfailHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_NothingCreate( root )
    return
}

func Prelude__instHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184Create( new( Node ), x2 ) ), x1 )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_mapCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184__Hashlambda185Create( new( Node ) ), Prelude_applyCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda184__Hashlambda185( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtGtHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashfailHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_LSbRSbCreate( root )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186Create( new( Node ) ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191Create( new( Node ) ) ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 70 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 97 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 108 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 115 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda186__Hashlambda189_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 117 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda191__Hashlambda194_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_TrueCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1Create( root, x2 )
            return
        case 2:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1Create( root, x2 )
            return
        case 2:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 76 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 81 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
        case 2:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 71 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196Create( new( Node ) ) ), x2 ), Prelude_AddAddCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201Create( new( Node ) ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206Create( new( Node ) ) ), x2 ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 76 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda196__Hashlambda199_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LTCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 81 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda201__Hashlambda204_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_EQCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 71 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda206__Hashlambda209_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_GTCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0Create( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1Create( root, x3, x1, x5 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x6 *Node
            x6 = x3.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashLtHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashGtHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashminHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0Create( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1Create( root, x3, x1, x5 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x6 *Node
            x6 = x3.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) )
            return
        case 1:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x2 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 74 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x4 ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211Create( new( Node ) ) ), x3 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x2 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216Create( new( Node ), x1 ) ), x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 78 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 104 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 105 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 110 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 103 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda211__Hashlambda214_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 74 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 117 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 115 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219__Hashlambda223Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda216__Hashlambda219__Hashlambda223( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_JustCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0Create( root, x4, x1, x5 )
            return
        case 1:
            var x8 *Node
            x8 = x3.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1Create( root, x4, x2, x8 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x8 ), x10 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_EitherCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashLtHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashGtHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashminHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0Create( root, x4, x1, x5 )
            return
        case 1:
            var x8 *Node
            x8 = x3.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1Create( root, x4, x2, x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x2 ), x8 ), x10 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x4.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 76 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ) )
            return
        case 1:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 82 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x2 ), IntLitCreate( new( Node ), 11 ) ), x6 ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225Create( new( Node ), x1 ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234Create( new( Node ), x2 ) ), x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 76 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 102 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228__Hashlambda232Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda225__Hashlambda228__Hashlambda232( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LeftCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 82 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 105 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 103 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 104 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x14 *Node
            var x15 *Node
            x14 = x13.Children[ 0 ]
            x15 = x13.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE9Create( root, x15, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x14, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x15 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE10Create( root, x15, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x15 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237__Hashlambda241Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda234__Hashlambda237__Hashlambda241( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_RightCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0Create( root, x2, x3 )
            return
        case 1:
            var x8 *Node
            x8 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1Create( root, x2, x8 )
            return
        case 2:
            var x13 *Node
            x13 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2Create( root, x2, x13 )
            return
        case 3:
            var x18 *Node
            x18 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3Create( root, x2, x18 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x18 *Node
    x2 = root.Children[ 0 ]
    x18 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            var x22 *Node
            x22 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x18, x22 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x13 *Node
    x2 = root.Children[ 0 ]
    x13 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            var x16 *Node
            x16 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x13, x16 )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x8 *Node
    x2 = root.Children[ 0 ]
    x8 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x8, x10 )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x3, x4 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x2.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 73 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 79 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x3 ) ) )
            return
        case 1:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 85 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x4 ) ) )
            return
        case 2:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x5 ) ) )
            return
        case 3:
            var x6 *Node
            x6 = x2.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x6 ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243Create( new( Node ) ) ), x2 ), Prelude_AddAddCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252Create( new( Node ) ) ), x2 ), Prelude_AddAddCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261Create( new( Node ) ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x1 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270Create( new( Node ) ) ), x2 ) ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 73 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 79 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246__Hashlambda250Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda243__Hashlambda246__Hashlambda250( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 85 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 115 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x19 *Node
            var x20 *Node
            x19 = x18.Children[ 0 ]
            x20 = x18.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE15Create( root, x20, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x19, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE15( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE16Create( root, x20, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE16( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x20.GetConstructor(  ){
        case -1:
            RedirectCreate( x20, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x21 *Node
            var x22 *Node
            x21 = x20.Children[ 0 ]
            x22 = x20.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE17Create( root, x22, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x21, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_COMPLEXCASE17( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE18Create( root, x22, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255_CASE18( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x22.GetConstructor(  ){
        case -1:
            RedirectCreate( x22, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255__Hashlambda259Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda252__Hashlambda255__Hashlambda259( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 70 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 97 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 105 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 108 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x19 *Node
            var x20 *Node
            x19 = x18.Children[ 0 ]
            x20 = x18.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE15Create( root, x20, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x19, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE15( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE16Create( root, x20, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE16( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x20.GetConstructor(  ){
        case -1:
            RedirectCreate( x20, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x21 *Node
            var x22 *Node
            x21 = x20.Children[ 0 ]
            x22 = x20.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE17Create( root, x22, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x21, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_COMPLEXCASE17( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    var x25 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x25 = root.Children[ 3 ]
    switch x25.GetConstructor(  ){
        case -1:
            RedirectCreate( x25, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE18Create( root, x22, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264_CASE18( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x22.GetConstructor(  ){
        case -1:
            RedirectCreate( x22, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264__Hashlambda268Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda261__Hashlambda264__Hashlambda268( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 78 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 110 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 100 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x19 *Node
            var x20 *Node
            x19 = x18.Children[ 0 ]
            x20 = x18.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE15Create( root, x20, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x19, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE15( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE16Create( root, x20, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE16( task *Task )(  ){
    root := task.GetControl(  )
    var x20 *Node
    var x4 *Node
    var x2 *Node
    x20 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x20.GetConstructor(  ){
        case -1:
            RedirectCreate( x20, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x21 *Node
            var x22 *Node
            x21 = x20.Children[ 0 ]
            x22 = x20.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE17Create( root, x22, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x21, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE17( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE18Create( root, x22, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE18( task *Task )(  ){
    root := task.GetControl(  )
    var x22 *Node
    var x4 *Node
    var x2 *Node
    x22 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x22.GetConstructor(  ){
        case -1:
            RedirectCreate( x22, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x23 *Node
            var x24 *Node
            x23 = x22.Children[ 0 ]
            x24 = x22.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE19Create( root, x24, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x23, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE19( task *Task )(  ){
    root := task.GetControl(  )
    var x24 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x24 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE20Create( root, x24, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE20( task *Task )(  ){
    root := task.GetControl(  )
    var x24 *Node
    var x4 *Node
    var x2 *Node
    x24 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x24.GetConstructor(  ){
        case -1:
            RedirectCreate( x24, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x25 *Node
            var x26 *Node
            x25 = x24.Children[ 0 ]
            x26 = x24.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE21Create( root, x26, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x25, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_COMPLEXCASE21( task *Task )(  ){
    root := task.GetControl(  )
    var x26 *Node
    var x4 *Node
    var x2 *Node
    var x29 *Node
    x26 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x29 = root.Children[ 3 ]
    switch x29.GetConstructor(  ){
        case -1:
            RedirectCreate( x29, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE22Create( root, x26, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273_CASE22( task *Task )(  ){
    root := task.GetControl(  )
    var x26 *Node
    var x4 *Node
    var x2 *Node
    x26 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x26.GetConstructor(  ){
        case -1:
            RedirectCreate( x26, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273__Hashlambda277Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), IntLitCreate( new( Node ), 11 ) ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IOError__Hashlambda270__Hashlambda273__Hashlambda277( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_NondetErrorCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude____Hashlambda279Create( root, x1, x2 )
    return
}

func Prelude____Hashlambda279( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, x1, Prelude_applyCreate( new( Node ), x2, x3 ) )
    return
}

func Prelude_id( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_const( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_curry( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, x1, Prelude_LbCommaRbCreate( new( Node ), x2, x3 ) )
    return
}

func Prelude_uncurry( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), x4 )
            return
    }
}

func Prelude_flip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), x2 )
    return
}

func Prelude_until( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_until_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_until_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_untilCreate( root, x1, x2, Prelude_applyCreate( new( Node ), x2, x3 ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_seq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolExclCreate( root, Prelude_constCreate( new( Node ), x2 ), x1 )
    return
}

func Prelude_ensureNotFree( task *Task )(  ){
    ExternalPrelude_ensureNotFree( task )
    return
}

func Prelude_ensureSpine( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ensureSpine_ensureList_20Create( root, Prelude_ensureNotFreeCreate( new( Node ), x1 ) )
    return
}

func Prelude_ensureSpine_ensureList_20( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_ColCreate( root, x2, Prelude_ensureSpineCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude_Dol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, x1, x2 )
    return
}

func Prelude_DolExcl( task *Task )(  ){
    ExternalPrelude_DolExcl( task )
    return
}

func Prelude_DolExclExcl( task *Task )(  ){
    ExternalPrelude_DolExclExcl( task )
    return
}

func Prelude_DolHash( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolExclCreate( root, x1, Prelude_ensureNotFreeCreate( new( Node ), x2 ) )
    return
}

func Prelude_DolHashHash( task *Task )(  ){
    ExternalPrelude_DolHashHash( task )
    return
}

func Prelude_error( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_errorCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_error( task *Task )(  ){
    ExternalPrelude_prim_error( task )
    return
}

func Prelude_failed( task *Task )(  ){
    ExternalPrelude_failed( task )
    return
}

func Prelude_AndAnd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_StrtStrt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude_not( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude_otherwise( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_TrueCreate( root )
    return
}

func Prelude_if_then_else( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_solve( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude_AndGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_EqColEq( task *Task )(  ){
    ExternalPrelude_EqColEq( task )
    return
}

func Prelude_And( task *Task )(  ){
    ExternalPrelude_And( task )
    return
}

func Prelude_eqChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqCharCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqChar( task *Task )(  ){
    ExternalPrelude_prim_eqChar( task )
    return
}

func Prelude_eqInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqInt( task *Task )(  ){
    ExternalPrelude_prim_eqInt( task )
    return
}

func Prelude_eqFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqFloat( task *Task )(  ){
    ExternalPrelude_prim_eqFloat( task )
    return
}

func Prelude_ltEqChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqCharCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqChar( task *Task )(  ){
    ExternalPrelude_prim_ltEqChar( task )
    return
}

func Prelude_ltEqInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqInt( task *Task )(  ){
    ExternalPrelude_prim_ltEqInt( task )
    return
}

func Prelude_ltEqFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqFloat( task *Task )(  ){
    ExternalPrelude_prim_ltEqFloat( task )
    return
}

func Prelude_fst( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_snd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_head( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_tail( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_null( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude_AddAdd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, x3, Prelude_AddAddCreate( new( Node ), x4, x2 ) )
            return
    }
}

func Prelude_length( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_length_len_92Create( root, Prelude__instHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), x1, IntLitCreate( new( Node ), 0 ) )
    return
}

func Prelude_length_len_92( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 1 ]
            Prelude_length_len_92_LET0Create( root, x5, x3, x1 )
            return
    }
}

func Prelude_length_len_92_LET0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x3 *Node
    var x1 *Node
    var x6 *Node
    x5 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_AddCreate( new( Node ), x1 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) ) )
    Prelude_DolExclExclCreate( root, Prelude_length_len_92Create( new( Node ), x1, x5 ), x6 )
    return
}

func Prelude_ExclExcl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ExclExcl_COMPLEXCASE0Create( root, x4, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x2, IntLitCreate( new( Node ), 0 ) ) )
            return
    }
}

func Prelude_ExclExcl_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ExclExcl_COMPLEXCASE1Create( root, x4, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x2 ), IntLitCreate( new( Node ), 0 ) ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_ExclExcl_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_ExclExclCreate( root, x4, Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x2, IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude_map( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), Prelude_mapCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_foldl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_foldlCreate( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x2 ), x4 ), x5 )
            return
    }
}

func Prelude_foldl1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_foldlCreate( root, x1, x3, x4 )
            return
    }
}

func Prelude_foldr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x4 ), Prelude_foldrCreate( new( Node ), x1, x2, x5 ) )
            return
    }
}

func Prelude_foldr1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_foldr1_CASE0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_foldr1_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), Prelude_foldr1Create( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_filter( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_filter_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_filter_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_filterCreate( root, x1, x4 )
            return
        case 1:
            Prelude_ColCreate( root, x3, Prelude_filterCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_zip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_zip_CASE0Create( root, x2, x3, x4 )
            return
    }
}

func Prelude_zip_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x2.Children[ 0 ]
            x6 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x3, x5 ), Prelude_zipCreate( new( Node ), x4, x6 ) )
            return
    }
}

func Prelude_zip3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x1.Children[ 0 ]
            x5 = x1.Children[ 1 ]
            Prelude_zip3_CASE0Create( root, x2, x3, x4, x5 )
            return
    }
}

func Prelude_zip3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude_zip3_CASE1Create( root, x3, x4, x6, x5, x7 )
            return
    }
}

func Prelude_zip3_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x6 *Node
    var x5 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaCommaRbCreate( new( Node ), x4, x6, x8 ), Prelude_zip3Create( new( Node ), x5, x7, x9 ) )
            return
    }
}

func Prelude_zipWith( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_zipWith_CASE0Create( root, x3, x4, x1, x5 )
            return
    }
}

func Prelude_zipWith_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x3.Children[ 0 ]
            x7 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x4 ), x6 ), Prelude_zipWithCreate( new( Node ), x1, x5, x7 ) )
            return
    }
}

func Prelude_zipWith3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x2.Children[ 0 ]
            x6 = x2.Children[ 1 ]
            Prelude_zipWith3_CASE0Create( root, x3, x4, x5, x1, x6 )
            return
    }
}

func Prelude_zipWith3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x3.Children[ 0 ]
            x8 = x3.Children[ 1 ]
            Prelude_zipWith3_CASE1Create( root, x4, x5, x7, x1, x6, x8 )
            return
    }
}

func Prelude_zipWith3_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x7 *Node
    var x1 *Node
    var x6 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x4.Children[ 0 ]
            x10 = x4.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x5 ), x7 ), x9 ), Prelude_zipWith3Create( new( Node ), x1, x6, x8, x10 ) )
            return
    }
}

func Prelude_unzip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_unzip_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude_unzip_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_unzip_LET1Create( root, x4, x5, x3 )
            return
    }
}

func Prelude_unzip_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x3 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x6 = Prelude_unzipCreate( new( Node ), x3 )
    x7 = Prelude_unzip__HashselFP10HashxsCreate( new( Node ), x6 )
    x8 = Prelude_unzip__HashselFP11HashysCreate( new( Node ), x6 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x4, x7 ), Prelude_ColCreate( new( Node ), x5, x8 ) )
    return
}

func Prelude_unzip__HashselFP10Hashxs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_unzip__HashselFP11Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unzip3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_unzip3_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude_unzip3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            var x6 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            x6 = x2.Children[ 2 ]
            Prelude_unzip3_LET1Create( root, x4, x5, x6, x3 )
            return
    }
}

func Prelude_unzip3_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x3 *Node
    var x7 *Node
    var x8 *Node
    var x9 *Node
    var x10 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = Prelude_unzip3Create( new( Node ), x3 )
    x8 = Prelude_unzip3__HashselFP13HashxsCreate( new( Node ), x7 )
    x9 = Prelude_unzip3__HashselFP14HashysCreate( new( Node ), x7 )
    x10 = Prelude_unzip3__HashselFP15HashzsCreate( new( Node ), x7 )
    Prelude_LbCommaCommaRbCreate( root, Prelude_ColCreate( new( Node ), x4, x8 ), Prelude_ColCreate( new( Node ), x5, x9 ), Prelude_ColCreate( new( Node ), x6, x10 ) )
    return
}

func Prelude_unzip3__HashselFP13Hashxs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_unzip3__HashselFP14Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unzip3__HashselFP15Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_concat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_AddAddCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), x1 )
    return
}

func Prelude_concatMap( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_concatCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_iterate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ColCreate( root, x2, Prelude_iterateCreate( new( Node ), x1, Prelude_applyCreate( new( Node ), x1, x2 ) ) )
    return
}

func Prelude_repeat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude_repeatCreate( new( Node ), x1 ) )
    return
}

func Prelude_replicate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_takeCreate( root, x1, Prelude_repeatCreate( new( Node ), x2 ) )
    return
}

func Prelude_take( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_take_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_take_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_take_takep_209Create( root, x1, x2 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_take_takep_209( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_ColCreate( root, x3, Prelude_takeCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 ) )
            return
    }
}

func Prelude_drop( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_drop_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_drop_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_drop_CASE1Create( root, x2, x1 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_drop_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x1 *Node
    x2 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            x4 = x2.Children[ 1 ]
            Prelude_dropCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 )
            return
    }
}

func Prelude_splitAt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_splitAt_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_splitAt_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_splitAt_splitAtp_223Create( root, x1, x2 )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), x2 )
            return
    }
}

func Prelude_splitAt_splitAtp_223( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_splitAt_splitAtp_223_LET0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_splitAt_splitAtp_223_LET0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = Prelude_splitAtCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 )
    x6 = Prelude_splitAt_splitAtp_223__HashselFP17HashysCreate( new( Node ), x5 )
    x7 = Prelude_splitAt_splitAtp_223__HashselFP18HashzsCreate( new( Node ), x5 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x3, x6 ), x7 )
    return
}

func Prelude_splitAt_splitAtp_223__HashselFP17Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_splitAt_splitAtp_223__HashselFP18Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_takeWhile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_takeWhile_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_takeWhile_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, x3, Prelude_takeWhileCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_dropWhile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_dropWhile_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_dropWhile_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, x3, x4 )
            return
        case 1:
            Prelude_dropWhileCreate( root, x1, x4 )
            return
    }
}

func Prelude_span( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_span_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_span_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x8 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x8 = root.Children[ 3 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_span_COMPLEXCASE1Create( root, x3, x4, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_span_LET2Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_span_LET2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = Prelude_spanCreate( new( Node ), x1, x4 )
    x6 = Prelude_span__HashselFP20HashysCreate( new( Node ), x5 )
    x7 = Prelude_span__HashselFP21HashzsCreate( new( Node ), x5 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x3, x6 ), x7 )
    return
}

func Prelude_span_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x3, x4 ) )
            return
    }
}

func Prelude_span__HashselFP20Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_span__HashselFP21Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_break( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_spanCreate( root, Prelude__Create( new( Node ), Prelude_notCreate( new( Node ) ), x1 ) )
    return
}

func Prelude_lines( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lines_LET0Create( root, x2, x3 )
            return
    }
}

func Prelude_lines_LET0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = Prelude_lines_splitline_253Create( new( Node ), Prelude_ColCreate( new( Node ), x2, x3 ) )
    x5 = Prelude_lines__HashselFP26HashlCreate( new( Node ), x4 )
    x6 = Prelude_lines__HashselFP27Hashxs_lCreate( new( Node ), x4 )
    Prelude_ColCreate( root, x5, Prelude_linesCreate( new( Node ), x6 ) )
    return
}

func Prelude_lines_splitline_253( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lines_splitline_253_COMPLEXCASE0Create( root, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 10 ) ) )
            return
    }
}

func Prelude_lines_splitline_253_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x7 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lines_splitline_253_LET1Create( root, x2, x3 )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), x3 )
            return
    }
}

func Prelude_lines_splitline_253_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = Prelude_lines_splitline_253Create( new( Node ), x3 )
    x5 = Prelude_lines_splitline_253__HashselFP23HashdsCreate( new( Node ), x4 )
    x6 = Prelude_lines_splitline_253__HashselFP24HashesCreate( new( Node ), x4 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x2, x5 ), x6 )
    return
}

func Prelude_lines_splitline_253__HashselFP23Hashds( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_lines_splitline_253__HashselFP24Hashes( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_lines__HashselFP26Hashl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_lines__HashselFP27Hashxs_l( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unlines( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude_flipCreate( new( Node ), Prelude_AddAddCreate( new( Node ) ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 10 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x1 )
    return
}

func Prelude_words( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x1 )
    Prelude_words_COMPLEXCASE0Create( root, x2, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2, Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_words_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x6 *Node
    x2 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_words_LET1Create( root, x2 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_words_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = Prelude_applyCreate( new( Node ), Prelude_breakCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ) ), x2 )
    x4 = Prelude_words__HashselFP29HashwCreate( new( Node ), x3 )
    x5 = Prelude_words__HashselFP30Hashs2Create( new( Node ), x3 )
    Prelude_ColCreate( root, x4, Prelude_wordsCreate( new( Node ), x5 ) )
    return
}

func Prelude_words__HashselFP29Hashw( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_words__HashselFP30Hashs2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unwords( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_unwords_COMPLEXCASE0Create( root, x1, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x1, Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_unwords_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_foldr1Create( root, Prelude_unwords__Hashlambda282Create( new( Node ) ), x1 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_unwords__Hashlambda282( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, x1, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), x2 ) )
    return
}

func Prelude_reverse( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldlCreate( root, Prelude_flipCreate( new( Node ), Prelude_ColCreate( new( Node ) ) ), Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude_and( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude_AndAndCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) )
    return
}

func Prelude_or( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude_StrtStrtCreate( new( Node ) ), Prelude_FalseCreate( new( Node ) ) )
    return
}

func Prelude_any( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_orCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_all( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_andCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_elem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_anyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_notElem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_allCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_lookup( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lookup_CASE0Create( root, x4, x1, x2, x5 )
            return
    }
}

func Prelude_lookup_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_lookup_COMPLEXCASE1Create( root, x1, x2, x5, x7, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ), x6 ) )
            return
    }
}

func Prelude_lookup_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    var x7 *Node
    var x8 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lookup_COMPLEXCASE2Create( root, x1, x2, x5, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_JustCreate( root, x7 )
            return
    }
}

func Prelude_lookup_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_lookupCreate( root, x1, x2, x5 )
            return
    }
}

func Prelude_enumFrom_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude_enumFrom_Create( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ) ) )
    return
}

func Prelude_enumFromThen_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_iterateCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x2, x1 ) ), x1 )
    return
}

func Prelude_enumFromTo_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_enumFromTo__COMPLEXCASE0Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ) )
    return
}

func Prelude_enumFromTo__COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, x1, Prelude_enumFromTo_Create( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x2 ) )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_enumFromThenTo_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_takeWhileCreate( root, Prelude_enumFromThenTo__p_299Create( new( Node ), x3, x1, x2 ), Prelude_enumFromThen_Create( new( Node ), x1, x2 ) )
    return
}

func Prelude_enumFromThenTo__p_299( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_enumFromThenTo__p_299_COMPLEXCASE0Create( root, x4, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x3 ), x2 ) )
    return
}

func Prelude_enumFromThenTo__p_299_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_enumFromThenTo__p_299_COMPLEXCASE1Create( root, x4, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( root, x4, x1 )
            return
    }
}

func Prelude_enumFromThenTo__p_299_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x4 ), x1 )
            return
    }
}

func Prelude_ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_ordCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_ord( task *Task )(  ){
    ExternalPrelude_prim_ord( task )
    return
}

func Prelude_chr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_chr_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_chr_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_DolHashCreate( root, Prelude_prim_chrCreate( new( Node ) ), x1 )
            return
    }
}

func Prelude_prim_chr( task *Task )(  ){
    ExternalPrelude_prim_chr( task )
    return
}

func Prelude_AddDol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_plusCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_plus( task *Task )(  ){
    ExternalPrelude_prim_Int_plus( task )
    return
}

func Prelude_SubDol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_minusCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_minus( task *Task )(  ){
    ExternalPrelude_prim_Int_minus( task )
    return
}

func Prelude_MulDol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_timesCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_times( task *Task )(  ){
    ExternalPrelude_prim_Int_times( task )
    return
}

func Prelude_div_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_divCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_div( task *Task )(  ){
    ExternalPrelude_prim_Int_div( task )
    return
}

func Prelude_mod_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_modCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_mod( task *Task )(  ){
    ExternalPrelude_prim_Int_mod( task )
    return
}

func Prelude_divMod_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashdivHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashmodHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ) )
    return
}

func Prelude_quot_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_quotCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_quot( task *Task )(  ){
    ExternalPrelude_prim_Int_quot( task )
    return
}

func Prelude_rem_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Int_remCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Int_rem( task *Task )(  ){
    ExternalPrelude_prim_Int_rem( task )
    return
}

func Prelude_quotRem_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashquotHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashremHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ) )
    return
}

func Prelude_negate_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 0 ), x1 )
    return
}

func Prelude_negateFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_negateFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_negateFloat( task *Task )(  ){
    ExternalPrelude_prim_negateFloat( task )
    return
}

func Prelude_success( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_TrueCreate( root )
    return
}

func Prelude_maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x1 )
            return
        case 1:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x2, x4 )
            return
    }
}

func Prelude_either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x1, x4 )
            return
        case 1:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x2, x5 )
            return
    }
}

func Prelude_GtGtEqDol( task *Task )(  ){
    ExternalPrelude_GtGtEqDol( task )
    return
}

func Prelude_returnIO( task *Task )(  ){
    ExternalPrelude_returnIO( task )
    return
}

func Prelude_GtGtDol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_GtGtEqDolCreate( root, x1, Prelude_GtGtDol__Hashlambda283Create( new( Node ), x2 ) )
    return
}

func Prelude_GtGtDol__Hashlambda283( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_done( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_LbRbCreate( new( Node ) ) )
    return
}

func Prelude_putChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_putCharCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_putChar( task *Task )(  ){
    ExternalPrelude_prim_putChar( task )
    return
}

func Prelude_getChar( task *Task )(  ){
    ExternalPrelude_getChar( task )
    return
}

func Prelude_readFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readFileCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readFile( task *Task )(  ){
    ExternalPrelude_prim_readFile( task )
    return
}

func Prelude_prim_readFileContents( task *Task )(  ){
    ExternalPrelude_prim_readFileContents( task )
    return
}

func Prelude_writeFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_DolHashHashCreate( new( Node ), Prelude_prim_writeFileCreate( new( Node ) ), x1 ), x2 )
    return
}

func Prelude_prim_writeFile( task *Task )(  ){
    ExternalPrelude_prim_writeFile( task )
    return
}

func Prelude_appendFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_DolHashHashCreate( new( Node ), Prelude_prim_appendFileCreate( new( Node ) ), x1 ), x2 )
    return
}

func Prelude_prim_appendFile( task *Task )(  ){
    ExternalPrelude_prim_appendFile( task )
    return
}

func Prelude_putStr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_doneCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_putCharCreate( new( Node ), x2 ), Prelude_putStrCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude_putStrLn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_putStrCreate( new( Node ), x1 ), Prelude_putCharCreate( new( Node ), CharLitCreate( new( Node ), 10 ) ) )
    return
}

func Prelude_getLine( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_getCharCreate( new( Node ) ), Prelude_getLine__Hashlambda285Create( new( Node ) ) )
    return
}

func Prelude_getLine__Hashlambda285( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = x1
    Prelude_getLine__Hashlambda285_COMPLEXCASE0Create( root, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 10 ) ) )
    return
}

func Prelude_getLine__Hashlambda285_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_getLineCreate( new( Node ) ), Prelude_getLine__Hashlambda285__Hashlambda288Create( new( Node ), x2 ) )
            return
        case 1:
            Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_getLine__Hashlambda285__Hashlambda288( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = x2
    Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_ColCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_userError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_UserErrorCreate( root, x1 )
    return
}

func Prelude_ioError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_errorCreate( root, Prelude_showErrorCreate( new( Node ), x1 ) )
    return
}

func Prelude_showError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 47 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ), x2 )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ), x3 )
            return
        case 2:
            var x4 *Node
            x4 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ), x4 )
            return
        case 3:
            var x5 *Node
            x5 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ), x5 )
            return
    }
}

func Prelude_catch( task *Task )(  ){
    ExternalPrelude_catch( task )
    return
}

func Prelude_show_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_showCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_show( task *Task )(  ){
    ExternalPrelude_prim_show( task )
    return
}

func Prelude_print( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_putStrLnCreate( root, Prelude_applyCreate( new( Node ), Prelude_showCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_doSolve( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_doneCreate( root )
            return
    }
}

func Prelude_sequenceIO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, x2, Prelude_sequenceIO__Hashlambda292Create( new( Node ), x3 ) )
            return
    }
}

func Prelude_sequenceIO__Hashlambda292( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = x2
    Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_sequenceIOCreate( new( Node ), x1 ), Prelude_sequenceIO__Hashlambda292__Hashlambda294Create( new( Node ), x3 ) )
    return
}

func Prelude_sequenceIO__Hashlambda292__Hashlambda294( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = x2
    Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_ColCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_sequenceIO_( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_doneCreate( new( Node ) ) )
    return
}

func Prelude_mapIO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_sequenceIOCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_mapIO_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_sequenceIO_Create( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_foldIO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root, x2 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x2 ), x4 ), Prelude_foldIO__Hashlambda296Create( new( Node ), x5, x1 ) )
            return
    }
}

func Prelude_foldIO__Hashlambda296( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_foldIOCreate( root, x2, x3, x1 )
    return
}

func Prelude_liftIO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root, x2, Prelude__Create( new( Node ), Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), x1 ) )
    return
}

func Prelude_forIO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_mapIOCreate( new( Node ), x2 ), x1 )
    return
}

func Prelude_forIO_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_mapIO_Create( new( Node ), x2 ), x1 )
    return
}

func Prelude_unless( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_doneCreate( root )
            return
    }
}

func Prelude_when( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_doneCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Qstn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    ChoiceCreate( root, x1, x2 )
    return
}

func Prelude_anyOf( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldr1Create( root, Prelude_QstnCreate( new( Node ) ) )
    return
}

func Prelude_unknown( task *Task )(  ){
    root := task.GetControl(  )
    x1 := FreeCreate( new( Node ) )
    RedirectCreate( root, x1 )
    return
}

func Prelude_PEVAL( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_normalForm( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolExclExclCreate( root, Prelude_idCreate( new( Node ) ), x1 )
    return
}

func Prelude_groundNormalForm( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_idCreate( new( Node ) ), x1 )
    return
}

func Prelude_apply( task *Task )(  ){
    ExternalPrelude_apply( task )
    return
}

func Prelude_cond( task *Task )(  ){
    ExternalPrelude_cond( task )
    return
}

func Prelude_letrec( task *Task )(  ){
    ExternalPrelude_letrec( task )
    return
}

func Prelude_EqColLtEq( task *Task )(  ){
    ExternalPrelude_EqColLtEq( task )
    return
}

func Prelude_EqColLtLtEq( task *Task )(  ){
    ExternalPrelude_EqColLtLtEq( task )
    return
}

func Prelude_ifVar( task *Task )(  ){
    ExternalPrelude_ifVar( task )
    return
}

func Prelude_failure( task *Task )(  ){
    ExternalPrelude_failure( task )
    return
}

func Prelude_showListSQuote( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 91 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 93 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x3 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 91 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x4 ), Prelude_showListSQuote_showl_433Create( new( Node ), x3, x1, x5 ) ) )
            return
    }
}

func Prelude_showListSQuote_showl_433( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 93 ), x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 44 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x2, x4 ), Prelude_showListSQuote_showl_433Create( new( Node ), x1, x2, x5 ) ) )
            return
    }
}

func Prelude_shows( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) )
    return
}

func Prelude_showChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ColCreate( root, x1, x2 )
    return
}

func Prelude_showString( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_showCharCreate( new( Node ) ), x2, x1 )
    return
}

func Prelude_showParen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__Create( root, Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 40 ) ), Prelude__Create( new( Node ), x2, Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 41 ) ) ) )
            return
    }
}

func Prelude_showSigned( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_showSigned_COMPLEXCASE0Create( root, x3, x2, x1, x4, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), x1 ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude_showSigned_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_showSigned_COMPLEXCASE1Create( root, x2, x4, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x3 ), IntLitCreate( new( Node ), 6 ) ), Prelude__Create( new( Node ), Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 45 ) ), Prelude_applyCreate( new( Node ), x2, Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), x4 ) ) ) )
            return
    }
}

func Prelude_showSigned_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, x2, x4 )
            return
    }
}

func Prelude_showTuple( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 40 ) ), Prelude__Create( new( Node ), Prelude_foldr1Create( new( Node ), Prelude_showTuple__Hashlambda297Create( new( Node ) ), x1 ), Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 41 ) ) ) )
    return
}

func Prelude_showTuple__Hashlambda297( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, x1, Prelude__Create( new( Node ), Prelude_showCharCreate( new( Node ), CharLitCreate( new( Node ), 44 ) ), x2 ) )
    return
}

func Prelude_appPrec( task *Task )(  ){
    root := task.GetControl(  )
    IntLitCreate( root, 10 )
    return
}

func Prelude_appPrec1( task *Task )(  ){
    root := task.GetControl(  )
    IntLitCreate( root, 11 )
    return
}

func Prelude_readListDefault( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude_readListDefault__Hashlambda326Create( new( Node ), x1 ) )
    return
}

func Prelude_readListDefault_readlSQuote_456( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_456__Hashlambda312Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ), Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_456__Hashlambda316Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ) )
    return
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_456__Hashlambda312_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 93 ) ) )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda312_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_456__Hashlambda316_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320__Hashlambda324Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readListDefault_readlSQuote_456Create( new( Node ), x1, x5 ) ), x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_456__Hashlambda316__Hashlambda320__Hashlambda324( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_readListDefault_readl_456( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_456__Hashlambda300Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ), Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_456__Hashlambda304Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude_readListDefault_readl_456__Hashlambda300( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_readListDefault_readl_456__Hashlambda300_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readl_456__Hashlambda300_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readListDefault_readl_456__Hashlambda300_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 93 ) ) )
            return
    }
}

func Prelude_readListDefault_readl_456__Hashlambda300_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_readListDefault_readl_456__Hashlambda300_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readl_456__Hashlambda300_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readListDefault_readl_456__Hashlambda304( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_456__Hashlambda304__Hashlambda308Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readListDefault_readlSQuote_456Create( new( Node ), x1, x5 ) ), x3 )
            return
    }
}

func Prelude_readListDefault_readl_456__Hashlambda304__Hashlambda308( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda326( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readListDefault__Hashlambda326__Hashlambda329Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readListDefault__Hashlambda326__Hashlambda329_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 91 ) ) )
            return
    }
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_mapCreate( new( Node ), Prelude_readListDefault__Hashlambda326__Hashlambda329__Hashlambda331Create( new( Node ) ), Prelude_readListDefault_readl_456Create( new( Node ), x1, x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda326__Hashlambda329__Hashlambda331( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_reads( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) )
    return
}

func Prelude_readParen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_readParen_optional_474Create( root, x2 )
            return
        case 1:
            Prelude_readParen_mandatory_474Create( root, x2 )
            return
    }
}

func Prelude_readParen_optional_474( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), x1, x2 ), Prelude_readParen_mandatory_474Create( new( Node ), x1, x2 ) )
    return
}

func Prelude_readParen_mandatory_474( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readParen_mandatory_474__Hashlambda334Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readParen_mandatory_474__Hashlambda334( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readParen_mandatory_474__Hashlambda334_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readParen_mandatory_474__Hashlambda334_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readParen_mandatory_474__Hashlambda334_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readParen_optional_474Create( new( Node ), x1, x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_474__Hashlambda334__Hashlambda338__Hashlambda342_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x1, x5 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_read( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_read_COMPLEXCASE0Create( root, Prelude_foldrCreate( new( Node ), Prelude_read__Hashlambda346Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude_read_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    x7 = root.Children[ 0 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x7.Children[ 0 ]
            x4 = x7.Children[ 1 ]
            Prelude_read_CASE1Create( root, x4, x3 )
            return
    }
}

func Prelude_read_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude_read__Hashlambda346( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_read__Hashlambda346__Hashlambda350Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_read__Hashlambda346__Hashlambda350( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_read__Hashlambda346__Hashlambda350_CASE0Create( root, x4, x5, x1, x3 )
            return
    }
}

func Prelude_read__Hashlambda346__Hashlambda350_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x1 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_read__Hashlambda346__Hashlambda350_CASE1Create( root, x5, x1, x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_read__Hashlambda346__Hashlambda350_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, x1, x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readSigned( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude_readSigned_readSQuote_494Create( new( Node ), x1, x2 ) )
    return
}

func Prelude_readSigned_readSQuoteSQuote_494( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367Create( new( Node ), x5 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), x1, x4 ) ), x3 )
            return
    }
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude_readSigned_readSQuoteSQuote_494__Hashlambda363__Hashlambda367_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readSigned_readSQuote_494( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AddAddCreate( root, Prelude_readSigned_readSQuoteSQuote_494Create( new( Node ), x2, x3 ), Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuote_494__Hashlambda355Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x3 ) ) )
    return
}

func Prelude_readSigned_readSQuote_494__Hashlambda355( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readSigned_readSQuote_494__Hashlambda355_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_readSigned_readSQuote_494__Hashlambda355_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 45 ) ) )
            return
    }
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude_readSigned_readSQuote_494__Hashlambda355_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_494__Hashlambda355_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuote_494__Hashlambda355__Hashlambda359Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readSigned_readSQuoteSQuote_494Create( new( Node ), x2, x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_494__Hashlambda355__Hashlambda359( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), x4 ), x5 ), x3 )
            return
    }
}

func Prelude_readNatLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readNatLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readNatLiteral( task *Task )(  ){
    ExternalPrelude_prim_readNatLiteral( task )
    return
}

func Prelude_readFloatLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readFloatLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readFloatLiteral( task *Task )(  ){
    ExternalPrelude_prim_readFloatLiteral( task )
    return
}

func Prelude_readCharLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readCharLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readCharLiteral( task *Task )(  ){
    ExternalPrelude_prim_readCharLiteral( task )
    return
}

func Prelude_readStringLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readStringLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readStringLiteral( task *Task )(  ){
    ExternalPrelude_prim_readStringLiteral( task )
    return
}

func Prelude_lex( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_COMPLEXCASE0Create( root, x1, x3, Prelude_isSpaceCreate( new( Node ), x2 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_CASE1Create( root, x1 )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_lexCreate( new( Node ) ), Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x3 ) )
            return
    }
}

func Prelude_lex_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x1.Children[ 0 ]
            x5 = x1.Children[ 1 ]
            Prelude_lex_COMPLEXCASE2Create( root, x4, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE3Create( root, x4, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 34 ) ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda412Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexLitCharCreate( new( Node ), x5 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE4Create( root, x4, x5, Prelude_lex_isSingle_512Create( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda416Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexString_512Create( new( Node ), x5 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE5Create( root, x4, x5, Prelude_lex_isSym_512Create( new( Node ), x4 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x4, Prelude_LSbRSbCreate( new( Node ) ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE6Create( root, x4, x5, Prelude_isAlphaCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda420Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_lex_isSym_512Create( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE7Create( root, x4, x5, Prelude_isDigitCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda424Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_lex_isIdChar_512Create( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE8Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda428Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_lex_isSingle_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 44 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 59 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 91 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 93 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 123 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 125 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 95 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_lex_isSym_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 33 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 64 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 35 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 36 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 37 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 8902 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 47 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 60 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 63 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 94 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 124 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 45 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 126 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_lex_isIdChar_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isAlphaNumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 95 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
    return
}

func Prelude_lex_lexExp_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexExp_512_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
            return
    }
}

func Prelude_lex_lexExp_512_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexExp_512__Hashlambda382Create( new( Node ), x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x3, Prelude_LSbRSbCreate( new( Node ) ) ) ), Prelude_foldrCreate( new( Node ), Prelude_lex_lexExp_512__Hashlambda390Create( new( Node ), x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_lexDigitsCreate( new( Node ) ), x3 ) ) )
            return
    }
}

func Prelude_lex_lexExp_512__Hashlambda382( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_lex_lexExp_512__Hashlambda382_COMPLEXCASE0Create( new( Node ), x4, x1, x5, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x4 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 45 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ), x3 )
            return
    }
}

func Prelude_lex_lexExp_512__Hashlambda382_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexExp_512__Hashlambda382__Hashlambda386Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_lexDigitsCreate( new( Node ) ), x5 ) )
            return
    }
}

func Prelude_lex_lexExp_512__Hashlambda382__Hashlambda386( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_ColCreate( new( Node ), x1, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lex_lexExp_512__Hashlambda390( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex_lexFracExp_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_512Create( root, x1 )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexFracExp_512_COMPLEXCASE0Create( root, x3, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 46 ) ) )
            return
    }
}

func Prelude_lex_lexFracExp_512_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_512Create( root, x1 )
            return
        case 1:
            Prelude_lex_lexFracExp_512_CASE1Create( root, x3, x1 )
            return
    }
}

func Prelude_lex_lexFracExp_512_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_512Create( root, x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lex_lexFracExp_512_COMPLEXCASE2Create( root, x1, x4, x5, Prelude_isDigitCreate( new( Node ), x4 ) )
            return
    }
}

func Prelude_lex_lexFracExp_512_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_512Create( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexFracExp_512__Hashlambda372Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_lexDigitsCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x4, x5 ) ) )
            return
    }
}

func Prelude_lex_lexFracExp_512__Hashlambda372( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexFracExp_512__Hashlambda372__Hashlambda376Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexExp_512Create( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_lex_lexFracExp_512__Hashlambda372__Hashlambda376( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_AddAddCreate( new( Node ), x1, x4 ) ), x5 ), x3 )
            return
    }
}

func Prelude_lex_lexStrItem_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexLitCharCreate( root, x1 )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexStrItem_512_COMPLEXCASE0Create( root, x3, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitCharCreate( root, x1 )
            return
        case 1:
            Prelude_lex_lexStrItem_512_CASE1Create( root, x3, x1 )
            return
    }
}

func Prelude_lex_lexStrItem_512_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexLitCharCreate( root, x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lex_lexStrItem_512_COMPLEXCASE2Create( root, x4, x1, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 38 ) ) )
            return
    }
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexStrItem_512_COMPLEXCASE3Create( root, x1, x5, Prelude_isSpaceCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_lexStrItem_512_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitCharCreate( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexStrItem_512__Hashlambda405Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_lexStrItem_512__Hashlambda405( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex_lexStrItem_512__Hashlambda405_COMPLEXCASE0Create( root, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x3, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lex_lexStrItem_512__Hashlambda405_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x4 ), x2 )
            return
    }
}

func Prelude_lex_lexString_512( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_foldrCreate( root, Prelude_lex_lexString_512__Hashlambda396Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexStrItem_512Create( new( Node ), x1 ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexString_512_COMPLEXCASE0Create( root, x1, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 34 ) ) )
            return
    }
}

func Prelude_lex_lexString_512_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_foldrCreate( root, Prelude_lex_lexString_512__Hashlambda396Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexStrItem_512Create( new( Node ), x1 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_lexString_512__Hashlambda396( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexString_512__Hashlambda396__Hashlambda400Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexString_512Create( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_lex_lexString_512__Hashlambda396__Hashlambda400( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_AddAddCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda412( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex__Hashlambda412_CASE0Create( root, x4, x3, x2 )
            return
    }
}

func Prelude_lex__Hashlambda412_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x2 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lex__Hashlambda412_COMPLEXCASE1Create( root, x3, x6, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex__Hashlambda412_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_lex__Hashlambda412_COMPLEXCASE2Create( new( Node ), x3, x6, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x3 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda412_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_AddAddCreate( new( Node ), x3, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex__Hashlambda416( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda420( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda424( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda428( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex__Hashlambda428__Hashlambda432Create( new( Node ), x1, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexFracExp_512Create( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda428__Hashlambda432( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, Prelude_AddAddCreate( new( Node ), x2, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lex__Hashlambda436( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex__Hashlambda436_CASE0Create( root, x4, x3, x2 )
            return
    }
}

func Prelude_lex__Hashlambda436_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x2 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lex__Hashlambda436_COMPLEXCASE1Create( root, x3, x6, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex__Hashlambda436_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_lex__Hashlambda436_COMPLEXCASE2Create( new( Node ), x3, x6, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x3 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda436_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_AddAddCreate( new( Node ), x3, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex__Hashlambda440( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda444( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda448( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda452( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex__Hashlambda452__Hashlambda456Create( new( Node ), x1, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexFracExp_512Create( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda452__Hashlambda456( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, Prelude_AddAddCreate( new( Node ), x2, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lexLitChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lexLitChar_COMPLEXCASE0Create( root, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lexLitChar_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            Prelude_mapCreate( root, Prelude_lexLitChar_prefix_574Create( new( Node ), CharLitCreate( new( Node ), 92 ) ), Prelude_lexLitChar_lexEsc_574Create( new( Node ), x3 ) )
            return
    }
}

func Prelude_lexLitChar_isCharName_574( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isUpperCreate( new( Node ), x1 ), Prelude_isDigitCreate( new( Node ), x1 ) )
    return
}

func Prelude_lexLitChar_prefix_574( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x1, x3 ), x4 )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 118 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x21 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_LET1Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x4 = x1
    Prelude_lexLitChar_lexEsc_574_CASE2Create( root, x4, x1 )
    return
}

func Prelude_lexLitChar_lexEsc_574_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE3Create( root, x6, x5, x4, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 94 ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x21 *Node
    x6 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE4Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 98 ) ) )
            return
        case 1:
            Prelude_lexLitChar_lexEsc_574_CASE11Create( root, x6, x5, x4, x1 )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_CASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x5 *Node
    var x4 *Node
    var x1 *Node
    x6 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE12Create( root, x1, x4, Prelude_isDigitCreate( new( Node ), x5 ) )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE16Create( root, x1, x7, x8, Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x7 ), CharLitCreate( new( Node ), 64 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 95 ) ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE16( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x7 *Node
    var x8 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x7 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_LET17Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 94 ), Prelude_ColCreate( new( Node ), x7, Prelude_LSbRSbCreate( new( Node ) ) ) ), x8 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_LET17( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x9 = x1
    Prelude_lexLitChar_lexEsc_574_CASE18Create( root, x1, x9 )
    return
}

func Prelude_lexLitChar_lexEsc_574_CASE18( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x9 = root.Children[ 1 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x9.Children[ 0 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE19Create( root, x1, x9, Prelude_isDigitCreate( new( Node ), x10 ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE19( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x9 = root.Children[ 1 ]
    x15 = root.Children[ 2 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_LET20Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x9 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_LET20( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x12 *Node
    x1 = root.Children[ 0 ]
    x12 = x1
    Prelude_lexLitChar_lexEsc_574_CASE21Create( root, x12 )
    return
}

func Prelude_lexLitChar_lexEsc_574_CASE21( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    x12 = root.Children[ 0 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x13 *Node
            x13 = x12.Children[ 0 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE22Create( root, x12, Prelude_isUpperCreate( new( Node ), x13 ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE22( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x14 *Node
    x12 = root.Children[ 0 ]
    x14 = root.Children[ 1 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexLitChar_isCharName_574Create( new( Node ) ), x12 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x18 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x18 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_LET13Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x4 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_LET13( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x15 = x1
    Prelude_lexLitChar_lexEsc_574_CASE14Create( root, x15 )
    return
}

func Prelude_lexLitChar_lexEsc_574_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    x15 = root.Children[ 0 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x16 *Node
            x16 = x15.Children[ 0 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE15Create( root, x15, Prelude_isUpperCreate( new( Node ), x16 ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE15( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x17 *Node
    x15 = root.Children[ 0 ]
    x17 = root.Children[ 1 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexLitChar_isCharName_574Create( new( Node ) ), x15 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE5Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 111 ) ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexLitChar_prefix_574Create( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_spanCreate( new( Node ), Prelude_isBinDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE6Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 120 ) ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexLitChar_prefix_574Create( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_spanCreate( new( Node ), Prelude_isOctDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE7Create( root, x1, x4, Prelude_isDigitCreate( new( Node ), x5 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexLitChar_prefix_574Create( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_spanCreate( new( Node ), Prelude_isHexDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x21 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x21 = root.Children[ 2 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexLitChar_lexEsc_574_LET8Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x4 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_LET8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x18 *Node
    x1 = root.Children[ 0 ]
    x18 = x1
    Prelude_lexLitChar_lexEsc_574_CASE9Create( root, x18 )
    return
}

func Prelude_lexLitChar_lexEsc_574_CASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    x18 = root.Children[ 0 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x19 *Node
            x19 = x18.Children[ 0 ]
            Prelude_lexLitChar_lexEsc_574_COMPLEXCASE10Create( root, x18, Prelude_isUpperCreate( new( Node ), x19 ) )
            return
    }
}

func Prelude_lexLitChar_lexEsc_574_COMPLEXCASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x20 *Node
    x18 = root.Children[ 0 ]
    x20 = root.Children[ 1 ]
    switch x20.GetConstructor(  ){
        case -1:
            RedirectCreate( x20, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexLitChar_isCharName_574Create( new( Node ) ), x18 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexDigits( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_nonNullCreate( root, Prelude_isDigitCreate( new( Node ) ) )
    return
}

func Prelude_nonNull( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_nonNull__Hashlambda477Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_nonNull__Hashlambda477( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_nonNull__Hashlambda477_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_nonNull__Hashlambda477_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x3, x4 ), x2 )
            return
    }
}

func Prelude_isUpper( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 65 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 90 ) ) )
    return
}

func Prelude_isLower( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 97 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 122 ) ) )
    return
}

func Prelude_isAlpha( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isUpperCreate( new( Node ), x1 ), Prelude_isLowerCreate( new( Node ), x1 ) )
    return
}

func Prelude_isDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 57 ) ) )
    return
}

func Prelude_isAlphaNum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isAlphaCreate( new( Node ), x1 ), Prelude_isDigitCreate( new( Node ), x1 ) )
    return
}

func Prelude_isBinDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 49 ) ) )
    return
}

func Prelude_isOctDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 55 ) ) )
    return
}

func Prelude_isHexDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isDigitCreate( new( Node ), x1 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 65 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 70 ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 97 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 102 ) ) ) ) )
    return
}

func Prelude_isSpace( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 32 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 9 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 10 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 13 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 12 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 11 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 160 ) ), Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude_ordCreate( new( Node ), x1 ) ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 5760 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 6158 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8192 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8239 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8287 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 12288 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_uppermostCharacter( task *Task )(  ){
    root := task.GetControl(  )
    IntLitCreate( root, 1114111 )
    return
}

func Prelude_boundedEnumFrom( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), x3 ) ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_asTypeOfCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) ), x3 ) ) ) )
    return
}

func Prelude_boundedEnumFromThen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), x3 )
    x6 = Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), x4 )
    Prelude_boundedEnumFromThen_COMPLEXCASE0Create( root, x5, x6, x2, x1, x3, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x6 ), x5 ) )
    return
}

func Prelude_boundedEnumFromThen_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x6 *Node
    var x2 *Node
    var x1 *Node
    var x3 *Node
    var x7 *Node
    x5 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x3 = root.Children[ 4 ]
    x7 = root.Children[ 5 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_boundedEnumFromThen_COMPLEXCASE1Create( root, x5, x6, x2, x1, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), x5 ), x6 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_asTypeOfCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) ), x3 ) ) ) )
            return
    }
}

func Prelude_boundedEnumFromThen_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x6 *Node
    var x2 *Node
    var x1 *Node
    var x3 *Node
    var x7 *Node
    x5 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x3 = root.Children[ 4 ]
    x7 = root.Children[ 5 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), x5 ), x6 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_asTypeOfCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) ), x3 ) ) ) )
            return
    }
}

func Prelude_asTypeOf( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_constCreate( root )
    return
}

func Prelude_Add_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Float_plusCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Float_plus( task *Task )(  ){
    ExternalPrelude_prim_Float_plus( task )
    return
}

func Prelude_Sub_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Float_minusCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Float_minus( task *Task )(  ){
    ExternalPrelude_prim_Float_minus( task )
    return
}

func Prelude_Mul_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Float_timesCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Float_times( task *Task )(  ){
    ExternalPrelude_prim_Float_times( task )
    return
}

func Prelude_Slash_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_Float_divCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_Float_div( task *Task )(  ){
    ExternalPrelude_prim_Float_div( task )
    return
}

func Prelude_i2f( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_i2fCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_i2f( task *Task )(  ){
    ExternalPrelude_prim_i2f( task )
    return
}

func Prelude_sequence( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_sequence__Hashlambda479Create( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_returnCreate( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_sequence__Hashlambda479( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_sequence__Hashlambda479__Hashlambda480Create( new( Node ), x1, x3 ) )
    return
}

func Prelude_sequence__Hashlambda479__Hashlambda480( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_sequence__Hashlambda479__Hashlambda480__Hashlambda481Create( new( Node ), x3, x1 ) )
    return
}

func Prelude_sequence__Hashlambda479__Hashlambda480__Hashlambda481( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x2 ), Prelude_ColCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_sequence_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_GtGtCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_returnCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) )
    return
}

func Prelude_mapM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_sequenceCreate( new( Node ), x1 ), Prelude_mapCreate( new( Node ), x2 ) )
    return
}

func Prelude_mapM_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_sequence_Create( new( Node ), x1 ), Prelude_mapCreate( new( Node ), x2 ) )
    return
}

func Prelude_foldM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x1 ), x3 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x2, x3 ), x5 ) ), Prelude_foldM__Hashlambda482Create( new( Node ), x6, x1, x2 ) )
            return
    }
}

func Prelude_foldM__Hashlambda482( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_foldMCreate( root, x2, x3, x4, x1 )
    return
}

func Prelude_liftM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x3 ), Prelude__Create( new( Node ), Prelude_returnCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_liftM2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x3 ), Prelude_liftM2__Hashlambda485Create( new( Node ), x1, x4, x2 ) )
    return
}

func Prelude_liftM2__Hashlambda485( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = x4
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_liftM2__Hashlambda485__Hashlambda487Create( new( Node ), x5, x1, x3 ) )
    return
}

func Prelude_liftM2__Hashlambda485__Hashlambda487( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = x4
    Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x3, x1 ), x5 ) )
    return
}

func Prelude_forM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_mapMCreate( new( Node ), x1, x3 ), x2 )
    return
}

func Prelude_forM_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_mapM_Create( new( Node ), x1, x3 ), x2 )
    return
}

func Prelude_unlessM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) )
            return
    }
}

func Prelude_whenM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_EqEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEqCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_SlashEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEqCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__superHashPrelude_OrdHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_compare( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_LtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_GtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_Lt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_Gt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_min( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_max( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_showsPrec( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_showList( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_readsPrec( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashReadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readList( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashReadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_minBound( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashBoundedCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_maxBound( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashBoundedCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_succ( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_pred( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_toEnum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fromEnum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_enumFrom( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_enumFromThen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_enumFromTo( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_enumFromThenTo( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_Add( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Sub( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_Mul( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_negate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_abs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_signum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_fromInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude__superHashPrelude_FractionalHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Slash( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_recip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fromFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__superHashPrelude_RealHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__superHashPrelude_RealHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__superHashPrelude_IntegralHashPrelude_Real( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_div( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_mod( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_quot( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_rem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_divMod( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_quotRem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_fmap( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFunctorCreate( new( Node ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_GtGtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_GtGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_return( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fail( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

