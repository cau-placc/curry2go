package gocurry

func Prelude_LbRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "()", args... )
    return( root )
}

func Prelude_LbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "(,)", args... )
    return( root )
}

func Prelude_LbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "(,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "(,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 5, "(,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 6, "(,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "(,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "(,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 9, "(,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 10, "(,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 11, "(,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 12, "(,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 13, "(,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 14, "(,,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_LbCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 15, "(,,,,,,,,,,,,,,)", args... )
    return( root )
}

func Prelude_FalseCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "False", args... )
    return( root )
}

func Prelude_TrueCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 0, "True", args... )
    return( root )
}

func Prelude_LeftCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 1, "Left", args... )
    return( root )
}

func Prelude_RightCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "Right", args... )
    return( root )
}

func Prelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 1, "IOError", args... )
    return( root )
}

func Prelude_UserErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "UserError", args... )
    return( root )
}

func Prelude_FailErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 2, 1, "FailError", args... )
    return( root )
}

func Prelude_NondetErrorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 3, 1, "NondetError", args... )
    return( root )
}

func Prelude_NothingCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "Nothing", args... )
    return( root )
}

func Prelude_JustCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 1, "Just", args... )
    return( root )
}

func Prelude_LTCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "LT", args... )
    return( root )
}

func Prelude_EQCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 0, "EQ", args... )
    return( root )
}

func Prelude_GTCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 2, 0, "GT", args... )
    return( root )
}

func Prelude_LSbRSbCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 0, "[]", args... )
    return( root )
}

func Prelude_ColCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 1, 2, ":", args... )
    return( root )
}

func Prelude__DictHashAlternativeCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 5, "_Dict#Alternative", args... )
    return( root )
}

func Prelude__DictHashApplicativeCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 6, "_Dict#Applicative", args... )
    return( root )
}

func Prelude__DictHashBoundedCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Bounded", args... )
    return( root )
}

func Prelude__DictHashDataCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Data", args... )
    return( root )
}

func Prelude__DictHashEnumCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "_Dict#Enum", args... )
    return( root )
}

func Prelude__DictHashEqCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Eq", args... )
    return( root )
}

func Prelude__DictHashFloatingCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 19, "_Dict#Floating", args... )
    return( root )
}

func Prelude__DictHashFractionalCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "_Dict#Fractional", args... )
    return( root )
}

func Prelude__DictHashFunctorCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Functor", args... )
    return( root )
}

func Prelude__DictHashIntegralCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 9, "_Dict#Integral", args... )
    return( root )
}

func Prelude__DictHashMonadCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 4, "_Dict#Monad", args... )
    return( root )
}

func Prelude__DictHashMonadFailCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#MonadFail", args... )
    return( root )
}

func Prelude__DictHashMonoidCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "_Dict#Monoid", args... )
    return( root )
}

func Prelude__DictHashNumCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "_Dict#Num", args... )
    return( root )
}

func Prelude__DictHashOrdCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 8, "_Dict#Ord", args... )
    return( root )
}

func Prelude__DictHashReadCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 2, "_Dict#Read", args... )
    return( root )
}

func Prelude__DictHashRealCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "_Dict#Real", args... )
    return( root )
}

func Prelude__DictHashRealFracCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 7, "_Dict#RealFrac", args... )
    return( root )
}

func Prelude__DictHashShowCreate( root *Node, args ...*Node )( *Node ){
    ConstCreate( root, 0, 3, "_Dict#Show", args... )
    return( root )
}

func Prelude__defHashEqEqEqHashPrelude_DataCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashEqEqEqHashPrelude_Data, "Prelude__defHashEqEqEqHashPrelude_Data", 1, -1, args... )
    return( root )
}

func Prelude__defHashaValueHashPrelude_DataCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashaValueHashPrelude_Data, "Prelude__defHashaValueHashPrelude_Data", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Char, "Prelude__instHashPrelude_DataHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Char, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Char, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Char", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Char_FREE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Char_FREE0, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Char_FREE0", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Int, "Prelude__instHashPrelude_DataHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Int, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Int, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Int", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Int_FREE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Int_FREE0, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Int_FREE0", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Float, "Prelude__instHashPrelude_DataHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Float, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Float, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Float", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Float_FREE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Float_FREE0, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Float_FREE0", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLSbRSb, "Prelude__instHashPrelude_DataHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb, "Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE1", 4, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLSbRSb, "Prelude__implHashaValueHashPrelude_DataHashLSbRSb", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbRb, "Prelude__instHashPrelude_DataHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbRb, "Prelude__implHashaValueHashPrelude_DataHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaRb, "Prelude__instHashPrelude_DataHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaCommaRb, "Prelude__instHashPrelude_DataHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_DataHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb, "Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb", 6, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb", 8, 6, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb_CASE0", 13, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb", 7, 6, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb", 7, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb", 9, 7, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb_CASE0", 15, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb, "Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb", 8, 7, args... )
    return( root )
}

func Prelude__defHashEqEqHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashEqEqHashPrelude_Eq, "Prelude__defHashEqEqHashPrelude_Eq", 3, -1, args... )
    return( root )
}

func Prelude__defHashSlashEqHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSlashEqHashPrelude_Eq, "Prelude__defHashSlashEqHashPrelude_Eq", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Char, "Prelude__instHashPrelude_EqHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Int, "Prelude__instHashPrelude_EqHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Float, "Prelude__instHashPrelude_EqHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbRb, "Prelude__instHashPrelude_EqHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRb, "Prelude__implHashEqEqHashPrelude_EqHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaRb, "Prelude__instHashPrelude_EqHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb, "Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashLSbRSb, "Prelude__instHashPrelude_EqHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1", 4, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb, "Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Bool, "Prelude__instHashPrelude_EqHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Ordering, "Prelude__instHashPrelude_EqHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord, "Prelude__defHashcompareHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2, "Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__defHashLtHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtHashPrelude_Ord, "Prelude__defHashLtHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtHashPrelude_Ord, "Prelude__defHashGtHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashLtEqHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtEqHashPrelude_Ord, "Prelude__defHashLtEqHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtEqHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtEqHashPrelude_Ord, "Prelude__defHashGtEqHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord, "Prelude__defHashminHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord, "Prelude__defHashmaxHashPrelude_Ord", 3, -1, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0, "Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1, "Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Char, "Prelude__instHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Char, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Char, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Char, "Prelude__implHashminHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Int, "Prelude__instHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Int, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Int, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Int, "Prelude__implHashminHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Float, "Prelude__instHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Float, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Float, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Float, "Prelude__implHashminHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbRb, "Prelude__instHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbRb, "Prelude__implHashcompareHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbRb, "Prelude__implHashLtHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbRb, "Prelude__implHashGtHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbRb, "Prelude__implHashminHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbRb, "Prelude__implHashmaxHashPrelude_OrdHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb, "Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashLSbRSb, "Prelude__instHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashLSbRSb, "Prelude__implHashcompareHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashLSbRSb, "Prelude__implHashLtHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashLSbRSb, "Prelude__implHashGtHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb", 3, 1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1", 4, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2", 6, 5, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb, "Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashLSbRSb, "Prelude__implHashminHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashLSbRSb, "Prelude__implHashmaxHashPrelude_OrdHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Bool, "Prelude__instHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashminHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Ordering, "Prelude__instHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashshowHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowHashPrelude_Show, "Prelude__defHashshowHashPrelude_Show", 2, -1, args... )
    return( root )
}

func Prelude__defHashshowsPrecHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowsPrecHashPrelude_Show, "Prelude__defHashshowsPrecHashPrelude_Show", 4, -1, args... )
    return( root )
}

func Prelude__defHashshowListHashPrelude_ShowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashshowListHashPrelude_Show, "Prelude__defHashshowListHashPrelude_Show", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Char, "Prelude__instHashPrelude_ShowHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Int, "Prelude__instHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Float, "Prelude__instHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbRb, "Prelude__instHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbRb, "Prelude__implHashshowHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbRb, "Prelude__implHashshowListHashPrelude_ShowHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 7, 6, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb, "Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashLSbRSb, "Prelude__instHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashLSbRSb, "Prelude__implHashshowListHashPrelude_ShowHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Bool, "Prelude__instHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Ordering, "Prelude__instHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering", 2, 1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashreadsPrecHashPrelude_ReadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreadsPrecHashPrelude_Read, "Prelude__defHashreadsPrecHashPrelude_Read", 1, -1, args... )
    return( root )
}

func Prelude__defHashreadListHashPrelude_ReadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreadListHashPrelude_Read, "Prelude__defHashreadListHashPrelude_Read", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Char, "Prelude__instHashPrelude_ReadHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE0, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE1, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17_CASE0, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Int, "Prelude__instHashPrelude_ReadHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Float, "Prelude__instHashPrelude_ReadHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062__Hashlambda30Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062__Hashlambda30, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062__Hashlambda30", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbRb, "Prelude__instHashPrelude_ReadHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbRb, "Prelude__implHashreadListHashPrelude_ReadHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2", 5, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94", 4, 2, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1", 7, 6, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2", 6, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131", 5, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1", 8, 7, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2", 7, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 6, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137", 6, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176", 6, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180", 7, 5, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1", 9, 8, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2", 8, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb, "Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashLSbRSb, "Prelude__instHashPrelude_ReadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb, "Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashLSbRSb, "Prelude__implHashreadListHashPrelude_ReadHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Bool, "Prelude__instHashPrelude_ReadHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Ordering, "Prelude__instHashPrelude_ReadHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashminBoundHashPrelude_BoundedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashminBoundHashPrelude_Bounded, "Prelude__defHashminBoundHashPrelude_Bounded", 2, 1, args... )
    return( root )
}

func Prelude__defHashmaxBoundHashPrelude_BoundedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmaxBoundHashPrelude_Bounded, "Prelude__defHashmaxBoundHashPrelude_Bounded", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Char, "Prelude__instHashPrelude_BoundedHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbRb, "Prelude__instHashPrelude_BoundedHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb, "Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Bool, "Prelude__instHashPrelude_BoundedHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_BoundedHashPrelude_Ordering, "Prelude__instHashPrelude_BoundedHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering, "Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering, "Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__defHashsuccHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsuccHashPrelude_Enum, "Prelude__defHashsuccHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashpredHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpredHashPrelude_Enum, "Prelude__defHashpredHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashpredHashPrelude_Enum__Hashlambda207Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpredHashPrelude_Enum__Hashlambda207, "Prelude__defHashpredHashPrelude_Enum__Hashlambda207", 1, -1, args... )
    return( root )
}

func Prelude__defHashtoEnumHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtoEnumHashPrelude_Enum, "Prelude__defHashtoEnumHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashfromEnumHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromEnumHashPrelude_Enum, "Prelude__defHashfromEnumHashPrelude_Enum", 1, -1, args... )
    return( root )
}

func Prelude__defHashenumFromHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromHashPrelude_Enum, "Prelude__defHashenumFromHashPrelude_Enum", 2, -1, args... )
    return( root )
}

func Prelude__defHashenumFromThenHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromThenHashPrelude_Enum, "Prelude__defHashenumFromThenHashPrelude_Enum", 3, -1, args... )
    return( root )
}

func Prelude__defHashenumFromToHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromToHashPrelude_Enum, "Prelude__defHashenumFromToHashPrelude_Enum", 3, -1, args... )
    return( root )
}

func Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashenumFromThenToHashPrelude_Enum, "Prelude__defHashenumFromThenToHashPrelude_Enum", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Char, "Prelude__instHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Char, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char", 2, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Int, "Prelude__instHashPrelude_EnumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Int, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE0, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE1, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int", 3, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219", 4, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE0, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE1, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashLbRb, "Prelude__instHashPrelude_EnumHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashLbRb, "Prelude__implHashsuccHashPrelude_EnumHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashLbRb, "Prelude__implHashpredHashPrelude_EnumHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashLbRb, "Prelude__implHashtoEnumHashPrelude_EnumHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashLbRb, "Prelude__implHashfromEnumHashPrelude_EnumHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromHashPrelude_EnumHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1, "Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromToHashPrelude_EnumHashLbRb", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb", 3, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0", 2, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2, "Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Bool, "Prelude__instHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool", 2, -1, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EnumHashPrelude_Ordering, "Prelude__instHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering", 1, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering", 2, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0, "Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering, "Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashAddHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashAddHashPrelude_Num, "Prelude__defHashAddHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashSubHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSubHashPrelude_Num, "Prelude__defHashSubHashPrelude_Num", 3, -1, args... )
    return( root )
}

func Prelude__defHashMulHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashMulHashPrelude_Num, "Prelude__defHashMulHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashnegateHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashnegateHashPrelude_Num, "Prelude__defHashnegateHashPrelude_Num", 2, -1, args... )
    return( root )
}

func Prelude__defHashabsHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashabsHashPrelude_Num, "Prelude__defHashabsHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashsignumHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsignumHashPrelude_Num, "Prelude__defHashsignumHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__defHashfromIntHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromIntHashPrelude_Num, "Prelude__defHashfromIntHashPrelude_Num", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_NumHashPrelude_Int, "Prelude__instHashPrelude_NumHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_Int, "Prelude__implHashAddHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_Int, "Prelude__implHashSubHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulHashPrelude_NumHashPrelude_Int, "Prelude__implHashMulHashPrelude_NumHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashnegateHashPrelude_NumHashPrelude_Int, "Prelude__implHashnegateHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1, "Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int, "Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_NumHashPrelude_Float, "Prelude__instHashPrelude_NumHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_Float, "Prelude__implHashAddHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_Float, "Prelude__implHashSubHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulHashPrelude_NumHashPrelude_Float, "Prelude__implHashMulHashPrelude_NumHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashnegateHashPrelude_NumHashPrelude_Float, "Prelude__implHashnegateHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1, "Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2, "Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float, "Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashSlashHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashSlashHashPrelude_Fractional, "Prelude__defHashSlashHashPrelude_Fractional", 3, -1, args... )
    return( root )
}

func Prelude__defHashrecipHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashrecipHashPrelude_Fractional, "Prelude__defHashrecipHashPrelude_Fractional", 2, -1, args... )
    return( root )
}

func Prelude__defHashfromFloatHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfromFloatHashPrelude_Fractional, "Prelude__defHashfromFloatHashPrelude_Fractional", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FractionalHashPrelude_Float, "Prelude__instHashPrelude_FractionalHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashSlashHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashrecipHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float, "Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashtoFloatHashPrelude_RealCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtoFloatHashPrelude_Real, "Prelude__defHashtoFloatHashPrelude_Real", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_RealHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_RealHashPrelude_Int, "Prelude__instHashPrelude_RealHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashtoFloatHashPrelude_RealHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Int, "Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_RealHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_RealHashPrelude_Float, "Prelude__instHashPrelude_RealHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashtoFloatHashPrelude_RealHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Float, "Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashdivHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivHashPrelude_Integral, "Prelude__defHashdivHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashdivHashPrelude_Integral__HashselFP2HashqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq, "Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq", 1, 0, args... )
    return( root )
}

func Prelude__defHashmodHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmodHashPrelude_Integral, "Prelude__defHashmodHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashmodHashPrelude_Integral__HashselFP4HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr, "Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashquotHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotHashPrelude_Integral, "Prelude__defHashquotHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashquotHashPrelude_Integral__HashselFP6HashqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq, "Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq", 1, 0, args... )
    return( root )
}

func Prelude__defHashremHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashremHashPrelude_Integral, "Prelude__defHashremHashPrelude_Integral", 3, -1, args... )
    return( root )
}

func Prelude__defHashremHashPrelude_Integral__HashselFP8HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr, "Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashdivModHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashdivModHashPrelude_Integral, "Prelude__defHashdivModHashPrelude_Integral", 1, -1, args... )
    return( root )
}

func Prelude__defHashquotRemHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashquotRemHashPrelude_Integral, "Prelude__defHashquotRemHashPrelude_Integral", 1, -1, args... )
    return( root )
}

func Prelude__defHashtoIntHashPrelude_IntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtoIntHashPrelude_Integral, "Prelude__defHashtoIntHashPrelude_Integral", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_Int, "Prelude__instHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashdivHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashmodHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashquotHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashremHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashremHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashremHashPrelude_IntegralHashPrelude_Int", 0, -1, args... )
    return( root )
}

func Prelude__implHashdivModHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int", 2, -1, args... )
    return( root )
}

func Prelude__implHashtoIntHashPrelude_IntegralHashPrelude_IntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtoIntHashPrelude_IntegralHashPrelude_Int, "Prelude__implHashtoIntHashPrelude_IntegralHashPrelude_Int", 1, -1, args... )
    return( root )
}

func Prelude__defHashproperFractionHashPrelude_RealFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashproperFractionHashPrelude_RealFrac, "Prelude__defHashproperFractionHashPrelude_RealFrac", 2, -1, args... )
    return( root )
}

func Prelude__defHashtruncateHashPrelude_RealFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtruncateHashPrelude_RealFrac, "Prelude__defHashtruncateHashPrelude_RealFrac", 3, -1, args... )
    return( root )
}

func Prelude__defHashtruncateHashPrelude_RealFrac__HashselFP10HashmCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtruncateHashPrelude_RealFrac__HashselFP10Hashm, "Prelude__defHashtruncateHashPrelude_RealFrac__HashselFP10Hashm", 1, 0, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac, "Prelude__defHashroundHashPrelude_RealFrac", 3, -1, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE1, "Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE2, "Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE0, "Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFrac__HashselFP12HashnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac__HashselFP12Hashn, "Prelude__defHashroundHashPrelude_RealFrac__HashselFP12Hashn", 1, 0, args... )
    return( root )
}

func Prelude__defHashroundHashPrelude_RealFrac__HashselFP13HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashroundHashPrelude_RealFrac__HashselFP13Hashr, "Prelude__defHashroundHashPrelude_RealFrac__HashselFP13Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashceilingHashPrelude_RealFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashceilingHashPrelude_RealFrac, "Prelude__defHashceilingHashPrelude_RealFrac", 3, -1, args... )
    return( root )
}

func Prelude__defHashceilingHashPrelude_RealFrac_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashceilingHashPrelude_RealFrac_COMPLEXCASE0, "Prelude__defHashceilingHashPrelude_RealFrac_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashceilingHashPrelude_RealFrac__HashselFP15HashnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashceilingHashPrelude_RealFrac__HashselFP15Hashn, "Prelude__defHashceilingHashPrelude_RealFrac__HashselFP15Hashn", 1, 0, args... )
    return( root )
}

func Prelude__defHashceilingHashPrelude_RealFrac__HashselFP16HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashceilingHashPrelude_RealFrac__HashselFP16Hashr, "Prelude__defHashceilingHashPrelude_RealFrac__HashselFP16Hashr", 1, 0, args... )
    return( root )
}

func Prelude__defHashfloorHashPrelude_RealFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfloorHashPrelude_RealFrac, "Prelude__defHashfloorHashPrelude_RealFrac", 3, -1, args... )
    return( root )
}

func Prelude__defHashfloorHashPrelude_RealFrac_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfloorHashPrelude_RealFrac_COMPLEXCASE0, "Prelude__defHashfloorHashPrelude_RealFrac_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude__defHashfloorHashPrelude_RealFrac__HashselFP18HashnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfloorHashPrelude_RealFrac__HashselFP18Hashn, "Prelude__defHashfloorHashPrelude_RealFrac__HashselFP18Hashn", 1, 0, args... )
    return( root )
}

func Prelude__defHashfloorHashPrelude_RealFrac__HashselFP19HashrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfloorHashPrelude_RealFrac__HashselFP19Hashr, "Prelude__defHashfloorHashPrelude_RealFrac__HashselFP19Hashr", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_RealFracHashPrelude_Float, "Prelude__instHashPrelude_RealFracHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashproperFractionHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashproperFractionHashPrelude_RealFracHashPrelude_Float, "Prelude__implHashproperFractionHashPrelude_RealFracHashPrelude_Float", 2, -1, args... )
    return( root )
}

func Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_Float, "Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashroundHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashroundHashPrelude_RealFracHashPrelude_Float, "Prelude__implHashroundHashPrelude_RealFracHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashceilingHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashceilingHashPrelude_RealFracHashPrelude_Float, "Prelude__implHashceilingHashPrelude_RealFracHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__implHashfloorHashPrelude_RealFracHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfloorHashPrelude_RealFracHashPrelude_Float, "Prelude__implHashfloorHashPrelude_RealFracHashPrelude_Float", 1, -1, args... )
    return( root )
}

func Prelude__defHashpiHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpiHashPrelude_Floating, "Prelude__defHashpiHashPrelude_Floating", 2, 1, args... )
    return( root )
}

func Prelude__defHashexpHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashexpHashPrelude_Floating, "Prelude__defHashexpHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashlogHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashlogHashPrelude_Floating, "Prelude__defHashlogHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashsqrtHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsqrtHashPrelude_Floating, "Prelude__defHashsqrtHashPrelude_Floating", 2, -1, args... )
    return( root )
}

func Prelude__defHashMulMulHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashMulMulHashPrelude_Floating, "Prelude__defHashMulMulHashPrelude_Floating", 3, -1, args... )
    return( root )
}

func Prelude__defHashlogBaseHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashlogBaseHashPrelude_Floating, "Prelude__defHashlogBaseHashPrelude_Floating", 3, -1, args... )
    return( root )
}

func Prelude__defHashsinHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsinHashPrelude_Floating, "Prelude__defHashsinHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashcosHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcosHashPrelude_Floating, "Prelude__defHashcosHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashtanHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtanHashPrelude_Floating, "Prelude__defHashtanHashPrelude_Floating", 2, -1, args... )
    return( root )
}

func Prelude__defHashasinHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashasinHashPrelude_Floating, "Prelude__defHashasinHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashacosHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashacosHashPrelude_Floating, "Prelude__defHashacosHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashatanHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashatanHashPrelude_Floating, "Prelude__defHashatanHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashsinhHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsinhHashPrelude_Floating, "Prelude__defHashsinhHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashcoshHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashcoshHashPrelude_Floating, "Prelude__defHashcoshHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashtanhHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashtanhHashPrelude_Floating, "Prelude__defHashtanhHashPrelude_Floating", 2, -1, args... )
    return( root )
}

func Prelude__defHashasinhHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashasinhHashPrelude_Floating, "Prelude__defHashasinhHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashacoshHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashacoshHashPrelude_Floating, "Prelude__defHashacoshHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__defHashatanhHashPrelude_FloatingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashatanhHashPrelude_Floating, "Prelude__defHashatanhHashPrelude_Floating", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FloatingHashPrelude_Float, "Prelude__instHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashpiHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpiHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashpiHashPrelude_FloatingHashPrelude_Float", 1, 0, args... )
    return( root )
}

func Prelude__implHashexpHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashexpHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashexpHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashlogHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashlogHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashlogHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashsqrtHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsqrtHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashsqrtHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashMulMulHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulMulHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashMulMulHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashlogBaseHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashlogBaseHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashlogBaseHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashsinHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsinHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashsinHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashcosHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcosHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashcosHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashtanHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtanHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashtanHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashasinHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashasinHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashasinHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashacosHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashacosHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashacosHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashatanHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashatanHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashatanHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashsinhHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsinhHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashsinhHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashcoshHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcoshHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashcoshHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashtanhHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashtanhHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashtanhHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashasinhHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashasinhHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashasinhHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashacoshHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashacoshHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashacoshHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__implHashatanhHashPrelude_FloatingHashPrelude_FloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashatanhHashPrelude_FloatingHashPrelude_Float, "Prelude__implHashatanhHashPrelude_FloatingHashPrelude_Float", 0, -1, args... )
    return( root )
}

func Prelude__defHashmemptyHashPrelude_MonoidCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmemptyHashPrelude_Monoid, "Prelude__defHashmemptyHashPrelude_Monoid", 2, 1, args... )
    return( root )
}

func Prelude__defHashmappendHashPrelude_MonoidCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmappendHashPrelude_Monoid, "Prelude__defHashmappendHashPrelude_Monoid", 1, -1, args... )
    return( root )
}

func Prelude__defHashmconcatHashPrelude_MonoidCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmconcatHashPrelude_Monoid, "Prelude__defHashmconcatHashPrelude_Monoid", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbRb, "Prelude__instHashPrelude_MonoidHashLbRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbRb", 1, 0, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbRb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaRb, "Prelude__instHashPrelude_MonoidHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaRb", 3, 2, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb", 4, 2, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb_CASE0, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb_CASE0", 5, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaRb", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaRb, "Prelude__instHashPrelude_MonoidHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaRb", 4, 3, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb", 5, 3, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb_CASE0, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb_CASE0", 7, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaRb", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaRb, "Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaRb", 5, 4, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb", 6, 4, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb_CASE0, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb_CASE0", 9, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaRb", 4, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaCommaRb, "Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaCommaRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaCommaRb", 6, 5, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb", 7, 5, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb_CASE0, "Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb_CASE0", 11, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaCommaRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaCommaRb", 5, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLSbRSb, "Prelude__instHashPrelude_MonoidHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLSbRSb, "Prelude__implHashmemptyHashPrelude_MonoidHashLSbRSb", 1, 0, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLSbRSb, "Prelude__implHashmappendHashPrelude_MonoidHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb, "Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209, "Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209", 1, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209__Hashlambda210Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209__Hashlambda210, "Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209__Hashlambda210", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashLbSubGtRb, "Prelude__instHashPrelude_MonoidHashLbSubGtRb", 1, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbSubGtRb, "Prelude__implHashmemptyHashPrelude_MonoidHashLbSubGtRb", 3, 1, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashLbSubGtRb, "Prelude__implHashmappendHashPrelude_MonoidHashLbSubGtRb", 4, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLbSubGtRb, "Prelude__implHashmconcatHashPrelude_MonoidHashLbSubGtRb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_Ordering, "Prelude__instHashPrelude_MonoidHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Ordering, "Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Ordering, "Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Ordering, "Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__defHashfmapHashPrelude_FunctorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfmapHashPrelude_Functor, "Prelude__defHashfmapHashPrelude_Functor", 1, -1, args... )
    return( root )
}

func Prelude__defHashLtDolHashPrelude_FunctorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtDolHashPrelude_Functor, "Prelude__defHashLtDolHashPrelude_Functor", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FunctorHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FunctorHashLSbRSb, "Prelude__instHashPrelude_FunctorHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashfmapHashPrelude_FunctorHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb, "Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtDolHashPrelude_FunctorHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtDolHashPrelude_FunctorHashLSbRSb, "Prelude__implHashLtDolHashPrelude_FunctorHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FunctorHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FunctorHashLbSubGtRb, "Prelude__instHashPrelude_FunctorHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashfmapHashPrelude_FunctorHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLbSubGtRb, "Prelude__implHashfmapHashPrelude_FunctorHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtDolHashPrelude_FunctorHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtDolHashPrelude_FunctorHashLbSubGtRb, "Prelude__implHashLtDolHashPrelude_FunctorHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__defHashpureHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashpureHashPrelude_Applicative, "Prelude__defHashpureHashPrelude_Applicative", 1, -1, args... )
    return( root )
}

func Prelude__defHashLtMulGtHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtMulGtHashPrelude_Applicative, "Prelude__defHashLtMulGtHashPrelude_Applicative", 1, -1, args... )
    return( root )
}

func Prelude__defHashMulGtHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashMulGtHashPrelude_Applicative, "Prelude__defHashMulGtHashPrelude_Applicative", 3, -1, args... )
    return( root )
}

func Prelude__defHashLtMulHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtMulHashPrelude_Applicative, "Prelude__defHashLtMulHashPrelude_Applicative", 1, -1, args... )
    return( root )
}

func Prelude__defHashliftA2HashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashliftA2HashPrelude_Applicative, "Prelude__defHashliftA2HashPrelude_Applicative", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ApplicativeHashLSbRSb, "Prelude__instHashPrelude_ApplicativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashpureHashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpureHashPrelude_ApplicativeHashLSbRSb, "Prelude__implHashpureHashPrelude_ApplicativeHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211__Hashlambda212Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211__Hashlambda212, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211__Hashlambda212", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb, "Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213, "Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213", 2, -1, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213__Hashlambda214Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213__Hashlambda214, "Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213__Hashlambda214", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulHashPrelude_ApplicativeHashLSbRSb, "Prelude__implHashLtMulHashPrelude_ApplicativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb, "Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb", 3, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215, "Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215", 3, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215__Hashlambda216Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215__Hashlambda216, "Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215__Hashlambda216", 3, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ApplicativeHashLbSubGtRb, "Prelude__instHashPrelude_ApplicativeHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashpureHashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpureHashPrelude_ApplicativeHashLbSubGtRb, "Prelude__implHashpureHashPrelude_ApplicativeHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLbSubGtRb, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLbSubGtRb", 3, -1, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashLbSubGtRb, "Prelude__implHashMulGtHashPrelude_ApplicativeHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulHashPrelude_ApplicativeHashLbSubGtRb, "Prelude__implHashLtMulHashPrelude_ApplicativeHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashLbSubGtRb, "Prelude__implHashliftA2HashPrelude_ApplicativeHashLbSubGtRb", 4, -1, args... )
    return( root )
}

func Prelude__defHashemptyHashPrelude_AlternativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashemptyHashPrelude_Alternative, "Prelude__defHashemptyHashPrelude_Alternative", 2, 1, args... )
    return( root )
}

func Prelude__defHashLtStrtGtHashPrelude_AlternativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashLtStrtGtHashPrelude_Alternative, "Prelude__defHashLtStrtGtHashPrelude_Alternative", 1, -1, args... )
    return( root )
}

func Prelude__defHashsomeHashPrelude_AlternativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashsomeHashPrelude_Alternative, "Prelude__defHashsomeHashPrelude_Alternative", 2, -1, args... )
    return( root )
}

func Prelude__defHashmanyHashPrelude_AlternativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashmanyHashPrelude_Alternative, "Prelude__defHashmanyHashPrelude_Alternative", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_AlternativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_AlternativeHashLSbRSb, "Prelude__instHashPrelude_AlternativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashemptyHashPrelude_AlternativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashemptyHashPrelude_AlternativeHashLSbRSb, "Prelude__implHashemptyHashPrelude_AlternativeHashLSbRSb", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtStrtGtHashPrelude_AlternativeHashLSbRSb, "Prelude__implHashLtStrtGtHashPrelude_AlternativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashsomeHashPrelude_AlternativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsomeHashPrelude_AlternativeHashLSbRSb, "Prelude__implHashsomeHashPrelude_AlternativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashmanyHashPrelude_AlternativeHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmanyHashPrelude_AlternativeHashLSbRSb, "Prelude__implHashmanyHashPrelude_AlternativeHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__defHashGtGtEqHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtEqHashPrelude_Monad, "Prelude__defHashGtGtEqHashPrelude_Monad", 1, -1, args... )
    return( root )
}

func Prelude__defHashGtGtHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtHashPrelude_Monad, "Prelude__defHashGtGtHashPrelude_Monad", 3, -1, args... )
    return( root )
}

func Prelude__defHashGtGtHashPrelude_Monad__Hashlambda217Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashGtGtHashPrelude_Monad__Hashlambda217, "Prelude__defHashGtGtHashPrelude_Monad__Hashlambda217", 2, -1, args... )
    return( root )
}

func Prelude__defHashreturnHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashreturnHashPrelude_Monad, "Prelude__defHashreturnHashPrelude_Monad", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashLSbRSb, "Prelude__instHashPrelude_MonadHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218__Hashlambda219Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218__Hashlambda219, "Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218__Hashlambda219", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb, "Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashLSbRSb, "Prelude__implHashreturnHashPrelude_MonadHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashLbSubGtRb, "Prelude__instHashPrelude_MonadHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb, "Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb__Hashlambda220Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb__Hashlambda220, "Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb__Hashlambda220", 3, -1, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashLbSubGtRb, "Prelude__implHashGtGtHashPrelude_MonadHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashLbSubGtRbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashLbSubGtRb, "Prelude__implHashreturnHashPrelude_MonadHashLbSubGtRb", 0, -1, args... )
    return( root )
}

func Prelude__defHashfailHashPrelude_MonadFailCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__defHashfailHashPrelude_MonadFail, "Prelude__defHashfailHashPrelude_MonadFail", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadFailHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadFailHashLSbRSb, "Prelude__instHashPrelude_MonadFailHashLSbRSb", 0, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadFailHashLSbRSbCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadFailHashLSbRSb, "Prelude__implHashfailHashPrelude_MonadFailHashLSbRSb", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_Maybe, "Prelude__instHashPrelude_MonoidHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Maybe, "Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Maybe", 2, 1, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe, "Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe_CASE0, "Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Maybe, "Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FunctorHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_Maybe, "Prelude__instHashPrelude_FunctorHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashfmapHashPrelude_FunctorHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashPrelude_Maybe, "Prelude__implHashfmapHashPrelude_FunctorHashPrelude_Maybe", 2, 1, args... )
    return( root )
}

func Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_Maybe, "Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__instHashPrelude_ApplicativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_Maybe", 2, 0, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_Maybe", 2, 0, args... )
    return( root )
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe, "Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe_CASE0, "Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_AlternativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_Maybe, "Prelude__instHashPrelude_AlternativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_Maybe, "Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_Maybe", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_Maybe, "Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_Maybe", 2, 0, args... )
    return( root )
}

func Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_Maybe, "Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_Maybe, "Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashPrelude_Maybe, "Prelude__instHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe", 2, 0, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe, "Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadFailHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadFailHashPrelude_Maybe, "Prelude__instHashPrelude_MonadFailHashPrelude_Maybe", 0, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadFailHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadFailHashPrelude_Maybe, "Prelude__implHashfailHashPrelude_MonadFailHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonoidHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_IO, "Prelude__instHashPrelude_MonoidHashPrelude_IO", 1, -1, args... )
    return( root )
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_IO, "Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_IO", 2, 1, args... )
    return( root )
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmappendHashPrelude_MonoidHashPrelude_IO, "Prelude__implHashmappendHashPrelude_MonoidHashPrelude_IO", 1, -1, args... )
    return( root )
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_IO, "Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_IO", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_FunctorHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_IO, "Prelude__instHashPrelude_FunctorHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashfmapHashPrelude_FunctorHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashPrelude_IO, "Prelude__implHashfmapHashPrelude_FunctorHashPrelude_IO", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_IO, "Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_IO, "Prelude__instHashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IO, "Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_IO, "Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IO, "Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_IO, "Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IO, "Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_AlternativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_IO, "Prelude__instHashPrelude_AlternativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_IO, "Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_IO", 1, 0, args... )
    return( root )
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_IO, "Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_IO", 2, -1, args... )
    return( root )
}

func Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_IO, "Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_IO, "Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IO, "Prelude__instHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO, "Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO, "Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO, "Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_MonadFailHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_MonadFailHashPrelude_IO, "Prelude__instHashPrelude_MonadFailHashPrelude_IO", 0, -1, args... )
    return( root )
}

func Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IO, "Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IO", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOError, "Prelude__instHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError", 1, 0, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Bool, "Prelude__instHashPrelude_DataHashPrelude_Bool", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_BoolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Bool, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Bool", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Ordering, "Prelude__instHashPrelude_DataHashPrelude_Ordering", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE2, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE2", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE1", 1, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_OrderingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Ordering, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Ordering", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Maybe, "Prelude__instHashPrelude_DataHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Maybe, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Maybe", 2, 1, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_Either, "Prelude__instHashPrelude_DataHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_Either, "Prelude__implHashaValueHashPrelude_DataHashPrelude_Either", 3, 2, args... )
    return( root )
}

func Prelude__instHashPrelude_DataHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_DataHashPrelude_IOError, "Prelude__instHashPrelude_DataHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE3, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE3", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE2, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE2", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE1, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE1", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE0, "Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE0", 2, 0, args... )
    return( root )
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashaValueHashPrelude_DataHashPrelude_IOError, "Prelude__implHashaValueHashPrelude_DataHashPrelude_IOError", 1, 0, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Maybe, "Prelude__instHashPrelude_EqHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Maybe, "Prelude__instHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe", 3, 1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0", 1, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Maybe, "Prelude__instHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe", 3, 2, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Maybe, "Prelude__instHashPrelude_ReadHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe", 3, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221", 1, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE2", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE3", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE4", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE5", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE6", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE7", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE8", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE9", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE10", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE11, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE11", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE12, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE12", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE13, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE13", 4, 3, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE14, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE14", 3, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229__Hashlambda233Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229__Hashlambda233, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229__Hashlambda233", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_MaybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe", 1, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_Either, "Prelude__instHashPrelude_EqHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either", 4, 2, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_OrdHashPrelude_Either, "Prelude__instHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either, "Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtHashPrelude_OrdHashPrelude_Either, "Prelude__implHashLtHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtHashPrelude_OrdHashPrelude_Either, "Prelude__implHashGtHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either", 4, 2, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1", 3, 0, args... )
    return( root )
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0, "Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0", 3, 0, args... )
    return( root )
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either, "Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashminHashPrelude_OrdHashPrelude_Either, "Prelude__implHashminHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either, "Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ShowHashPrelude_Either, "Prelude__instHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either", 4, 3, args... )
    return( root )
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either, "Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_ReadHashPrelude_Either, "Prelude__instHashPrelude_ReadHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either", 4, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238__Hashlambda242Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238__Hashlambda242, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238__Hashlambda242", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244", 2, -1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247", 3, 1, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE0, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE0", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE1, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE2, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE2", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE3, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE4, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE4", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE5, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE6, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE6", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE7, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE7", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE8, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE8", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE9, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE9", 5, 4, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE10, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE10", 4, 0, args... )
    return( root )
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247__Hashlambda251Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247__Hashlambda251, "Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247__Hashlambda251", 2, 0, args... )
    return( root )
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_EitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either, "Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either", 2, -1, args... )
    return( root )
}

func Prelude__instHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__instHashPrelude_EqHashPrelude_IOError, "Prelude__instHashPrelude_EqHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1", 2, 0, args... )
    return( root )
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0, "Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0", 2, 0, args... )
    return( root )
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError, "Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError", 0, -1, args... )
    return( root )
}

func Prelude_eqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqChar, "Prelude_eqChar", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqChar, "Prelude_prim_eqChar", 2, -1, args... )
    return( root )
}

func Prelude_eqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqInt, "Prelude_eqInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqInt, "Prelude_prim_eqInt", 2, -1, args... )
    return( root )
}

func Prelude_eqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_eqFloat, "Prelude_eqFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_eqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_eqFloat, "Prelude_prim_eqFloat", 2, -1, args... )
    return( root )
}

func Prelude_ltEqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqChar, "Prelude_ltEqChar", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqChar, "Prelude_prim_ltEqChar", 2, -1, args... )
    return( root )
}

func Prelude_ltEqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqInt, "Prelude_ltEqInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqInt, "Prelude_prim_ltEqInt", 2, -1, args... )
    return( root )
}

func Prelude_ltEqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ltEqFloat, "Prelude_ltEqFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_ltEqFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ltEqFloat, "Prelude_prim_ltEqFloat", 2, -1, args... )
    return( root )
}

func Prelude_showsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_shows, "Prelude_shows", 1, -1, args... )
    return( root )
}

func Prelude_showCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showChar, "Prelude_showChar", 0, -1, args... )
    return( root )
}

func Prelude_showStringCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showString, "Prelude_showString", 2, -1, args... )
    return( root )
}

func Prelude_showListDefaultCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showListDefault, "Prelude_showListDefault", 3, 1, args... )
    return( root )
}

func Prelude_showListDefault_showl_22Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showListDefault_showl_22, "Prelude_showListDefault_showl_22", 3, 2, args... )
    return( root )
}

func Prelude_showParenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showParen, "Prelude_showParen", 2, 0, args... )
    return( root )
}

func Prelude_showSignedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned, "Prelude_showSigned", 4, -1, args... )
    return( root )
}

func Prelude_showSigned_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned_COMPLEXCASE0, "Prelude_showSigned_COMPLEXCASE0", 5, 4, args... )
    return( root )
}

func Prelude_showSigned_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showSigned_COMPLEXCASE1, "Prelude_showSigned_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_showTupleCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showTuple, "Prelude_showTuple", 1, -1, args... )
    return( root )
}

func Prelude_showTuple__Hashlambda253Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showTuple__Hashlambda253, "Prelude_showTuple__Hashlambda253", 2, -1, args... )
    return( root )
}

func Prelude_showCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showCharLiteral, "Prelude_showCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_showCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_showCharLiteral, "Prelude_prim_showCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_showStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showStringLiteral, "Prelude_showStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_showStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_showStringLiteral, "Prelude_prim_showStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_showIntLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showIntLiteral, "Prelude_showIntLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_showIntLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_showIntLiteral, "Prelude_prim_showIntLiteral", 1, -1, args... )
    return( root )
}

func Prelude_showFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showFloatLiteral, "Prelude_showFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_showFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_showFloatLiteral, "Prelude_prim_showFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_reads, "Prelude_reads", 1, -1, args... )
    return( root )
}

func Prelude_readListDefaultCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault, "Prelude_readListDefault", 1, -1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45, "Prelude_readListDefault_readlSQuote_45", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda268, "Prelude_readListDefault_readlSQuote_45__Hashlambda268", 2, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE0, "Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda268_COMPLEXCASE1, "Prelude_readListDefault_readlSQuote_45__Hashlambda268_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE2, "Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE2", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272, "Prelude_readListDefault_readlSQuote_45__Hashlambda272", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE0, "Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272_COMPLEXCASE1, "Prelude_readListDefault_readlSQuote_45__Hashlambda272_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE2, "Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276, "Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276__Hashlambda280Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276__Hashlambda280, "Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276__Hashlambda280", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readl_45Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45, "Prelude_readListDefault_readl_45", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda256Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda256, "Prelude_readListDefault_readl_45__Hashlambda256", 2, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda256_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda256_CASE0, "Prelude_readListDefault_readl_45__Hashlambda256_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda256_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda256_COMPLEXCASE1, "Prelude_readListDefault_readl_45__Hashlambda256_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda256_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda256_CASE2, "Prelude_readListDefault_readl_45__Hashlambda256_CASE2", 3, 0, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda260Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda260, "Prelude_readListDefault_readl_45__Hashlambda260", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault_readl_45__Hashlambda260__Hashlambda264Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault_readl_45__Hashlambda260__Hashlambda264, "Prelude_readListDefault_readl_45__Hashlambda260__Hashlambda264", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282, "Prelude_readListDefault__Hashlambda282", 2, -1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285, "Prelude_readListDefault__Hashlambda282__Hashlambda285", 3, 1, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE0, "Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285_COMPLEXCASE1, "Prelude_readListDefault__Hashlambda282__Hashlambda285_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE2, "Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285__Hashlambda287Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285__Hashlambda287, "Prelude_readListDefault__Hashlambda282__Hashlambda285__Hashlambda287", 1, -1, args... )
    return( root )
}

func Prelude_readParenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen, "Prelude_readParen", 2, 0, args... )
    return( root )
}

func Prelude_readParen_optional_61Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_optional_61, "Prelude_readParen_optional_61", 2, -1, args... )
    return( root )
}

func Prelude_readParen_mandatory_61Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61, "Prelude_readParen_mandatory_61", 2, -1, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290, "Prelude_readParen_mandatory_61__Hashlambda290", 3, 1, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290_CASE0, "Prelude_readParen_mandatory_61__Hashlambda290_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290_COMPLEXCASE1, "Prelude_readParen_mandatory_61__Hashlambda290_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290_CASE2, "Prelude_readParen_mandatory_61__Hashlambda290_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294, "Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294", 2, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298, "Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298", 3, 1, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE0, "Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_COMPLEXCASE1, "Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE2, "Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE2", 4, 0, args... )
    return( root )
}

func Prelude_readSignedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned, "Prelude_readSigned", 2, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_70Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_70, "Prelude_readSigned_readSQuoteSQuote_70", 2, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310, "Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310", 3, 1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314, "Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314", 3, 1, args... )
    return( root )
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314_CASE0, "Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70, "Prelude_readSigned_readSQuote_70", 3, -1, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70__Hashlambda302Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70__Hashlambda302, "Prelude_readSigned_readSQuote_70__Hashlambda302", 4, 2, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70__Hashlambda302_CASE0, "Prelude_readSigned_readSQuote_70__Hashlambda302_CASE0", 5, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70__Hashlambda302_COMPLEXCASE1, "Prelude_readSigned_readSQuote_70__Hashlambda302_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70__Hashlambda302_CASE2, "Prelude_readSigned_readSQuote_70__Hashlambda302_CASE2", 5, 0, args... )
    return( root )
}

func Prelude_readSigned_readSQuote_70__Hashlambda302__Hashlambda306Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readSigned_readSQuote_70__Hashlambda302__Hashlambda306, "Prelude_readSigned_readSQuote_70__Hashlambda302__Hashlambda306", 3, 1, args... )
    return( root )
}

func Prelude_readCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read, "Prelude_read", 2, -1, args... )
    return( root )
}

func Prelude_read_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read_COMPLEXCASE0, "Prelude_read_COMPLEXCASE0", 1, 0, args... )
    return( root )
}

func Prelude_read_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read_CASE1, "Prelude_read_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda318Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda318, "Prelude_read__Hashlambda318", 2, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda318__Hashlambda322Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda318__Hashlambda322, "Prelude_read__Hashlambda318__Hashlambda322", 3, 1, args... )
    return( root )
}

func Prelude_read__Hashlambda318__Hashlambda322_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda318__Hashlambda322_CASE0, "Prelude_read__Hashlambda318__Hashlambda322_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_read__Hashlambda318__Hashlambda322_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_read__Hashlambda318__Hashlambda322_CASE1, "Prelude_read__Hashlambda318__Hashlambda322_CASE1", 3, 0, args... )
    return( root )
}

func Prelude_lexCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex, "Prelude_lex", 1, 0, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE0, "Prelude_lex_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_CASE1, "Prelude_lex_CASE1", 1, 0, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE2, "Prelude_lex_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE3, "Prelude_lex_COMPLEXCASE3", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE4, "Prelude_lex_COMPLEXCASE4", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE5, "Prelude_lex_COMPLEXCASE5", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE6, "Prelude_lex_COMPLEXCASE6", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE7, "Prelude_lex_COMPLEXCASE7", 3, 2, args... )
    return( root )
}

func Prelude_lex_COMPLEXCASE8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_COMPLEXCASE8, "Prelude_lex_COMPLEXCASE8", 1, 0, args... )
    return( root )
}

func Prelude_lex_isSingle_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isSingle_86, "Prelude_lex_isSingle_86", 1, -1, args... )
    return( root )
}

func Prelude_lex_isSymbol_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isSymbol_86, "Prelude_lex_isSymbol_86", 1, -1, args... )
    return( root )
}

func Prelude_lex_isIdChar_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_isIdChar_86, "Prelude_lex_isIdChar_86", 1, -1, args... )
    return( root )
}

func Prelude_lex_lexExp_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86, "Prelude_lex_lexExp_86", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexExp_86_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86_COMPLEXCASE0, "Prelude_lex_lexExp_86_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexExp_86__Hashlambda338Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86__Hashlambda338, "Prelude_lex_lexExp_86__Hashlambda338", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexExp_86__Hashlambda338_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86__Hashlambda338_COMPLEXCASE0, "Prelude_lex_lexExp_86__Hashlambda338_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexExp_86__Hashlambda338__Hashlambda342Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86__Hashlambda338__Hashlambda342, "Prelude_lex_lexExp_86__Hashlambda338__Hashlambda342", 4, 2, args... )
    return( root )
}

func Prelude_lex_lexExp_86__Hashlambda346Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexExp_86__Hashlambda346, "Prelude_lex_lexExp_86__Hashlambda346", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86, "Prelude_lex_lexFracExp_86", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86_COMPLEXCASE0, "Prelude_lex_lexFracExp_86_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86_CASE1, "Prelude_lex_lexFracExp_86_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86_COMPLEXCASE2, "Prelude_lex_lexFracExp_86_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86__Hashlambda328Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86__Hashlambda328, "Prelude_lex_lexFracExp_86__Hashlambda328", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexFracExp_86__Hashlambda328__Hashlambda332Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexFracExp_86__Hashlambda328__Hashlambda332, "Prelude_lex_lexFracExp_86__Hashlambda328__Hashlambda332", 3, 1, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86, "Prelude_lex_lexStringItem_86", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86_COMPLEXCASE0, "Prelude_lex_lexStringItem_86_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86_CASE1, "Prelude_lex_lexStringItem_86_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86_COMPLEXCASE2, "Prelude_lex_lexStringItem_86_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86_COMPLEXCASE3, "Prelude_lex_lexStringItem_86_COMPLEXCASE3", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86__Hashlambda361Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86__Hashlambda361, "Prelude_lex_lexStringItem_86__Hashlambda361", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexStringItem_86__Hashlambda361_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexStringItem_86__Hashlambda361_COMPLEXCASE0, "Prelude_lex_lexStringItem_86__Hashlambda361_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexString_86Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_86, "Prelude_lex_lexString_86", 1, 0, args... )
    return( root )
}

func Prelude_lex_lexString_86_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_86_COMPLEXCASE0, "Prelude_lex_lexString_86_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lex_lexString_86__Hashlambda352Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_86__Hashlambda352, "Prelude_lex_lexString_86__Hashlambda352", 2, 0, args... )
    return( root )
}

func Prelude_lex_lexString_86__Hashlambda352__Hashlambda356Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex_lexString_86__Hashlambda352__Hashlambda356, "Prelude_lex_lexString_86__Hashlambda352__Hashlambda356", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda368Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda368, "Prelude_lex__Hashlambda368", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda368_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda368_CASE0, "Prelude_lex__Hashlambda368_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda368_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda368_COMPLEXCASE1, "Prelude_lex__Hashlambda368_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_lex__Hashlambda368_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda368_COMPLEXCASE2, "Prelude_lex__Hashlambda368_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda372Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda372, "Prelude_lex__Hashlambda372", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda376Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda376, "Prelude_lex__Hashlambda376", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda380Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda380, "Prelude_lex__Hashlambda380", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda384Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda384, "Prelude_lex__Hashlambda384", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda384__Hashlambda388Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda384__Hashlambda388, "Prelude_lex__Hashlambda384__Hashlambda388", 4, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda392Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda392, "Prelude_lex__Hashlambda392", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda392_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda392_CASE0, "Prelude_lex__Hashlambda392_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda392_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda392_COMPLEXCASE1, "Prelude_lex__Hashlambda392_COMPLEXCASE1", 4, 3, args... )
    return( root )
}

func Prelude_lex__Hashlambda392_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda392_COMPLEXCASE2, "Prelude_lex__Hashlambda392_COMPLEXCASE2", 3, 2, args... )
    return( root )
}

func Prelude_lex__Hashlambda396Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda396, "Prelude_lex__Hashlambda396", 2, 0, args... )
    return( root )
}

func Prelude_lex__Hashlambda400Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda400, "Prelude_lex__Hashlambda400", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda404Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda404, "Prelude_lex__Hashlambda404", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda408Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda408, "Prelude_lex__Hashlambda408", 3, 1, args... )
    return( root )
}

func Prelude_lex__Hashlambda408__Hashlambda412Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lex__Hashlambda408__Hashlambda412, "Prelude_lex__Hashlambda408__Hashlambda412", 4, 2, args... )
    return( root )
}

func Prelude_lexCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral, "Prelude_lexCharLiteral", 1, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_COMPLEXCASE0, "Prelude_lexCharLiteral_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lexCharLiteral_isCharName_148Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_isCharName_148, "Prelude_lexCharLiteral_isCharName_148", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_prefix_148Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_prefix_148, "Prelude_lexCharLiteral_prefix_148", 2, 1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148, "Prelude_lexCharLiteral_lexEsc_148", 1, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE0, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_LET1, "Prelude_lexCharLiteral_lexEsc_148_LET1", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE2, "Prelude_lexCharLiteral_lexEsc_148_CASE2", 2, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE3, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE3", 5, 4, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE11Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE11, "Prelude_lexCharLiteral_lexEsc_148_CASE11", 4, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE16Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE16, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE16", 4, 3, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_LET17Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_LET17, "Prelude_lexCharLiteral_lexEsc_148_LET17", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE18Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE18, "Prelude_lexCharLiteral_lexEsc_148_CASE18", 2, 1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE19Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE19, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE19", 3, 2, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_LET20Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_LET20, "Prelude_lexCharLiteral_lexEsc_148_LET20", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE21Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE21, "Prelude_lexCharLiteral_lexEsc_148_CASE21", 1, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE22Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE22, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE22", 2, 1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE12Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE12, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE12", 3, 2, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_LET13Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_LET13, "Prelude_lexCharLiteral_lexEsc_148_LET13", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE14Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE14, "Prelude_lexCharLiteral_lexEsc_148_CASE14", 1, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE15Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE15, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE15", 2, 1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE4Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE4, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE4", 5, 4, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE5Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE5, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE5", 5, 4, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE6Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE6, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE6", 5, 4, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE7Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE7, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE7", 3, 2, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_LET8Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_LET8, "Prelude_lexCharLiteral_lexEsc_148_LET8", 1, -1, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_CASE9Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_CASE9, "Prelude_lexCharLiteral_lexEsc_148_CASE9", 1, 0, args... )
    return( root )
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE10Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE10, "Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE10", 2, 1, args... )
    return( root )
}

func Prelude_lexDigitsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexDigits, "Prelude_lexDigits", 1, -1, args... )
    return( root )
}

func Prelude_lexDigits__Hashlambda433Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexDigits__Hashlambda433, "Prelude_lexDigits__Hashlambda433", 2, 0, args... )
    return( root )
}

func Prelude_lexDigits__Hashlambda433_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lexDigits__Hashlambda433_CASE0, "Prelude_lexDigits__Hashlambda433_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_readCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readCharLiteral, "Prelude_readCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readCharLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readCharLiteral, "Prelude_prim_readCharLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readStringLiteral, "Prelude_readStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readStringLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readStringLiteral, "Prelude_prim_readStringLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readNatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readNatLiteral, "Prelude_readNatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readNatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readNatLiteral, "Prelude_prim_readNatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_readFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readFloatLiteral, "Prelude_readFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFloatLiteralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFloatLiteral, "Prelude_prim_readFloatLiteral", 1, -1, args... )
    return( root )
}

func Prelude_plusIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_plusInt, "Prelude_plusInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_plusIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_plusInt, "Prelude_prim_plusInt", 2, -1, args... )
    return( root )
}

func Prelude_minusIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_minusInt, "Prelude_minusInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_minusIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_minusInt, "Prelude_prim_minusInt", 2, -1, args... )
    return( root )
}

func Prelude_timesIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_timesInt, "Prelude_timesInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_timesIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_timesInt, "Prelude_prim_timesInt", 2, -1, args... )
    return( root )
}

func Prelude_plusFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_plusFloat, "Prelude_plusFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_plusFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_plusFloat, "Prelude_prim_plusFloat", 2, -1, args... )
    return( root )
}

func Prelude_minusFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_minusFloat, "Prelude_minusFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_minusFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_minusFloat, "Prelude_prim_minusFloat", 2, -1, args... )
    return( root )
}

func Prelude_timesFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_timesFloat, "Prelude_timesFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_timesFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_timesFloat, "Prelude_prim_timesFloat", 2, -1, args... )
    return( root )
}

func Prelude_negateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_negateFloat, "Prelude_negateFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_negateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_negateFloat, "Prelude_prim_negateFloat", 1, -1, args... )
    return( root )
}

func Prelude_intToFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_intToFloat, "Prelude_intToFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_intToFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_intToFloat, "Prelude_prim_intToFloat", 1, -1, args... )
    return( root )
}

func Prelude_divFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_divFloat, "Prelude_divFloat", 2, -1, args... )
    return( root )
}

func Prelude_prim_divFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_divFloat, "Prelude_prim_divFloat", 2, -1, args... )
    return( root )
}

func Prelude_evenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_even, "Prelude_even", 2, -1, args... )
    return( root )
}

func Prelude_oddCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_odd, "Prelude_odd", 1, -1, args... )
    return( root )
}

func Prelude_fromIntegralCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromIntegral, "Prelude_fromIntegral", 2, -1, args... )
    return( root )
}

func Prelude_realToFracCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_realToFrac, "Prelude_realToFrac", 2, -1, args... )
    return( root )
}

func Prelude_divIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_divInt, "Prelude_divInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_divIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_divInt, "Prelude_prim_divInt", 2, -1, args... )
    return( root )
}

func Prelude_modIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_modInt, "Prelude_modInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_modIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_modInt, "Prelude_prim_modInt", 2, -1, args... )
    return( root )
}

func Prelude_quotIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quotInt, "Prelude_quotInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_quotIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_quotInt, "Prelude_prim_quotInt", 2, -1, args... )
    return( root )
}

func Prelude_remIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_remInt, "Prelude_remInt", 2, -1, args... )
    return( root )
}

func Prelude_prim_remIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_remInt, "Prelude_prim_remInt", 2, -1, args... )
    return( root )
}

func Prelude_truncateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_truncateFloat, "Prelude_truncateFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_truncateFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_truncateFloat, "Prelude_prim_truncateFloat", 1, -1, args... )
    return( root )
}

func Prelude_roundFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_roundFloat, "Prelude_roundFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_roundFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_roundFloat, "Prelude_prim_roundFloat", 1, -1, args... )
    return( root )
}

func Prelude_logFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_logFloat, "Prelude_logFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_logFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_logFloat, "Prelude_prim_logFloat", 1, -1, args... )
    return( root )
}

func Prelude_expFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_expFloat, "Prelude_expFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_expFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_expFloat, "Prelude_prim_expFloat", 1, -1, args... )
    return( root )
}

func Prelude_sqrtFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sqrtFloat, "Prelude_sqrtFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_sqrtFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_sqrtFloat, "Prelude_prim_sqrtFloat", 1, -1, args... )
    return( root )
}

func Prelude_sinFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sinFloat, "Prelude_sinFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_sinFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_sinFloat, "Prelude_prim_sinFloat", 1, -1, args... )
    return( root )
}

func Prelude_cosFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_cosFloat, "Prelude_cosFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_cosFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_cosFloat, "Prelude_prim_cosFloat", 1, -1, args... )
    return( root )
}

func Prelude_tanFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tanFloat, "Prelude_tanFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_tanFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_tanFloat, "Prelude_prim_tanFloat", 1, -1, args... )
    return( root )
}

func Prelude_asinFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asinFloat, "Prelude_asinFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_asinFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_asinFloat, "Prelude_prim_asinFloat", 1, -1, args... )
    return( root )
}

func Prelude_acosFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_acosFloat, "Prelude_acosFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_acosFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_acosFloat, "Prelude_prim_acosFloat", 1, -1, args... )
    return( root )
}

func Prelude_atanFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_atanFloat, "Prelude_atanFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_atanFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_atanFloat, "Prelude_prim_atanFloat", 1, -1, args... )
    return( root )
}

func Prelude_sinhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sinhFloat, "Prelude_sinhFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_sinhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_sinhFloat, "Prelude_prim_sinhFloat", 1, -1, args... )
    return( root )
}

func Prelude_coshFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_coshFloat, "Prelude_coshFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_coshFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_coshFloat, "Prelude_prim_coshFloat", 1, -1, args... )
    return( root )
}

func Prelude_tanhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tanhFloat, "Prelude_tanhFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_tanhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_tanhFloat, "Prelude_prim_tanhFloat", 1, -1, args... )
    return( root )
}

func Prelude_asinhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asinhFloat, "Prelude_asinhFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_asinhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_asinhFloat, "Prelude_prim_asinhFloat", 1, -1, args... )
    return( root )
}

func Prelude_acoshFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_acoshFloat, "Prelude_acoshFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_acoshFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_acoshFloat, "Prelude_prim_acoshFloat", 1, -1, args... )
    return( root )
}

func Prelude_atanhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_atanhFloat, "Prelude_atanhFloat", 1, -1, args... )
    return( root )
}

func Prelude_prim_atanhFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_atanhFloat, "Prelude_prim_atanhFloat", 1, -1, args... )
    return( root )
}

func Prelude_PowCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow, "Prelude_Pow", 4, -1, args... )
    return( root )
}

func Prelude_Pow_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_COMPLEXCASE0, "Prelude_Pow_COMPLEXCASE0", 5, 4, args... )
    return( root )
}

func Prelude_Pow_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_COMPLEXCASE1, "Prelude_Pow_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_Pow_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_COMPLEXCASE2, "Prelude_Pow_COMPLEXCASE2", 5, 4, args... )
    return( root )
}

func Prelude_Pow_g_262Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_g_262, "Prelude_Pow_g_262", 5, -1, args... )
    return( root )
}

func Prelude_Pow_g_262_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_g_262_COMPLEXCASE0, "Prelude_Pow_g_262_COMPLEXCASE0", 6, 5, args... )
    return( root )
}

func Prelude_Pow_g_262_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_g_262_COMPLEXCASE1, "Prelude_Pow_g_262_COMPLEXCASE1", 6, 5, args... )
    return( root )
}

func Prelude_Pow_g_262_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_g_262_COMPLEXCASE2, "Prelude_Pow_g_262_COMPLEXCASE2", 6, 5, args... )
    return( root )
}

func Prelude_Pow_f_262Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_f_262, "Prelude_Pow_f_262", 4, -1, args... )
    return( root )
}

func Prelude_Pow_f_262_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_f_262_COMPLEXCASE0, "Prelude_Pow_f_262_COMPLEXCASE0", 5, 4, args... )
    return( root )
}

func Prelude_Pow_f_262_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_f_262_COMPLEXCASE1, "Prelude_Pow_f_262_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_Pow_f_262_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Pow_f_262_COMPLEXCASE2, "Prelude_Pow_f_262_COMPLEXCASE2", 5, 4, args... )
    return( root )
}

func Prelude_LtDolGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtDolGt, "Prelude_LtDolGt", 1, -1, args... )
    return( root )
}

func Prelude_apCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ap, "Prelude_ap", 3, -1, args... )
    return( root )
}

func Prelude_ap__Hashlambda437Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ap__Hashlambda437, "Prelude_ap__Hashlambda437", 3, -1, args... )
    return( root )
}

func Prelude_ap__Hashlambda437__Hashlambda439Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ap__Hashlambda437__Hashlambda439, "Prelude_ap__Hashlambda437__Hashlambda439", 3, -1, args... )
    return( root )
}

func Prelude_liftM2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2, "Prelude_liftM2", 4, -1, args... )
    return( root )
}

func Prelude_liftM2__Hashlambda443Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2__Hashlambda443, "Prelude_liftM2__Hashlambda443", 4, -1, args... )
    return( root )
}

func Prelude_liftM2__Hashlambda443__Hashlambda445Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftM2__Hashlambda443__Hashlambda445, "Prelude_liftM2__Hashlambda443__Hashlambda445", 4, -1, args... )
    return( root )
}

func Prelude_sequenceCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence, "Prelude_sequence", 2, 1, args... )
    return( root )
}

func Prelude_sequence__Hashlambda449Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence__Hashlambda449, "Prelude_sequence__Hashlambda449", 3, -1, args... )
    return( root )
}

func Prelude_sequence__Hashlambda449__Hashlambda451Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence__Hashlambda449__Hashlambda451, "Prelude_sequence__Hashlambda449__Hashlambda451", 3, -1, args... )
    return( root )
}

func Prelude_sequence_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sequence_, "Prelude_sequence_", 1, -1, args... )
    return( root )
}

func Prelude_mapMCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapM, "Prelude_mapM", 2, -1, args... )
    return( root )
}

func Prelude_mapM_Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mapM_, "Prelude_mapM_", 2, -1, args... )
    return( root )
}

func Prelude_isUpperCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isUpper, "Prelude_isUpper", 1, -1, args... )
    return( root )
}

func Prelude_isLowerCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isLower, "Prelude_isLower", 1, -1, args... )
    return( root )
}

func Prelude_isAlphaCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isAlpha, "Prelude_isAlpha", 1, -1, args... )
    return( root )
}

func Prelude_isDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isDigit, "Prelude_isDigit", 1, -1, args... )
    return( root )
}

func Prelude_isAlphaNumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isAlphaNum, "Prelude_isAlphaNum", 1, -1, args... )
    return( root )
}

func Prelude_isBinDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isBinDigit, "Prelude_isBinDigit", 1, -1, args... )
    return( root )
}

func Prelude_isOctDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isOctDigit, "Prelude_isOctDigit", 1, -1, args... )
    return( root )
}

func Prelude_isHexDigitCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isHexDigit, "Prelude_isHexDigit", 1, -1, args... )
    return( root )
}

func Prelude_isSpaceCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_isSpace, "Prelude_isSpace", 1, -1, args... )
    return( root )
}

func Prelude_ordCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ord, "Prelude_ord", 1, -1, args... )
    return( root )
}

func Prelude_prim_ordCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_ord, "Prelude_prim_ord", 1, -1, args... )
    return( root )
}

func Prelude_chrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr, "Prelude_chr", 1, -1, args... )
    return( root )
}

func Prelude_chr_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr_COMPLEXCASE0, "Prelude_chr_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_chr_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr_COMPLEXCASE1, "Prelude_chr_COMPLEXCASE1", 2, 1, args... )
    return( root )
}

func Prelude_chr_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_chr_COMPLEXCASE2, "Prelude_chr_COMPLEXCASE2", 2, 1, args... )
    return( root )
}

func Prelude_prim_chrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_chr, "Prelude_prim_chr", 1, -1, args... )
    return( root )
}

func Prelude_linesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines, "Prelude_lines", 1, 0, args... )
    return( root )
}

func Prelude_lines_LET0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_LET0, "Prelude_lines_LET0", 1, -1, args... )
    return( root )
}

func Prelude_lines_splitLine_316Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitLine_316, "Prelude_lines_splitLine_316", 1, 0, args... )
    return( root )
}

func Prelude_lines_splitLine_316_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitLine_316_COMPLEXCASE0, "Prelude_lines_splitLine_316_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_lines_splitLine_316_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitLine_316_LET1, "Prelude_lines_splitLine_316_LET1", 2, -1, args... )
    return( root )
}

func Prelude_lines_splitLine_316__HashselFP21HashdsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitLine_316__HashselFP21Hashds, "Prelude_lines_splitLine_316__HashselFP21Hashds", 1, 0, args... )
    return( root )
}

func Prelude_lines_splitLine_316__HashselFP22HashesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines_splitLine_316__HashselFP22Hashes, "Prelude_lines_splitLine_316__HashselFP22Hashes", 1, 0, args... )
    return( root )
}

func Prelude_lines__HashselFP24HashlCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines__HashselFP24Hashl, "Prelude_lines__HashselFP24Hashl", 1, 0, args... )
    return( root )
}

func Prelude_lines__HashselFP25HashbsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lines__HashselFP25Hashbs, "Prelude_lines__HashselFP25Hashbs", 1, 0, args... )
    return( root )
}

func Prelude_unlinesCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unlines, "Prelude_unlines", 0, -1, args... )
    return( root )
}

func Prelude_wordsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words, "Prelude_words", 1, -1, args... )
    return( root )
}

func Prelude_words_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words_COMPLEXCASE0, "Prelude_words_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_words_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words_LET1, "Prelude_words_LET1", 1, -1, args... )
    return( root )
}

func Prelude_words__HashselFP27HashwCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words__HashselFP27Hashw, "Prelude_words__HashselFP27Hashw", 1, 0, args... )
    return( root )
}

func Prelude_words__HashselFP28Hashs2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_words__HashselFP28Hashs2, "Prelude_words__HashselFP28Hashs2", 1, 0, args... )
    return( root )
}

func Prelude_unwordsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords, "Prelude_unwords", 1, -1, args... )
    return( root )
}

func Prelude_unwords_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords_COMPLEXCASE0, "Prelude_unwords_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_unwords__Hashlambda453Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unwords__Hashlambda453, "Prelude_unwords__Hashlambda453", 2, -1, args... )
    return( root )
}

func Prelude_DolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Dol, "Prelude_Dol", 2, -1, args... )
    return( root )
}

func Prelude_DolExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolExcl, "Prelude_DolExcl", 2, -1, args... )
    return( root )
}

func Prelude_DolExclExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolExclExcl, "Prelude_DolExclExcl", 2, -1, args... )
    return( root )
}

func Prelude_DolHashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolHash, "Prelude_DolHash", 2, -1, args... )
    return( root )
}

func Prelude_DolHashHashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_DolHashHash, "Prelude_DolHashHash", 2, -1, args... )
    return( root )
}

func Prelude_seqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_seq, "Prelude_seq", 2, -1, args... )
    return( root )
}

func Prelude_ensureNotFreeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureNotFree, "Prelude_ensureNotFree", 1, -1, args... )
    return( root )
}

func Prelude_ensureSpineCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureSpine, "Prelude_ensureSpine", 1, -1, args... )
    return( root )
}

func Prelude_ensureSpine_ensureList_343Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ensureSpine_ensureList_343, "Prelude_ensureSpine_ensureList_343", 1, 0, args... )
    return( root )
}

func Prelude_normalFormCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_normalForm, "Prelude_normalForm", 1, -1, args... )
    return( root )
}

func Prelude_groundNormalFormCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_groundNormalForm, "Prelude_groundNormalForm", 1, -1, args... )
    return( root )
}

func Prelude__Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__, "Prelude__", 2, -1, args... )
    return( root )
}

func Prelude____Hashlambda454Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude____Hashlambda454, "Prelude____Hashlambda454", 3, -1, args... )
    return( root )
}

func Prelude_idCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_id, "Prelude_id", 1, -1, args... )
    return( root )
}

func Prelude_constCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_const, "Prelude_const", 2, -1, args... )
    return( root )
}

func Prelude_asTypeOfCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asTypeOf, "Prelude_asTypeOf", 0, -1, args... )
    return( root )
}

func Prelude_curryCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_curry, "Prelude_curry", 3, -1, args... )
    return( root )
}

func Prelude_uncurryCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_uncurry, "Prelude_uncurry", 2, 1, args... )
    return( root )
}

func Prelude_flipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_flip, "Prelude_flip", 3, -1, args... )
    return( root )
}

func Prelude_untilCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_until, "Prelude_until", 3, -1, args... )
    return( root )
}

func Prelude_until_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_until_COMPLEXCASE0, "Prelude_until_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_AndAndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AndAnd, "Prelude_AndAnd", 2, 0, args... )
    return( root )
}

func Prelude_StrtStrtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_StrtStrt, "Prelude_StrtStrt", 2, 0, args... )
    return( root )
}

func Prelude_notCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_not, "Prelude_not", 1, 0, args... )
    return( root )
}

func Prelude_otherwiseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_otherwise, "Prelude_otherwise", 0, -1, args... )
    return( root )
}

func Prelude_ifThenElseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ifThenElse, "Prelude_ifThenElse", 3, 0, args... )
    return( root )
}

func Prelude_fstCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fst, "Prelude_fst", 1, 0, args... )
    return( root )
}

func Prelude_sndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_snd, "Prelude_snd", 1, 0, args... )
    return( root )
}

func Prelude_headCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_head, "Prelude_head", 1, 0, args... )
    return( root )
}

func Prelude_tailCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tail, "Prelude_tail", 1, 0, args... )
    return( root )
}

func Prelude_nullCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_null, "Prelude_null", 1, 0, args... )
    return( root )
}

func Prelude_AddAddCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AddAdd, "Prelude_AddAdd", 2, 0, args... )
    return( root )
}

func Prelude_lengthCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_length, "Prelude_length", 1, 0, args... )
    return( root )
}

func Prelude_ExclExclCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl, "Prelude_ExclExcl", 2, 0, args... )
    return( root )
}

func Prelude_ExclExcl_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl_COMPLEXCASE0, "Prelude_ExclExcl_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_ExclExcl_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ExclExcl_COMPLEXCASE1, "Prelude_ExclExcl_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_mapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_map, "Prelude_map", 2, 1, args... )
    return( root )
}

func Prelude_foldlCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldl, "Prelude_foldl", 3, 2, args... )
    return( root )
}

func Prelude_foldl1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldl1, "Prelude_foldl1", 2, 1, args... )
    return( root )
}

func Prelude_foldrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr, "Prelude_foldr", 3, 2, args... )
    return( root )
}

func Prelude_foldr1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr1, "Prelude_foldr1", 2, 1, args... )
    return( root )
}

func Prelude_foldr1_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_foldr1_CASE0, "Prelude_foldr1_CASE0", 3, 2, args... )
    return( root )
}

func Prelude_filterCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_filter, "Prelude_filter", 2, 1, args... )
    return( root )
}

func Prelude_filter_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_filter_COMPLEXCASE0, "Prelude_filter_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_zipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip, "Prelude_zip", 2, 0, args... )
    return( root )
}

func Prelude_zip_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip_CASE0, "Prelude_zip_CASE0", 3, 0, args... )
    return( root )
}

func Prelude_zip3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3, "Prelude_zip3", 3, 0, args... )
    return( root )
}

func Prelude_zip3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3_CASE0, "Prelude_zip3_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_zip3_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zip3_CASE1, "Prelude_zip3_CASE1", 5, 0, args... )
    return( root )
}

func Prelude_zipWithCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith, "Prelude_zipWith", 3, 1, args... )
    return( root )
}

func Prelude_zipWith_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith_CASE0, "Prelude_zipWith_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_zipWith3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3, "Prelude_zipWith3", 4, 1, args... )
    return( root )
}

func Prelude_zipWith3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3_CASE0, "Prelude_zipWith3_CASE0", 5, 0, args... )
    return( root )
}

func Prelude_zipWith3_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_zipWith3_CASE1, "Prelude_zipWith3_CASE1", 6, 0, args... )
    return( root )
}

func Prelude_unzipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip, "Prelude_unzip", 1, 0, args... )
    return( root )
}

func Prelude_unzip_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip_CASE0, "Prelude_unzip_CASE0", 2, 0, args... )
    return( root )
}

func Prelude_unzip_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip_LET1, "Prelude_unzip_LET1", 3, -1, args... )
    return( root )
}

func Prelude_unzip__HashselFP30HashxsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip__HashselFP30Hashxs, "Prelude_unzip__HashselFP30Hashxs", 1, 0, args... )
    return( root )
}

func Prelude_unzip__HashselFP31HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip__HashselFP31Hashys, "Prelude_unzip__HashselFP31Hashys", 1, 0, args... )
    return( root )
}

func Prelude_unzip3Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3, "Prelude_unzip3", 1, 0, args... )
    return( root )
}

func Prelude_unzip3_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3_CASE0, "Prelude_unzip3_CASE0", 2, 0, args... )
    return( root )
}

func Prelude_unzip3_LET1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3_LET1, "Prelude_unzip3_LET1", 4, -1, args... )
    return( root )
}

func Prelude_unzip3__HashselFP33HashxsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP33Hashxs, "Prelude_unzip3__HashselFP33Hashxs", 1, 0, args... )
    return( root )
}

func Prelude_unzip3__HashselFP34HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP34Hashys, "Prelude_unzip3__HashselFP34Hashys", 1, 0, args... )
    return( root )
}

func Prelude_unzip3__HashselFP35HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unzip3__HashselFP35Hashzs, "Prelude_unzip3__HashselFP35Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_concatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_concat, "Prelude_concat", 0, -1, args... )
    return( root )
}

func Prelude_concatMapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_concatMap, "Prelude_concatMap", 1, -1, args... )
    return( root )
}

func Prelude_iterateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_iterate, "Prelude_iterate", 2, -1, args... )
    return( root )
}

func Prelude_repeatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_repeat, "Prelude_repeat", 1, -1, args... )
    return( root )
}

func Prelude_replicateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_replicate, "Prelude_replicate", 2, -1, args... )
    return( root )
}

func Prelude_takeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take, "Prelude_take", 2, -1, args... )
    return( root )
}

func Prelude_take_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take_COMPLEXCASE0, "Prelude_take_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_take_takep_528Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_take_takep_528, "Prelude_take_takep_528", 2, 1, args... )
    return( root )
}

func Prelude_dropCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop, "Prelude_drop", 2, -1, args... )
    return( root )
}

func Prelude_drop_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop_COMPLEXCASE0, "Prelude_drop_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_drop_CASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_drop_CASE1, "Prelude_drop_CASE1", 2, 0, args... )
    return( root )
}

func Prelude_splitAtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt, "Prelude_splitAt", 2, -1, args... )
    return( root )
}

func Prelude_splitAt_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_COMPLEXCASE0, "Prelude_splitAt_COMPLEXCASE0", 3, 2, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_542Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_542, "Prelude_splitAt_splitAtp_542", 2, 1, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_542_LET0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_542_LET0, "Prelude_splitAt_splitAtp_542_LET0", 3, -1, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_542__HashselFP37HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_542__HashselFP37Hashys, "Prelude_splitAt_splitAtp_542__HashselFP37Hashys", 1, 0, args... )
    return( root )
}

func Prelude_splitAt_splitAtp_542__HashselFP38HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_splitAt_splitAtp_542__HashselFP38Hashzs, "Prelude_splitAt_splitAtp_542__HashselFP38Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_takeWhileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_takeWhile, "Prelude_takeWhile", 2, 1, args... )
    return( root )
}

func Prelude_takeWhile_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_takeWhile_COMPLEXCASE0, "Prelude_takeWhile_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_dropWhileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_dropWhile, "Prelude_dropWhile", 2, 1, args... )
    return( root )
}

func Prelude_dropWhile_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_dropWhile_COMPLEXCASE0, "Prelude_dropWhile_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_spanCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span, "Prelude_span", 2, 1, args... )
    return( root )
}

func Prelude_span_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_COMPLEXCASE0, "Prelude_span_COMPLEXCASE0", 4, 3, args... )
    return( root )
}

func Prelude_span_LET2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_LET2, "Prelude_span_LET2", 3, -1, args... )
    return( root )
}

func Prelude_span_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span_COMPLEXCASE1, "Prelude_span_COMPLEXCASE1", 3, 2, args... )
    return( root )
}

func Prelude_span__HashselFP40HashysCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span__HashselFP40Hashys, "Prelude_span__HashselFP40Hashys", 1, 0, args... )
    return( root )
}

func Prelude_span__HashselFP41HashzsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_span__HashselFP41Hashzs, "Prelude_span__HashselFP41Hashzs", 1, 0, args... )
    return( root )
}

func Prelude_breakCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_break, "Prelude_break", 1, -1, args... )
    return( root )
}

func Prelude_reverseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_reverse, "Prelude_reverse", 0, -1, args... )
    return( root )
}

func Prelude_andCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_and, "Prelude_and", 0, -1, args... )
    return( root )
}

func Prelude_orCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_or, "Prelude_or", 0, -1, args... )
    return( root )
}

func Prelude_anyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_any, "Prelude_any", 1, -1, args... )
    return( root )
}

func Prelude_allCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_all, "Prelude_all", 1, -1, args... )
    return( root )
}

func Prelude_elemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_elem, "Prelude_elem", 2, -1, args... )
    return( root )
}

func Prelude_notElemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_notElem, "Prelude_notElem", 2, -1, args... )
    return( root )
}

func Prelude_lookupCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup, "Prelude_lookup", 3, 2, args... )
    return( root )
}

func Prelude_lookup_CASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_CASE0, "Prelude_lookup_CASE0", 4, 0, args... )
    return( root )
}

func Prelude_lookup_COMPLEXCASE1Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_COMPLEXCASE1, "Prelude_lookup_COMPLEXCASE1", 5, 4, args... )
    return( root )
}

func Prelude_lookup_COMPLEXCASE2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_lookup_COMPLEXCASE2, "Prelude_lookup_COMPLEXCASE2", 4, 3, args... )
    return( root )
}

func Prelude_maybeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_maybe, "Prelude_maybe", 3, 2, args... )
    return( root )
}

func Prelude_eitherCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_either, "Prelude_either", 3, 2, args... )
    return( root )
}

func Prelude_bindIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_bindIO, "Prelude_bindIO", 2, -1, args... )
    return( root )
}

func Prelude_seqIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_seqIO, "Prelude_seqIO", 2, -1, args... )
    return( root )
}

func Prelude_returnIOCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_returnIO, "Prelude_returnIO", 1, -1, args... )
    return( root )
}

func Prelude_getCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getChar, "Prelude_getChar", 0, -1, args... )
    return( root )
}

func Prelude_getLineCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine, "Prelude_getLine", 0, -1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda458Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda458, "Prelude_getLine__Hashlambda458", 1, -1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda458_COMPLEXCASE0Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda458_COMPLEXCASE0, "Prelude_getLine__Hashlambda458_COMPLEXCASE0", 2, 1, args... )
    return( root )
}

func Prelude_getLine__Hashlambda458__Hashlambda462Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_getLine__Hashlambda458__Hashlambda462, "Prelude_getLine__Hashlambda458__Hashlambda462", 2, -1, args... )
    return( root )
}

func Prelude_putCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putChar, "Prelude_putChar", 1, -1, args... )
    return( root )
}

func Prelude_prim_putCharCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_putChar, "Prelude_prim_putChar", 1, -1, args... )
    return( root )
}

func Prelude_putStrCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putStr, "Prelude_putStr", 1, 0, args... )
    return( root )
}

func Prelude_putStrLnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_putStrLn, "Prelude_putStrLn", 1, -1, args... )
    return( root )
}

func Prelude_printCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_print, "Prelude_print", 1, -1, args... )
    return( root )
}

func Prelude_readFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readFile, "Prelude_readFile", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFile, "Prelude_prim_readFile", 1, -1, args... )
    return( root )
}

func Prelude_prim_readFileContentsCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_readFileContents, "Prelude_prim_readFileContents", 1, -1, args... )
    return( root )
}

func Prelude_writeFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_writeFile, "Prelude_writeFile", 2, -1, args... )
    return( root )
}

func Prelude_prim_writeFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_writeFile, "Prelude_prim_writeFile", 2, -1, args... )
    return( root )
}

func Prelude_appendFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_appendFile, "Prelude_appendFile", 2, -1, args... )
    return( root )
}

func Prelude_prim_appendFileCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_appendFile, "Prelude_prim_appendFile", 2, -1, args... )
    return( root )
}

func Prelude_userErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_userError, "Prelude_userError", 0, -1, args... )
    return( root )
}

func Prelude_ioErrorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ioError, "Prelude_ioError", 1, -1, args... )
    return( root )
}

func Prelude_catchCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_catch, "Prelude_catch", 2, -1, args... )
    return( root )
}

func Prelude_successCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_success, "Prelude_success", 0, -1, args... )
    return( root )
}

func Prelude_solveCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_solve, "Prelude_solve", 1, 0, args... )
    return( root )
}

func Prelude_doSolveCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_doSolve, "Prelude_doSolve", 1, 0, args... )
    return( root )
}

func Prelude_EqColEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColEq, "Prelude_EqColEq", 2, -1, args... )
    return( root )
}

func Prelude_EqColLtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColLtEq, "Prelude_EqColLtEq", 2, -1, args... )
    return( root )
}

func Prelude_EqColLtLtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqColLtLtEq, "Prelude_EqColLtLtEq", 3, -1, args... )
    return( root )
}

func Prelude_unifEqLinearCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unifEqLinear, "Prelude_unifEqLinear", 2, -1, args... )
    return( root )
}

func Prelude_ifVarCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ifVar, "Prelude_ifVar", 3, -1, args... )
    return( root )
}

func Prelude_AndCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_And, "Prelude_And", 2, -1, args... )
    return( root )
}

func Prelude_AndGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_AndGt, "Prelude_AndGt", 2, 0, args... )
    return( root )
}

func Prelude_QstnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Qstn, "Prelude_Qstn", 2, -1, args... )
    return( root )
}

func Prelude_anyOfCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_anyOf, "Prelude_anyOf", 0, -1, args... )
    return( root )
}

func Prelude_unknownCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_unknown, "Prelude_unknown", 1, -1, args... )
    return( root )
}

func Prelude_failedCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_failed, "Prelude_failed", 0, -1, args... )
    return( root )
}

func Prelude_errorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_error, "Prelude_error", 1, -1, args... )
    return( root )
}

func Prelude_prim_errorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_prim_error, "Prelude_prim_error", 1, -1, args... )
    return( root )
}

func Prelude_applyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_apply, "Prelude_apply", 2, -1, args... )
    return( root )
}

func Prelude_condCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_cond, "Prelude_cond", 2, -1, args... )
    return( root )
}

func Prelude_letrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_letrec, "Prelude_letrec", 2, -1, args... )
    return( root )
}

func Prelude_failureCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_failure, "Prelude_failure", 2, -1, args... )
    return( root )
}

func Prelude_EqEqEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqEqEq, "Prelude_EqEqEq", 1, 0, args... )
    return( root )
}

func Prelude_aValueCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_aValue, "Prelude_aValue", 1, 0, args... )
    return( root )
}

func Prelude_EqEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_EqEq, "Prelude_EqEq", 1, 0, args... )
    return( root )
}

func Prelude_SlashEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_SlashEq, "Prelude_SlashEq", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_OrdHashPrelude_EqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_OrdHashPrelude_Eq, "Prelude__superHashPrelude_OrdHashPrelude_Eq", 1, 0, args... )
    return( root )
}

func Prelude_compareCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_compare, "Prelude_compare", 1, 0, args... )
    return( root )
}

func Prelude_LtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Lt, "Prelude_Lt", 1, 0, args... )
    return( root )
}

func Prelude_GtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Gt, "Prelude_Gt", 1, 0, args... )
    return( root )
}

func Prelude_LtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtEq, "Prelude_LtEq", 1, 0, args... )
    return( root )
}

func Prelude_GtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtEq, "Prelude_GtEq", 1, 0, args... )
    return( root )
}

func Prelude_minCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_min, "Prelude_min", 1, 0, args... )
    return( root )
}

func Prelude_maxCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_max, "Prelude_max", 1, 0, args... )
    return( root )
}

func Prelude_showCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_show, "Prelude_show", 1, 0, args... )
    return( root )
}

func Prelude_showsPrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showsPrec, "Prelude_showsPrec", 1, 0, args... )
    return( root )
}

func Prelude_showListCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_showList, "Prelude_showList", 1, 0, args... )
    return( root )
}

func Prelude_readsPrecCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readsPrec, "Prelude_readsPrec", 1, 0, args... )
    return( root )
}

func Prelude_readListCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_readList, "Prelude_readList", 1, 0, args... )
    return( root )
}

func Prelude_minBoundCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_minBound, "Prelude_minBound", 1, 0, args... )
    return( root )
}

func Prelude_maxBoundCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_maxBound, "Prelude_maxBound", 1, 0, args... )
    return( root )
}

func Prelude_succCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_succ, "Prelude_succ", 1, 0, args... )
    return( root )
}

func Prelude_predCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_pred, "Prelude_pred", 1, 0, args... )
    return( root )
}

func Prelude_toEnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_toEnum, "Prelude_toEnum", 1, 0, args... )
    return( root )
}

func Prelude_fromEnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromEnum, "Prelude_fromEnum", 1, 0, args... )
    return( root )
}

func Prelude_enumFromCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFrom, "Prelude_enumFrom", 1, 0, args... )
    return( root )
}

func Prelude_enumFromThenCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThen, "Prelude_enumFromThen", 1, 0, args... )
    return( root )
}

func Prelude_enumFromToCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromTo, "Prelude_enumFromTo", 1, 0, args... )
    return( root )
}

func Prelude_enumFromThenToCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_enumFromThenTo, "Prelude_enumFromThenTo", 1, 0, args... )
    return( root )
}

func Prelude_AddCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Add, "Prelude_Add", 1, 0, args... )
    return( root )
}

func Prelude_SubCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Sub, "Prelude_Sub", 1, 0, args... )
    return( root )
}

func Prelude_MulCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Mul, "Prelude_Mul", 1, 0, args... )
    return( root )
}

func Prelude_negateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_negate, "Prelude_negate", 1, 0, args... )
    return( root )
}

func Prelude_absCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_abs, "Prelude_abs", 1, 0, args... )
    return( root )
}

func Prelude_signumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_signum, "Prelude_signum", 1, 0, args... )
    return( root )
}

func Prelude_fromIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromInt, "Prelude_fromInt", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_FractionalHashPrelude_Num, "Prelude__superHashPrelude_FractionalHashPrelude_Num", 1, 0, args... )
    return( root )
}

func Prelude_SlashCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_Slash, "Prelude_Slash", 1, 0, args... )
    return( root )
}

func Prelude_recipCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_recip, "Prelude_recip", 1, 0, args... )
    return( root )
}

func Prelude_fromFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fromFloat, "Prelude_fromFloat", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealHashPrelude_NumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealHashPrelude_Num, "Prelude__superHashPrelude_RealHashPrelude_Num", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealHashPrelude_OrdCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealHashPrelude_Ord, "Prelude__superHashPrelude_RealHashPrelude_Ord", 1, 0, args... )
    return( root )
}

func Prelude_toFloatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_toFloat, "Prelude_toFloat", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_IntegralHashPrelude_EnumCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_IntegralHashPrelude_Enum, "Prelude__superHashPrelude_IntegralHashPrelude_Enum", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_IntegralHashPrelude_Real, "Prelude__superHashPrelude_IntegralHashPrelude_Real", 1, 0, args... )
    return( root )
}

func Prelude_divCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_div, "Prelude_div", 1, 0, args... )
    return( root )
}

func Prelude_modCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mod, "Prelude_mod", 1, 0, args... )
    return( root )
}

func Prelude_quotCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quot, "Prelude_quot", 1, 0, args... )
    return( root )
}

func Prelude_remCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_rem, "Prelude_rem", 1, 0, args... )
    return( root )
}

func Prelude_divModCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_divMod, "Prelude_divMod", 1, 0, args... )
    return( root )
}

func Prelude_quotRemCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_quotRem, "Prelude_quotRem", 1, 0, args... )
    return( root )
}

func Prelude_toIntCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_toInt, "Prelude_toInt", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealFracHashPrelude_Fractional, "Prelude__superHashPrelude_RealFracHashPrelude_Fractional", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_RealFracHashPrelude_RealCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_RealFracHashPrelude_Real, "Prelude__superHashPrelude_RealFracHashPrelude_Real", 1, 0, args... )
    return( root )
}

func Prelude_properFractionCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_properFraction, "Prelude_properFraction", 1, 0, args... )
    return( root )
}

func Prelude_truncateCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_truncate, "Prelude_truncate", 1, 0, args... )
    return( root )
}

func Prelude_roundCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_round, "Prelude_round", 1, 0, args... )
    return( root )
}

func Prelude_ceilingCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_ceiling, "Prelude_ceiling", 1, 0, args... )
    return( root )
}

func Prelude_floorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_floor, "Prelude_floor", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_FloatingHashPrelude_Fractional, "Prelude__superHashPrelude_FloatingHashPrelude_Fractional", 1, 0, args... )
    return( root )
}

func Prelude_piCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_pi, "Prelude_pi", 1, 0, args... )
    return( root )
}

func Prelude_expCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_exp, "Prelude_exp", 1, 0, args... )
    return( root )
}

func Prelude_logCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_log, "Prelude_log", 1, 0, args... )
    return( root )
}

func Prelude_sqrtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sqrt, "Prelude_sqrt", 1, 0, args... )
    return( root )
}

func Prelude_MulMulCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_MulMul, "Prelude_MulMul", 1, 0, args... )
    return( root )
}

func Prelude_logBaseCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_logBase, "Prelude_logBase", 1, 0, args... )
    return( root )
}

func Prelude_sinCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sin, "Prelude_sin", 1, 0, args... )
    return( root )
}

func Prelude_cosCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_cos, "Prelude_cos", 1, 0, args... )
    return( root )
}

func Prelude_tanCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tan, "Prelude_tan", 1, 0, args... )
    return( root )
}

func Prelude_asinCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asin, "Prelude_asin", 1, 0, args... )
    return( root )
}

func Prelude_acosCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_acos, "Prelude_acos", 1, 0, args... )
    return( root )
}

func Prelude_atanCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_atan, "Prelude_atan", 1, 0, args... )
    return( root )
}

func Prelude_sinhCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_sinh, "Prelude_sinh", 1, 0, args... )
    return( root )
}

func Prelude_coshCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_cosh, "Prelude_cosh", 1, 0, args... )
    return( root )
}

func Prelude_tanhCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_tanh, "Prelude_tanh", 1, 0, args... )
    return( root )
}

func Prelude_asinhCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_asinh, "Prelude_asinh", 1, 0, args... )
    return( root )
}

func Prelude_acoshCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_acosh, "Prelude_acosh", 1, 0, args... )
    return( root )
}

func Prelude_atanhCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_atanh, "Prelude_atanh", 1, 0, args... )
    return( root )
}

func Prelude_memptyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mempty, "Prelude_mempty", 1, 0, args... )
    return( root )
}

func Prelude_mappendCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mappend, "Prelude_mappend", 1, 0, args... )
    return( root )
}

func Prelude_mconcatCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_mconcat, "Prelude_mconcat", 1, 0, args... )
    return( root )
}

func Prelude_fmapCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fmap, "Prelude_fmap", 1, 0, args... )
    return( root )
}

func Prelude_LtDolCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtDol, "Prelude_LtDol", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_ApplicativeHashPrelude_FunctorCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_ApplicativeHashPrelude_Functor, "Prelude__superHashPrelude_ApplicativeHashPrelude_Functor", 1, 0, args... )
    return( root )
}

func Prelude_pureCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_pure, "Prelude_pure", 1, 0, args... )
    return( root )
}

func Prelude_LtMulGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtMulGt, "Prelude_LtMulGt", 1, 0, args... )
    return( root )
}

func Prelude_MulGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_MulGt, "Prelude_MulGt", 1, 0, args... )
    return( root )
}

func Prelude_LtMulCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtMul, "Prelude_LtMul", 1, 0, args... )
    return( root )
}

func Prelude_liftA2Create( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_liftA2, "Prelude_liftA2", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_AlternativeHashPrelude_Applicative, "Prelude__superHashPrelude_AlternativeHashPrelude_Applicative", 1, 0, args... )
    return( root )
}

func Prelude_emptyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_empty, "Prelude_empty", 1, 0, args... )
    return( root )
}

func Prelude_LtStrtGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_LtStrtGt, "Prelude_LtStrtGt", 1, 0, args... )
    return( root )
}

func Prelude_someCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_some, "Prelude_some", 1, 0, args... )
    return( root )
}

func Prelude_manyCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_many, "Prelude_many", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_MonadHashPrelude_ApplicativeCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_MonadHashPrelude_Applicative, "Prelude__superHashPrelude_MonadHashPrelude_Applicative", 1, 0, args... )
    return( root )
}

func Prelude_GtGtEqCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGtEq, "Prelude_GtGtEq", 1, 0, args... )
    return( root )
}

func Prelude_GtGtCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_GtGt, "Prelude_GtGt", 1, 0, args... )
    return( root )
}

func Prelude_returnCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_return, "Prelude_return", 1, 0, args... )
    return( root )
}

func Prelude__superHashPrelude_MonadFailHashPrelude_MonadCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude__superHashPrelude_MonadFailHashPrelude_Monad, "Prelude__superHashPrelude_MonadFailHashPrelude_Monad", 1, 0, args... )
    return( root )
}

func Prelude_failCreate( root *Node, args ...*Node )( *Node ){
    FuncCreate( root, Prelude_fail, "Prelude_fail", 1, 0, args... )
    return( root )
}

func Prelude__defHashEqEqEqHashPrelude_Data( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashaValueHashPrelude_Data( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 86 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( root )
    return
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashaValueHashPrelude_DataHashPrelude_Char_FREE0Create( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Char_FREE0( task *Task )(  ){
    root := task.GetControl(  )
    x2 := FreeCreate( new( Node ) )
    RedirectCreate( root, x2 )
    return
}

func Prelude__instHashPrelude_DataHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IntCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( root )
    return
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashaValueHashPrelude_DataHashPrelude_Int_FREE0Create( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Int_FREE0( task *Task )(  ){
    root := task.GetControl(  )
    x2 := FreeCreate( new( Node ) )
    RedirectCreate( root, x2 )
    return
}

func Prelude__instHashPrelude_DataHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( root )
    return
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashaValueHashPrelude_DataHashPrelude_Float_FREE0Create( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Float_FREE0( task *Task )(  ){
    root := task.GetControl(  )
    x2 := FreeCreate( new( Node ) )
    RedirectCreate( root, x2 )
    return
}

func Prelude__instHashPrelude_DataHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE0Create( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE1Create( root, x3, x6, x1, x7 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x1 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x6 ), x8 ), Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( new( Node ), x1, x7, x9 ) )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), x1, Prelude_LbRbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbRbCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashEqEqEqHashPrelude_DataHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x3 ), x8 ), x11 ) ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x8 ), x12 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x3 ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x4 ), x10 ), x14 ) ) ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x3 ), x10 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x4 ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x5 ), x12 ), x17 ) ) ) ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    x8 = root.Children[ 7 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            x11 = x7.Children[ 2 ]
            x12 = x7.Children[ 3 ]
            x13 = x7.Children[ 4 ]
            x14 = x7.Children[ 5 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb_CASE0Create( root, x8, x1, x9, x2, x10, x3, x11, x4, x12, x5, x13, x6, x14 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x9 *Node
    var x2 *Node
    var x10 *Node
    var x3 *Node
    var x11 *Node
    var x4 *Node
    var x12 *Node
    var x5 *Node
    var x13 *Node
    var x6 *Node
    var x14 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x9 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x11 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x12 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x13 = root.Children[ 10 ]
    x6 = root.Children[ 11 ]
    x14 = root.Children[ 12 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, Prelude_LbCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x15 *Node
            var x16 *Node
            var x17 *Node
            var x18 *Node
            var x19 *Node
            var x20 *Node
            x15 = x8.Children[ 0 ]
            x16 = x8.Children[ 1 ]
            x17 = x8.Children[ 2 ]
            x18 = x8.Children[ 3 ]
            x19 = x8.Children[ 4 ]
            x20 = x8.Children[ 5 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x9 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x10 ), x16 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x3 ), x11 ), x17 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x4 ), x12 ), x18 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x5 ), x13 ), x19 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x6 ), x14 ), x20 ) ) ) ) ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x6 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6, x7 ), Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5, x6, x7 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    x8 = root.Children[ 7 ]
    x9 = root.Children[ 8 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x10 *Node
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            x12 = x8.Children[ 2 ]
            x13 = x8.Children[ 3 ]
            x14 = x8.Children[ 4 ]
            x15 = x8.Children[ 5 ]
            x16 = x8.Children[ 6 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb_CASE0Create( root, x9, x1, x10, x2, x11, x3, x12, x4, x13, x5, x14, x6, x15, x7, x16 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x10 *Node
    var x2 *Node
    var x11 *Node
    var x3 *Node
    var x12 *Node
    var x4 *Node
    var x13 *Node
    var x5 *Node
    var x14 *Node
    var x6 *Node
    var x15 *Node
    var x7 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x10 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x11 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x13 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x14 = root.Children[ 10 ]
    x6 = root.Children[ 11 ]
    x15 = root.Children[ 12 ]
    x7 = root.Children[ 13 ]
    x16 = root.Children[ 14 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x17 *Node
            var x18 *Node
            var x19 *Node
            var x20 *Node
            var x21 *Node
            var x22 *Node
            var x23 *Node
            x17 = x9.Children[ 0 ]
            x18 = x9.Children[ 1 ]
            x19 = x9.Children[ 2 ]
            x20 = x9.Children[ 3 ]
            x21 = x9.Children[ 4 ]
            x22 = x9.Children[ 5 ]
            x23 = x9.Children[ 6 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x10 ), x17 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x11 ), x18 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x3 ), x12 ), x19 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x4 ), x13 ), x20 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x5 ), x14 ), x21 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x6 ), x15 ), x22 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x7 ), x16 ), x23 ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashLbCommaCommaCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    x8 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x6 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x7 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__defHashEqEqHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashSlashEqHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqCharCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_eqFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbRbCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x8 ), x11 ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x8 ), x12 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x10 ), x14 ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x3 ), x10 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x4 ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x5 ), x12 ), x17 ) ) ) ) )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0Create( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1Create( root, x3, x6, x1, x7 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x1 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x6 ), x8 ), Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), x1, x7, x9 ) )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashLSbRSb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Bool_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1Create( root, x2 )
            return
        case 2:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Ordering_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashcompareHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x2 ), x3 ) )
    return
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1Create( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
            return
        case 1:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    x4 = root.Children[ 0 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_LTCreate( root )
            return
    }
}

func Prelude__defHashcompareHashPrelude_Ord_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__defHashLtHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x2 ), x3 ) )
    return
}

func Prelude__defHashGtHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_notCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashLtEqHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_StrtStrtCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_compareCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_EQCreate( new( Node ) ) ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_OrderingCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_compareCreate( new( Node ), x1 ), x2 ), x3 ), Prelude_LTCreate( new( Node ) ) ) )
    return
}

func Prelude__defHashGtEqHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x3 ), x2 )
    return
}

func Prelude__defHashminHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0Create( root, x3, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1Create( root, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashminHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashmaxHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0Create( root, x3, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_GtEqCreate( new( Node ), x1 ), x2 ), x3 ) )
    return
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1Create( root, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashmaxHashPrelude_Ord_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__instHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqCharCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ltEqFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbRbCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashLbRbCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashminHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x2 ), x6 ), x8 ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x9 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x7 ), x10 ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x9 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x3 ), x8 ), x11 ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x8 ), x12 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x8 ), x12 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x3 ), x9 ), x13 ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x7 ), x11 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x8 ), x12 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x4 ), x10 ), x14 ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLbCommaCommaCommaCommaRbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x5 ) ), Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x2 ), x9 ), x14 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x3 ), x10 ), x15 ) ) ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x10 ), x15 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x4 ), x11 ), x16 ) ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x8 ), x13 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), x9 ), x14 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x3 ) ), x10 ), x15 ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x4 ) ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x5 ), x12 ), x17 ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), Prelude__implHashcompareHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashLtHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashGtHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashGtEqHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashminHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashmaxHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0Create( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1Create( root, x3, x6, x1, x7 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x1 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2Create( root, x6, x8, x1, x7, x9, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x8 *Node
    var x1 *Node
    var x7 *Node
    var x9 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x8 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x10 = root.Children[ 5 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3Create( root, x1, x6, x8, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashLSbRSbCreate( root, x1, x7, x9 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x6 *Node
    var x8 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), x1 ), x6 ), x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashLSbRSb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Bool_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashLtHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashGtHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashminHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1Create( root, x2 )
            return
        case 2:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2Create( root, x2 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Ordering_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashshowHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x2 ), Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__defHashshowsPrecHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_showCreate( new( Node ), x1 ), x3 ), x4 )
    return
}

func Prelude__defHashshowListHashPrelude_Show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_showListDefaultCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_showStringCreate( root, Prelude_showCharLiteralCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_nullCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Char_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_showStringLiteralCreate( new( Node ), x1 ) )
            return
    }
}

func Prelude__instHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_showSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ) ), Prelude_showIntLiteralCreate( new( Node ) ) ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_showSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ) ), Prelude_showFloatLiteralCreate( new( Node ) ) ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbRbCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbRbCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x5 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x5.Children[ 0 ]
            x7 = x5.Children[ 1 ]
            x8 = x5.Children[ 2 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x6 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x7 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x8 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            x9 = x6.Children[ 2 ]
            x10 = x6.Children[ 3 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x7 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x8 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x9 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x4 ), x10 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x7 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            x10 = x7.Children[ 2 ]
            x11 = x7.Children[ 3 ]
            x12 = x7.Children[ 4 ]
            Prelude_showTupleCreate( root, Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x8 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x9 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x3 ), x10 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x4 ), x11 ), Prelude_ColCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x5 ), x12 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashshowListHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_showListCreate( root, x1 )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 76 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
        case 1:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 81 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
        case 2:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 71 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 84 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashreadsPrecHashPrelude_Read( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 80 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashreadListHashPrelude_Read( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readListDefaultCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE1Create( root, x4, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ), CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readCharLiteralCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Char__Hashlambda1__Hashlambda4__Hashlambda8_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10Create( new( Node ) ) ), x1 ), Prelude_applyCreate( new( Node ), Prelude_readListDefaultCreate( new( Node ), Prelude__instHashPrelude_ReadHashPrelude_CharCreate( new( Node ) ) ), x1 ) )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE1Create( root, x4, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ), CharLitCreate( new( Node ), 34 ) ) )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readStringLiteralCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Char__Hashlambda10__Hashlambda13__Hashlambda17_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__instHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexDigitsCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readNatLiteralCreate( new( Node ), x3 ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Int__Hashlambda19__Hashlambda22__Hashlambda26_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readSignedCreate( root, Prelude__instHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_allCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ) ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_readFloatLiteralCreate( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062__Hashlambda30Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readNatLiteralCreate( new( Node ), x1 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062__Hashlambda30( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE0Create( new( Node ), x4, x3, Prelude_notCreate( new( Node ), Prelude_nullCreate( new( Node ), x3 ) ) ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE1Create( root, x4, x3, Prelude_isDigitCreate( new( Node ), Prelude_headCreate( new( Node ), x3 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float_readFloat_1062Create( new( Node ), x3 ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Float__Hashlambda32__Hashlambda35__Hashlambda39_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRbCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41Create( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbRb__Hashlambda41__Hashlambda44__Hashlambda48_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50Create( new( Node ), x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x2 ), x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x2 ), x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0Create( root, x5, x2, x1, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1Create( root, x8, x2, x1, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2Create( root, x8, x2, x1, x6, x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaRb__Hashlambda50__Hashlambda53__Hashlambda57__Hashlambda61__Hashlambda65__Hashlambda69_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x2 *Node
    var x1 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaRbCreate( new( Node ), x2, x1 ), x6 ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71Create( new( Node ), x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0Create( root, x6, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1Create( root, x9, x1, x2, x3, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2Create( root, x9, x1, x2, x3, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x3 ), x7 ) ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98Create( new( Node ), x5, x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) ), x4 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0Create( root, x6, x3, x2, x1, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    x6 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1Create( root, x9, x3, x2, x1, x7, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    var x12 *Node
    x9 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x12 = root.Children[ 6 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2Create( root, x9, x3, x2, x1, x7, x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaRb__Hashlambda71__Hashlambda74__Hashlambda78__Hashlambda82__Hashlambda86__Hashlambda90__Hashlambda94__Hashlambda98_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x7 *Node
    var x5 *Node
    x9 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaRbCreate( new( Node ), x3, x2, x1 ), x7 ), x5 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100Create( new( Node ), x4, x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x5 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0Create( root, x7, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1Create( root, x10, x1, x2, x3, x4, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2Create( root, x10, x1, x2, x3, x4, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131Create( new( Node ), x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x4 ), x8 ) ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135Create( new( Node ), x6, x1, x2, x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x7 ) ), x5 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0Create( root, x7, x4, x3, x2, x1, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    x7 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x7.Children[ 0 ]
            x10 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1Create( root, x10, x4, x3, x2, x1, x8, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    var x13 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    x13 = root.Children[ 7 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x6 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2Create( root, x10, x4, x3, x2, x1, x8, x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaRb__Hashlambda100__Hashlambda103__Hashlambda107__Hashlambda111__Hashlambda115__Hashlambda119__Hashlambda123__Hashlambda127__Hashlambda131__Hashlambda135_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x8 *Node
    var x6 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x1 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    x6 = root.Children[ 6 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaCommaRbCreate( new( Node ), x4, x3, x2, x1 ), x8 ), x6 )
            return
        case 1:
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137Create( new( Node ), x5, x4, x3, x2, x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140Create( new( Node ), x1, x2, x3, x4, x5 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x6 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0Create( root, x8, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1Create( root, x11, x1, x2, x3, x4, x5, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2Create( root, x11, x1, x2, x3, x4, x5, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x5 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176Create( new( Node ), x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x5 ), x9 ) ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180Create( new( Node ), x7, x1, x2, x3, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x8 ) ), x6 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0Create( root, x8, x5, x4, x3, x2, x1, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    x8 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x8.Children[ 0 ]
            x11 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1Create( root, x11, x5, x4, x3, x2, x1, x9, x7, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    var x14 *Node
    x11 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    x14 = root.Children[ 8 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2Create( root, x11, x5, x4, x3, x2, x1, x9, x7 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLbCommaCommaCommaCommaRb__Hashlambda137__Hashlambda140__Hashlambda144__Hashlambda148__Hashlambda152__Hashlambda156__Hashlambda160__Hashlambda164__Hashlambda168__Hashlambda172__Hashlambda176__Hashlambda180_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x5 *Node
    var x4 *Node
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x9 *Node
    var x7 *Node
    x11 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x2 = root.Children[ 4 ]
    x1 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x7 = root.Children[ 7 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), x5, x4, x3, x2, x1 ), x9 ), x7 )
            return
        case 1:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ), Prelude__implHashreadListHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readListCreate( root, x1 )
    return
}

func Prelude__implHashreadListHashPrelude_ReadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashLSbRSbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182Create( new( Node ) ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187Create( new( Node ) ) ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 70 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 97 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 108 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 115 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x17 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x17 = root.Children[ 3 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda182__Hashlambda185_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 114 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 117 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x15 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Bool__Hashlambda187__Hashlambda190_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_TrueCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192Create( new( Node ) ) ), x2 ), Prelude_AddAddCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197Create( new( Node ) ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202Create( new( Node ) ) ), x2 ) ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 76 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda192__Hashlambda195_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LTCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 69 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 81 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda197__Hashlambda200_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_EQCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 71 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 84 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x11 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Ordering__Hashlambda202__Hashlambda205_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_GTCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashminBoundHashPrelude_Bounded( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashmaxBoundHashPrelude_Bounded( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 66 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_chrCreate( root, IntLitCreate( new( Node ), 0 ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_chrCreate( root, IntLitCreate( new( Node ), 1114111 ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbRbCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_minBoundCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_maxBoundCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__instHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashBoundedCreate( root, Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LTCreate( root )
            return
    }
}

func Prelude__defHashsuccHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__Create( new( Node ), Prelude_flipCreate( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 1 ) ), Prelude_fromEnumCreate( new( Node ), x1 ) ) )
    return
}

func Prelude__defHashpredHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__Create( new( Node ), Prelude__defHashpredHashPrelude_Enum__Hashlambda207Create( new( Node ) ), Prelude_fromEnumCreate( new( Node ), x1 ) ) )
    return
}

func Prelude__defHashpredHashPrelude_Enum__Hashlambda207( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__defHashtoEnumHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashfromEnumHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashenumFromHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude__defHashenumFromThenHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ) ) )
    return
}

func Prelude__defHashenumFromToHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ) ) )
    return
}

func Prelude__defHashenumFromThenToHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_mapCreate( root, Prelude_toEnumCreate( new( Node ), x1 ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_fromEnumCreate( new( Node ), x1 ), x4 ) ) )
    return
}

func Prelude__instHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ) ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_chrCreate( new( Node ) ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude_ordCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ) ) ) )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_chrCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude_ordCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_chrCreate( root )
    return
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_ordCreate( root )
    return
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x2 ), x1 ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1Create( root, x1, x2, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), x1 ), x2 ), Prelude__implHashmaxBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Char_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ), x1 ), x2 ), Prelude__implHashminBoundHashPrelude_BoundedHashPrelude_CharCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Char( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_CharCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, x1, IntLitCreate( new( Node ), 1 ) )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude__implHashenumFromHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_iterateCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x2, x1 ) ), x1 )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE0Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), x2 ) )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE1Create( root, x1, x2, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Int_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, x1, Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_IntCreate( new( Node ), Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x2 ) )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_takeWhileCreate( root, Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219Create( new( Node ), x1, x2, x3 ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_IntCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE0Create( root, x4, x3, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x2 ), x1 ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE1Create( root, x4, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( root, x4, x3 )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Int_p_1219_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x4 ), x3 )
            return
    }
}

func Prelude__instHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashLbRbCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    ExemptCreate( root )
    return
}

func Prelude__implHashpredHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    ExemptCreate( root )
    return
}

func Prelude__implHashtoEnumHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetInt(  ){
        case 0:
            Prelude_LbRbCreate( root )
            return
        default:
            ExemptCreate( root )
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbRbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1Create( root )
            return
    }
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashLbRb_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = Prelude_ColCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x3 )
    x3.SetChild( 1, x3 )
    RedirectCreate( root, x3 )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0Create( root, x2 )
            return
    }
}

func Prelude__implHashenumFromToHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbRbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1Create( root, x3 )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2Create( root )
            return
    }
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashLbRb_LET2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    x4 = Prelude_ColCreate( new( Node ), Prelude_LbRbCreate( new( Node ) ), x4 )
    x4.SetChild( 1, x4 )
    RedirectCreate( root, x4 )
    return
}

func Prelude__instHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            ExemptCreate( root )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetInt(  ){
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        default:
            ExemptCreate( root )
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), x1 ), Prelude_TrueCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ), x1 ), x2 ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_BoolCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEnumCreate( root, Prelude__implHashsuccHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashpredHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashsuccHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_EQCreate( root )
            return
        case 1:
            Prelude_GTCreate( root )
            return
        case 2:
            ExemptCreate( root )
            return
    }
}

func Prelude__implHashpredHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_LTCreate( root )
            return
        case 2:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__implHashtoEnumHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetInt(  ){
        case 0:
            Prelude_LTCreate( root )
            return
        case 1:
            Prelude_EQCreate( root )
            return
        case 2:
            Prelude_GTCreate( root )
            return
        default:
            ExemptCreate( root )
    }
}

func Prelude__implHashfromEnumHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
        case 2:
            IntLitCreate( root, 2 )
            return
    }
}

func Prelude__implHashenumFromHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), x1 ), Prelude_GTCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ), x1 ), x2 ), Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0Create( new( Node ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_OrderingCreate( new( Node ), x1, x2 ) ) )
    return
}

func Prelude__implHashenumFromThenHashPrelude_EnumHashPrelude_Ordering_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LTCreate( root )
            return
        case 1:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__implHashenumFromToHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashenumFromThenToHashPrelude_EnumHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashenumFromThenToHashPrelude_EnumCreate( root, Prelude__instHashPrelude_EnumHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashAddHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashSubHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_AddCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), x1 ), x3 ) )
    return
}

func Prelude__defHashMulHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 42 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashnegateHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SubCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) ) ), x2 )
    return
}

func Prelude__defHashabsHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashsignumHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashfromIntHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 73 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashNumCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashMulHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashabsHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashsignumHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__implHashfromIntHashPrelude_NumHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_plusIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_minusIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_timesIntCreate( root, x1, x2 )
    return
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 0 ), x1 )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x1 )
            return
    }
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Int_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root, x1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
            return
        case 1:
            IntLitCreate( root, 1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            IntLitCreate( root, 0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Int_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 1 ) )
            return
    }
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashNumCreate( root, Prelude__implHashAddHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSubHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashMulHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashabsHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashsignumHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashAddHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_plusFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashSubHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_minusFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashMulHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_timesFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashnegateHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_negateFloatCreate( root, x1 )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), x1 ), FloatLitCreate( new( Node ), 0.0 ) ) )
    return
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x1 )
            return
    }
}

func Prelude__implHashabsHashPrelude_NumHashPrelude_Float_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root, x1 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), x1 ), FloatLitCreate( new( Node ), 0.0 ) ) )
    return
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1Create( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_FloatCreate( new( Node ), x1, FloatLitCreate( new( Node ), 0.0 ) ) )
            return
        case 1:
            FloatLitCreate( root, 1.0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            FloatLitCreate( root, 0.0 )
            return
    }
}

func Prelude__implHashsignumHashPrelude_NumHashPrelude_Float_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude__implHashnegateHashPrelude_NumHashPrelude_FloatCreate( root, FloatLitCreate( new( Node ), 1.0 ) )
            return
    }
}

func Prelude__implHashfromIntHashPrelude_NumHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_intToFloatCreate( root, x1 )
    return
}

func Prelude__defHashSlashHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), x1 ) ), x2 ), Prelude_applyCreate( new( Node ), Prelude_recipCreate( new( Node ), x1 ), x3 ) )
    return
}

func Prelude__defHashrecipHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_fromFloatCreate( new( Node ), x1 ), FloatLitCreate( new( Node ), 1.0 ) ) ), x2 )
    return
}

func Prelude__defHashfromFloatHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFractionalCreate( root, Prelude__instHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashSlashHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashrecipHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashSlashHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_divFloatCreate( root, x1, x2 )
    return
}

func Prelude__implHashrecipHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashrecipHashPrelude_FractionalCreate( root, Prelude__instHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashfromFloatHashPrelude_FractionalHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashtoFloatHashPrelude_Real( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_RealHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashRealCreate( root, Prelude__instHashPrelude_NumHashPrelude_IntCreate( new( Node ) ), Prelude__instHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), Prelude__implHashtoFloatHashPrelude_RealHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__implHashfromIntHashPrelude_NumHashPrelude_FloatCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_RealHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashRealCreate( root, Prelude__instHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ), Prelude__instHashPrelude_OrdHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashtoFloatHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashtoFloatHashPrelude_RealHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashdivHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_divModCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashdivHashPrelude_Integral__HashselFP2HashqCreate( root, x4 )
    return
}

func Prelude__defHashdivHashPrelude_Integral__HashselFP2Hashq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashmodHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_divModCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashmodHashPrelude_Integral__HashselFP4HashrCreate( root, x4 )
    return
}

func Prelude__defHashmodHashPrelude_Integral__HashselFP4Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashquotHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotRemCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashquotHashPrelude_Integral__HashselFP6HashqCreate( root, x4 )
    return
}

func Prelude__defHashquotHashPrelude_Integral__HashselFP6Hashq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashremHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotRemCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashremHashPrelude_Integral__HashselFP8HashrCreate( root, x4 )
    return
}

func Prelude__defHashremHashPrelude_Integral__HashselFP8Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashdivModHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 118 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 77 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashquotRemHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 113 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 82 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashtoIntHashPrelude_Integral( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 73 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashIntegralCreate( root, Prelude__instHashPrelude_EnumHashPrelude_IntCreate( new( Node ) ), Prelude__instHashPrelude_RealHashPrelude_IntCreate( new( Node ) ), Prelude__implHashdivHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashmodHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashquotHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashremHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashdivModHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ), Prelude__implHashtoIntHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashdivHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashdivHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashmodHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmodHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashquotHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashquotHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashremHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashremHashPrelude_IntegralCreate( root, Prelude__instHashPrelude_IntegralHashPrelude_IntCreate( new( Node ) ) )
    return
}

func Prelude__implHashdivModHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_divIntCreate( new( Node ), x1, x2 ), Prelude_modIntCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashquotRemHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_LbCommaRbCreate( root, Prelude_quotIntCreate( new( Node ), x1, x2 ), Prelude_remIntCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashtoIntHashPrelude_IntegralHashPrelude_Int( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashproperFractionHashPrelude_RealFrac( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 70 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashtruncateHashPrelude_RealFrac( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_properFractionCreate( new( Node ), x1 ), x2 ), x3 )
    Prelude__defHashtruncateHashPrelude_RealFrac__HashselFP10HashmCreate( root, x4 )
    return
}

func Prelude__defHashtruncateHashPrelude_RealFrac__HashselFP10Hashm( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashroundHashPrelude_RealFrac( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_properFractionCreate( new( Node ), x1 ), x2 ), x3 )
    x5 = Prelude__defHashroundHashPrelude_RealFrac__HashselFP12HashnCreate( new( Node ), x4 )
    x6 = Prelude__defHashroundHashPrelude_RealFrac__HashselFP13HashrCreate( new( Node ), x4 )
    x7 = Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE0Create( new( Node ), x5, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_RealCreate( new( Node ), x1 ) ) ), x6 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE1Create( root, x2, x5, x7, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_compareCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_RealCreate( new( Node ), x1 ) ) ), Prelude_applyCreate( new( Node ), Prelude_signumCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_SubCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), Prelude_applyCreate( new( Node ), Prelude_absCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), x6 ) ), Prelude_applyCreate( new( Node ), Prelude_fromFloatCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ), FloatLitCreate( new( Node ), 0.5 ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x5 *Node
    var x7 *Node
    var x8 *Node
    x2 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x8 = root.Children[ 3 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE2Create( root, x7, x5, Prelude_evenCreate( new( Node ), x2, x5 ) )
            return
        case 2:
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x5 *Node
    var x8 *Node
    x7 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x7 )
            return
        case 1:
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__defHashroundHashPrelude_RealFrac_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x2 *Node
    var x7 *Node
    x5 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_AddCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), x5 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SubCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), x5 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__defHashroundHashPrelude_RealFrac__HashselFP12Hashn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashroundHashPrelude_RealFrac__HashselFP13Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashceilingHashPrelude_RealFrac( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_properFractionCreate( new( Node ), x1 ), x2 ), x3 )
    x5 = Prelude__defHashceilingHashPrelude_RealFrac__HashselFP15HashnCreate( new( Node ), x4 )
    x6 = Prelude__defHashceilingHashPrelude_RealFrac__HashselFP16HashrCreate( new( Node ), x4 )
    Prelude__defHashceilingHashPrelude_RealFrac_COMPLEXCASE0Create( root, x5, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_GtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_RealCreate( new( Node ), x1 ) ) ), x6 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude__defHashceilingHashPrelude_RealFrac_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x2 *Node
    var x7 *Node
    x5 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_AddCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), x5 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__defHashceilingHashPrelude_RealFrac__HashselFP15Hashn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashceilingHashPrelude_RealFrac__HashselFP16Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__defHashfloorHashPrelude_RealFrac( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_properFractionCreate( new( Node ), x1 ), x2 ), x3 )
    x5 = Prelude__defHashfloorHashPrelude_RealFrac__HashselFP18HashnCreate( new( Node ), x4 )
    x6 = Prelude__defHashfloorHashPrelude_RealFrac__HashselFP19HashrCreate( new( Node ), x4 )
    Prelude__defHashfloorHashPrelude_RealFrac_COMPLEXCASE0Create( root, x5, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_RealCreate( new( Node ), x1 ) ) ), x6 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_RealFracHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude__defHashfloorHashPrelude_RealFrac_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x2 *Node
    var x7 *Node
    x5 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x5 )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SubCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), x5 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude__defHashfloorHashPrelude_RealFrac__HashselFP18Hashn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__defHashfloorHashPrelude_RealFrac__HashselFP19Hashr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__instHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashRealFracCreate( root, Prelude__instHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__instHashPrelude_RealHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashproperFractionHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashroundHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashceilingHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashfloorHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashproperFractionHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = Prelude_applyCreate( new( Node ), Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ), x1 ), x2 )
    Prelude_LbCommaRbCreate( root, x3, Prelude__implHashSubHashPrelude_NumHashPrelude_FloatCreate( new( Node ), x2, Prelude_applyCreate( new( Node ), Prelude_fromIntegralCreate( new( Node ), x1, Prelude__instHashPrelude_NumHashPrelude_FloatCreate( new( Node ) ) ), x3 ) ) )
    return
}

func Prelude__implHashtruncateHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x1 ) ) ), Prelude_truncateFloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashroundHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x1 ) ) ), Prelude_roundFloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashceilingHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashceilingHashPrelude_RealFracCreate( root, Prelude__instHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), x1 )
    return
}

func Prelude__implHashfloorHashPrelude_RealFracHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashfloorHashPrelude_RealFracCreate( root, Prelude__instHashPrelude_RealFracHashPrelude_FloatCreate( new( Node ) ), x1 )
    return
}

func Prelude__defHashpiHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashexpHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashlogHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashsqrtHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_MulMulCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_fromFloatCreate( new( Node ), Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( new( Node ), x1 ) ), FloatLitCreate( new( Node ), 0.5 ) ) )
    return
}

func Prelude__defHashMulMulHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_expCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), Prelude__superHashPrelude_FractionalHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( new( Node ), x1 ) ) ), Prelude_applyCreate( new( Node ), Prelude_logCreate( new( Node ), x1 ), x2 ) ), x3 ) )
    return
}

func Prelude__defHashlogBaseHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashCreate( new( Node ), Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( new( Node ), x1 ) ), Prelude_applyCreate( new( Node ), Prelude_logCreate( new( Node ), x1 ), x3 ) ), Prelude_applyCreate( new( Node ), Prelude_logCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude__defHashsinHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashcosHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashtanHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashCreate( new( Node ), Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( new( Node ), x1 ) ), Prelude_applyCreate( new( Node ), Prelude_sinCreate( new( Node ), x1 ), x2 ) ), Prelude_applyCreate( new( Node ), Prelude_cosCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude__defHashasinHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashacosHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashatanHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashsinhHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashcoshHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashtanhHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashCreate( new( Node ), Prelude__superHashPrelude_FloatingHashPrelude_FractionalCreate( new( Node ), x1 ) ), Prelude_applyCreate( new( Node ), Prelude_sinhCreate( new( Node ), x1 ), x2 ) ), Prelude_applyCreate( new( Node ), Prelude_coshCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude__defHashasinhHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashacoshHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashatanhHashPrelude_Floating( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFloatingCreate( root, Prelude__instHashPrelude_FractionalHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashpiHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashexpHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashlogHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashsqrtHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashMulMulHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashlogBaseHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashsinHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashcosHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashtanHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashasinHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashacosHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashatanHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashsinhHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashcoshHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashtanhHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashasinhHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashacoshHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ), Prelude__implHashatanhHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashpiHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            FloatLitCreate( root, 3.1415926535897927 )
            return
    }
}

func Prelude__implHashexpHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_expFloatCreate( root )
    return
}

func Prelude__implHashlogHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_logFloatCreate( root )
    return
}

func Prelude__implHashsqrtHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_sqrtFloatCreate( root )
    return
}

func Prelude__implHashMulMulHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashMulMulHashPrelude_FloatingCreate( root, Prelude__instHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashlogBaseHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashlogBaseHashPrelude_FloatingCreate( root, Prelude__instHashPrelude_FloatingHashPrelude_FloatCreate( new( Node ) ) )
    return
}

func Prelude__implHashsinHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_sinFloatCreate( root )
    return
}

func Prelude__implHashcosHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_cosFloatCreate( root )
    return
}

func Prelude__implHashtanHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_tanFloatCreate( root )
    return
}

func Prelude__implHashasinHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_asinFloatCreate( root )
    return
}

func Prelude__implHashacosHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_acosFloatCreate( root )
    return
}

func Prelude__implHashatanHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_atanFloatCreate( root )
    return
}

func Prelude__implHashsinhHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_sinhFloatCreate( root )
    return
}

func Prelude__implHashcoshHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_coshFloatCreate( root )
    return
}

func Prelude__implHashtanhHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_tanhFloatCreate( root )
    return
}

func Prelude__implHashasinhHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_asinhFloatCreate( root )
    return
}

func Prelude__implHashacoshHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_acoshFloatCreate( root )
    return
}

func Prelude__implHashatanhHashPrelude_FloatingHashPrelude_Float( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_atanhFloatCreate( root )
    return
}

func Prelude__defHashmemptyHashPrelude_Monoid( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 121 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashmappendHashPrelude_Monoid( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashmconcatHashPrelude_Monoid( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_mappendCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) )
    return
}

func Prelude__instHashPrelude_MonoidHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbRbCreate( new( Node ) ), Prelude__implHashmappendHashPrelude_MonoidHashLbRbCreate( new( Node ) ), Prelude__implHashmconcatHashPrelude_MonoidHashLbRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbRbCreate( root )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_LbRbCreate( root )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_LbRbCreate( root )
    return
}

func Prelude__instHashPrelude_MonoidHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRbCreate( new( Node ), x1, x2 ), Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb_CASE0Create( root, x4, x1, x5, x2, x6 )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x2 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            x7 = x4.Children[ 0 ]
            x8 = x4.Children[ 1 ]
            Prelude_LbCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), x5 ), x7 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x2 ), x6 ), x8 ) )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaRbCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ), Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            var x8 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            x8 = x4.Children[ 2 ]
            Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb_CASE0Create( root, x5, x1, x6, x2, x7, x3, x8 )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    var x3 *Node
    var x8 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x8 = root.Children[ 6 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            var x10 *Node
            var x11 *Node
            x9 = x5.Children[ 0 ]
            x10 = x5.Children[ 1 ]
            x11 = x5.Children[ 2 ]
            Prelude_LbCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), x6 ), x9 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x2 ), x7 ), x10 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x3 ), x8 ), x11 ) )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaRbCreate( new( Node ), x1, x2, x3 ) )
    return
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ), Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            var x8 *Node
            var x9 *Node
            var x10 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            x9 = x5.Children[ 2 ]
            x10 = x5.Children[ 3 ]
            Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb_CASE0Create( root, x6, x1, x7, x2, x8, x3, x9, x4, x10 )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x1 *Node
    var x7 *Node
    var x2 *Node
    var x8 *Node
    var x3 *Node
    var x9 *Node
    var x4 *Node
    var x10 *Node
    x6 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x9 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x10 = root.Children[ 8 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            var x12 *Node
            var x13 *Node
            var x14 *Node
            x11 = x6.Children[ 0 ]
            x12 = x6.Children[ 1 ]
            x13 = x6.Children[ 2 ]
            x14 = x6.Children[ 3 ]
            Prelude_LbCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), x7 ), x11 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x2 ), x8 ), x12 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x3 ), x9 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x4 ), x10 ), x14 ) )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4 ) )
    return
}

func Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ), Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x3 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x4 ), Prelude_LbRbCreate( new( Node ) ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x5 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    x7 = root.Children[ 6 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            var x9 *Node
            var x10 *Node
            var x11 *Node
            var x12 *Node
            x8 = x6.Children[ 0 ]
            x9 = x6.Children[ 1 ]
            x10 = x6.Children[ 2 ]
            x11 = x6.Children[ 3 ]
            x12 = x6.Children[ 4 ]
            Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb_CASE0Create( root, x7, x1, x8, x2, x9, x3, x10, x4, x11, x5, x12 )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbCommaCommaCommaCommaRb_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x8 *Node
    var x2 *Node
    var x9 *Node
    var x3 *Node
    var x10 *Node
    var x4 *Node
    var x11 *Node
    var x5 *Node
    var x12 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x9 = root.Children[ 4 ]
    x3 = root.Children[ 5 ]
    x10 = root.Children[ 6 ]
    x4 = root.Children[ 7 ]
    x11 = root.Children[ 8 ]
    x5 = root.Children[ 9 ]
    x12 = root.Children[ 10 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, Prelude_LbCommaCommaCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            var x14 *Node
            var x15 *Node
            var x16 *Node
            var x17 *Node
            x13 = x7.Children[ 0 ]
            x14 = x7.Children[ 1 ]
            x15 = x7.Children[ 2 ]
            x16 = x7.Children[ 3 ]
            x17 = x7.Children[ 4 ]
            Prelude_LbCommaCommaCommaCommaRbCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), x8 ), x13 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x2 ), x9 ), x14 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x3 ), x10 ), x15 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x4 ), x11 ), x16 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x5 ), x12 ), x17 ) )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbCommaCommaCommaCommaRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashLbCommaCommaCommaCommaRbCreate( new( Node ), x1, x2, x3, x4, x5 ) )
    return
}

func Prelude__instHashPrelude_MonoidHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLSbRSbCreate( new( Node ) ), Prelude__implHashmappendHashPrelude_MonoidHashLSbRSbCreate( new( Node ) ), Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_AddAddCreate( root )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209Create( new( Node ) ) ), x1 )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_mapCreate( root, Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209__Hashlambda210Create( new( Node ) ), x1 )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLSbRSb__Hashlambda209__Hashlambda210( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__instHashPrelude_MonoidHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashLbSubGtRbCreate( new( Node ), x1 ), Prelude__implHashmappendHashPrelude_MonoidHashLbSubGtRbCreate( new( Node ), x1 ), Prelude__implHashmconcatHashPrelude_MonoidHashLbSubGtRbCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), x2, x4 ) ), Prelude_applyCreate( new( Node ), x3, x4 ) )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashLbSubGtRbCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_MonoidHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmappendHashPrelude_MonoidHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_EQCreate( root )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LTCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
        case 2:
            Prelude_GTCreate( root )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__defHashfmapHashPrelude_Functor( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashLtDolHashPrelude_Functor( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_fmapCreate( new( Node ), x1 ), Prelude_constCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_FunctorHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFunctorCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLSbRSbCreate( new( Node ) ), Prelude__implHashLtDolHashPrelude_FunctorHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashfmapHashPrelude_FunctorHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_mapCreate( root )
    return
}

func Prelude__implHashLtDolHashPrelude_FunctorHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtDolHashPrelude_FunctorCreate( root, Prelude__instHashPrelude_FunctorHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_FunctorHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFunctorCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashLtDolHashPrelude_FunctorHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashfmapHashPrelude_FunctorHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__Create( root )
    return
}

func Prelude__implHashLtDolHashPrelude_FunctorHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtDolHashPrelude_FunctorCreate( root, Prelude__instHashPrelude_FunctorHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__defHashpureHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashLtMulGtHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_liftA2Create( new( Node ), x1 ), Prelude_idCreate( new( Node ) ) )
    return
}

func Prelude__defHashMulGtHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtMulGtCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtDolCreate( new( Node ), Prelude__superHashPrelude_ApplicativeHashPrelude_FunctorCreate( new( Node ), x1 ) ), Prelude_idCreate( new( Node ) ) ), x2 ) ), x3 )
    return
}

func Prelude__defHashLtMulHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_liftA2Create( new( Node ), x1 ), Prelude_constCreate( new( Node ) ) )
    return
}

func Prelude__defHashliftA2HashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_LtMulGtCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_fmapCreate( new( Node ), Prelude__superHashPrelude_ApplicativeHashPrelude_FunctorCreate( new( Node ), x1 ) ), x2 ), x3 ) )
    return
}

func Prelude__instHashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashApplicativeCreate( root, Prelude__instHashPrelude_FunctorHashLSbRSbCreate( new( Node ) ), Prelude__implHashpureHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashLtMulHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashpureHashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211Create( new( Node ), x2 ) ), x1 )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_mapCreate( root, Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211__Hashlambda212Create( new( Node ), x2 ), x1 )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda211__Hashlambda212( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, x1, x2 )
    return
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213Create( new( Node ), x2 ) ), x1 )
    return
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_mapCreate( root, Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213__Hashlambda214Create( new( Node ) ), x1 )
    return
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSb__Hashlambda213__Hashlambda214( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtMulHashPrelude_ApplicativeCreate( root, Prelude__instHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215Create( new( Node ), x3, x1 ) ), x2 )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_mapCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215__Hashlambda216Create( new( Node ), x3, x2 ), x1 )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLSbRSb__Hashlambda215__Hashlambda216( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x2, x1 ), x3 )
    return
}

func Prelude__instHashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashApplicativeCreate( root, Prelude__instHashPrelude_FunctorHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashpureHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashMulGtHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashLtMulHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashliftA2HashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashpureHashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_constCreate( root )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), Prelude_applyCreate( new( Node ), x2, x3 ) )
    return
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashMulGtHashPrelude_ApplicativeCreate( root, Prelude__instHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtMulHashPrelude_ApplicativeCreate( root, Prelude__instHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, Prelude_applyCreate( new( Node ), x2, x4 ) ), Prelude_applyCreate( new( Node ), x3, x4 ) )
    return
}

func Prelude__defHashemptyHashPrelude_Alternative( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 121 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__defHashLtStrtGtHashPrelude_Alternative( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 60 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 124 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashsomeHashPrelude_Alternative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtStrtGtCreate( new( Node ), x1 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_pureCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ), Prelude_LSbRSbCreate( new( Node ) ) ) )
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtMulGtCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtDolGtCreate( new( Node ), Prelude__superHashPrelude_ApplicativeHashPrelude_FunctorCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ) ), Prelude_ColCreate( new( Node ) ) ), x2 ) ), x3 )
    x3.Children[ 0 ].SetChild( 1, x4 )
    RedirectCreate( root, x4 )
    return
}

func Prelude__defHashmanyHashPrelude_Alternative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtStrtGtCreate( new( Node ), x1 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_pureCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ), Prelude_LSbRSbCreate( new( Node ) ) ) )
    x4 = Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtMulGtCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtDolGtCreate( new( Node ), Prelude__superHashPrelude_ApplicativeHashPrelude_FunctorCreate( new( Node ), Prelude__superHashPrelude_AlternativeHashPrelude_ApplicativeCreate( new( Node ), x1 ) ) ), Prelude_ColCreate( new( Node ) ) ), x2 ) ), x3 )
    x3.Children[ 0 ].SetChild( 1, x4 )
    RedirectCreate( root, x3 )
    return
}

func Prelude__instHashPrelude_AlternativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashAlternativeCreate( root, Prelude__instHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashemptyHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashLtStrtGtHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashsomeHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashmanyHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashemptyHashPrelude_AlternativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_AddAddCreate( root )
    return
}

func Prelude__implHashsomeHashPrelude_AlternativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashsomeHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashmanyHashPrelude_AlternativeHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmanyHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__defHashGtGtEqHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__defHashGtGtHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude__defHashGtGtHashPrelude_Monad__Hashlambda217Create( new( Node ), x3 ) )
    return
}

func Prelude__defHashGtGtHashPrelude_Monad__Hashlambda217( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__defHashreturnHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_pureCreate( root, Prelude__superHashPrelude_MonadHashPrelude_ApplicativeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__instHashPrelude_ApplicativeHashLSbRSbCreate( new( Node ) ), Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_concatMapCreate( new( Node ), Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218Create( new( Node ), x2 ) ), x1 )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_mapCreate( root, Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218__Hashlambda219Create( new( Node ) ), Prelude_applyCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLSbRSb__Hashlambda218__Hashlambda219( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude__implHashGtGtHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashMulGtHashPrelude_ApplicativeHashLSbRSbCreate( root )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreturnHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__instHashPrelude_ApplicativeHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashLbSubGtRbCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb__Hashlambda220Create( root, x2, x1 )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashLbSubGtRb__Hashlambda220( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, Prelude_applyCreate( new( Node ), x2, x3 ) ), x3 )
    return
}

func Prelude__implHashGtGtHashPrelude_MonadHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashGtGtHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashLbSubGtRb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreturnHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashLbSubGtRbCreate( new( Node ) ) )
    return
}

func Prelude__defHashfailHashPrelude_MonadFail( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 99 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude__instHashPrelude_MonadFailHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadFailCreate( root, Prelude__instHashPrelude_MonadHashLSbRSbCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadFailHashLSbRSbCreate( new( Node ) ) )
    return
}

func Prelude__implHashfailHashPrelude_MonadFailHashLSbRSb( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_LSbRSbCreate( root )
    return
}

func Prelude__instHashPrelude_MonoidHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashmappendHashPrelude_MonoidHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe_CASE0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_JustCreate( root, x4 )
            return
        case 1:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude_JustCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_mappendCreate( new( Node ), x1 ), x4 ), x5 ) )
            return
    }
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_FunctorHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFunctorCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashfmapHashPrelude_FunctorHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x2.Children[ 0 ]
            Prelude_JustCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtDolHashPrelude_FunctorCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashApplicativeCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_JustCreate( root )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude__implHashfmapHashPrelude_FunctorHashPrelude_MaybeCreate( root, x3, x2 )
            return
    }
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtMulHashPrelude_ApplicativeCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe_CASE0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude_JustCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x4 ), x5 ) )
            return
    }
}

func Prelude__instHashPrelude_AlternativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashAlternativeCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
    }
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude_JustCreate( root, x3 )
            return
    }
}

func Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashsomeHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmanyHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude_applyCreate( root, x2, x3 )
            return
    }
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_MaybeCreate( root )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreturnHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadFailHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadFailCreate( root, Prelude__instHashPrelude_MonadHashPrelude_MaybeCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadFailHashPrelude_MaybeCreate( new( Node ) ) )
    return
}

func Prelude__implHashfailHashPrelude_MonadFailHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_NothingCreate( root )
    return
}

func Prelude__instHashPrelude_MonoidHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashMonoidCreate( root, Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_IOCreate( new( Node ), x1 ), Prelude__implHashmappendHashPrelude_MonoidHashPrelude_IOCreate( new( Node ), x1 ), Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_IOCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmemptyHashPrelude_MonoidHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_memptyCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude__implHashmappendHashPrelude_MonoidHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude_mappendCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmconcatHashPrelude_MonoidHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmconcatHashPrelude_MonoidCreate( root, Prelude__instHashPrelude_MonoidHashPrelude_IOCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_FunctorHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashFunctorCreate( root, Prelude__implHashfmapHashPrelude_FunctorHashPrelude_IOCreate( new( Node ) ), Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashfmapHashPrelude_FunctorHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), x2 ), Prelude__Create( new( Node ), Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), x1 ) )
    return
}

func Prelude__implHashLtDolHashPrelude_FunctorHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtDolHashPrelude_FunctorCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashApplicativeCreate( root, Prelude__instHashPrelude_FunctorHashPrelude_IOCreate( new( Node ) ), Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashpureHashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_returnIOCreate( root )
    return
}

func Prelude__implHashLtMulGtHashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_apCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_seqIOCreate( root )
    return
}

func Prelude__implHashLtMulHashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashLtMulHashPrelude_ApplicativeCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashliftA2HashPrelude_ApplicativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_liftM2Create( root, Prelude__instHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_AlternativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashAlternativeCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashemptyHashPrelude_AlternativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IOCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 109 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 122 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) )
            return
    }
}

func Prelude__implHashLtStrtGtHashPrelude_AlternativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_catchCreate( root, x1, Prelude_constCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashsomeHashPrelude_AlternativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashsomeHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashmanyHashPrelude_AlternativeHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashmanyHashPrelude_AlternativeCreate( root, Prelude__instHashPrelude_AlternativeHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadCreate( root, Prelude__instHashPrelude_ApplicativeHashPrelude_IOCreate( new( Node ) ), Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_bindIOCreate( root )
    return
}

func Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__implHashMulGtHashPrelude_ApplicativeHashPrelude_IOCreate( root )
    return
}

func Prelude__implHashreturnHashPrelude_MonadHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashreturnHashPrelude_MonadCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_MonadFailHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashMonadFailCreate( root, Prelude__instHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IOCreate( new( Node ) ) )
    return
}

func Prelude__implHashfailHashPrelude_MonadFailHashPrelude_IO( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ioErrorCreate( root, Prelude_applyCreate( new( Node ), Prelude_userErrorCreate( new( Node ) ), x1 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 47 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ), x2 )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ), x3 )
            return
        case 2:
            var x4 *Node
            x4 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 108 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ), x4 )
            return
        case 3:
            var x5 *Node
            x5 = x1.Children[ 0 ]
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 100 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ), x5 )
            return
    }
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowsPrecHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__instHashPrelude_DataHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_BoolCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_BoolCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE1Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Bool_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Bool( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_OrderingCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_OrderingCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE0Create( root, x2 )
            return
        case 1:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE1Create( root, x2 )
            return
        case 2:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE2Create( root, x2 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Ordering_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    x2 = root.Children[ 0 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), ChoiceCreate( new( Node ), Prelude_EQCreate( new( Node ) ), Prelude_GTCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Ordering( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, ChoiceCreate( new( Node ), Prelude_LTCreate( new( Node ) ), Prelude_EQCreate( new( Node ) ) ), Prelude_GTCreate( new( Node ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashaValueHashPrelude_DataHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE0Create( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE1Create( root, x3, x1, x5 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x6 *Node
            x6 = x3.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashaValueHashPrelude_DataHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE0Create( root, x4, x1, x5 )
            return
        case 1:
            var x8 *Node
            x8 = x3.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE1Create( root, x4, x2, x8 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x2 ), x8 ), x10 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_Either_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, Prelude_LeftCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) ), Prelude_RightCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_aValueCreate( new( Node ), x2 ), Prelude_LbRbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_DataHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashDataCreate( root, Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashaValueHashPrelude_DataHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE0Create( root, x2, x3 )
            return
        case 1:
            var x8 *Node
            x8 = x1.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE1Create( root, x2, x8 )
            return
        case 2:
            var x13 *Node
            x13 = x1.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE2Create( root, x2, x13 )
            return
        case 3:
            var x18 *Node
            x18 = x1.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE3Create( root, x2, x18 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x18 *Node
    x2 = root.Children[ 0 ]
    x18 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            var x22 *Node
            x22 = x2.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( root, Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), x18, x22 )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x13 *Node
    x2 = root.Children[ 0 ]
    x13 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            var x16 *Node
            x16 = x2.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( root, Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), x13, x16 )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x8 *Node
    x2 = root.Children[ 0 ]
    x8 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x2.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( root, Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), x8, x10 )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqEqHashPrelude_DataHashPrelude_IOError_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude__implHashEqEqEqHashPrelude_DataHashLSbRSbCreate( root, Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), x3, x4 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashaValueHashPrelude_DataHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbRbCreate( new( Node ) ) )
            return
        case 0:
            ChoiceCreate( root, ChoiceCreate( new( Node ), ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) ) ), Prelude_UserErrorCreate( new( Node ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) ) ) ), Prelude_FailErrorCreate( new( Node ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) ) ) ), Prelude_NondetErrorCreate( new( Node ), Prelude__implHashaValueHashPrelude_DataHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_DataHashPrelude_CharCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) ) ) )
            return
    }
}

func Prelude__instHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0Create( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1Create( root, x3, x1, x5 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x6 *Node
            x6 = x3.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_MaybeCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashLtHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashGtHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashminHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0Create( root, x3 )
            return
        case 1:
            var x5 *Node
            x5 = x2.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1Create( root, x3, x1, x5 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x6 *Node
            x6 = x3.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Maybe_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    x3 = root.Children[ 0 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_showStringCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) )
            return
        case 1:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x2 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 74 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 117 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 115 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x4 ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221Create( new( Node ) ) ), x3 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x2 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226Create( new( Node ), x1 ) ), x3 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x1 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 78 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE3Create( root, x8, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 111 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE4Create( root, x8, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x4 *Node
    var x2 *Node
    x8 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x8.Children[ 0 ]
            x10 = x8.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE5Create( root, x10, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x9, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE6Create( root, x10, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x10 *Node
    var x4 *Node
    var x2 *Node
    x10 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x11 *Node
            var x12 *Node
            x11 = x10.Children[ 0 ]
            x12 = x10.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE7Create( root, x12, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x11, CharLitCreate( new( Node ), 104 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE8Create( root, x12, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x4 *Node
    var x2 *Node
    x12 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x13 *Node
            var x14 *Node
            x13 = x12.Children[ 0 ]
            x14 = x12.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE9Create( root, x14, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x13, CharLitCreate( new( Node ), 105 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE10Create( root, x14, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x14 *Node
    var x4 *Node
    var x2 *Node
    x14 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x15 *Node
            var x16 *Node
            x15 = x14.Children[ 0 ]
            x16 = x14.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE11Create( root, x16, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x15, CharLitCreate( new( Node ), 110 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE12Create( root, x16, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x16 *Node
    var x4 *Node
    var x2 *Node
    x16 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x17 *Node
            var x18 *Node
            x17 = x16.Children[ 0 ]
            x18 = x16.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE13Create( root, x18, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x17, CharLitCreate( new( Node ), 103 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_COMPLEXCASE13( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    var x21 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE14Create( root, x18, x4, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda221__Hashlambda224_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x4 *Node
    var x2 *Node
    x18 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 74 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 117 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 115 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229__Hashlambda233Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Maybe__Hashlambda226__Hashlambda229__Hashlambda233( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_JustCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_MaybeCreate( new( Node ), x1 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0Create( root, x4, x1, x5 )
            return
        case 1:
            var x8 *Node
            x8 = x3.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1Create( root, x4, x2, x8 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x2 ), x8 ), x10 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_Either_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashOrdCreate( root, Prelude__instHashPrelude_EqHashPrelude_EitherCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x1 ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), x2 ) ), Prelude__implHashcompareHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashLtHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashGtHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashminHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashmaxHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashcompareHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashcompareHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashLtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashGtHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0Create( root, x4, x1, x5 )
            return
        case 1:
            var x8 *Node
            x8 = x3.Children[ 0 ]
            Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1Create( root, x4, x2, x8 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x2 ), x8 ), x10 )
            return
    }
}

func Prelude__implHashLtEqHashPrelude_OrdHashPrelude_Either_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_LtEqCreate( new( Node ), x1 ), x5 ), x6 )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude__implHashGtEqHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashGtEqHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashminHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashminHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashmaxHashPrelude_OrdHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashmaxHashPrelude_OrdCreate( root, Prelude__instHashPrelude_OrdHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashShowCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashshowListHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashshowsPrecHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x4.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 76 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ) )
            return
        case 1:
            var x6 *Node
            x6 = x4.Children[ 0 ]
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__Create( new( Node ), Prelude_showStringCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 82 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 104 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsPrecCreate( new( Node ), x2 ), IntLitCreate( new( Node ), 11 ) ), x6 ) ) )
            return
    }
}

func Prelude__implHashshowListHashPrelude_ShowHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashshowListHashPrelude_ShowCreate( root, Prelude__instHashPrelude_ShowHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__DictHashReadCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ), Prelude__implHashreadListHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235Create( new( Node ), x1 ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_readParenCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), IntLitCreate( new( Node ), 10 ) ), x3 ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244Create( new( Node ), x2 ) ), x4 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 76 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 101 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 102 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x16 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x16 = root.Children[ 4 ]
    switch x16.GetConstructor(  ){
        case -1:
            RedirectCreate( x16, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238__Hashlambda242Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda235__Hashlambda238__Hashlambda242( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LeftCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 82 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x7.Children[ 0 ]
            x9 = x7.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE3Create( root, x9, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x8, CharLitCreate( new( Node ), 105 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE4Create( root, x9, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x9 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x9 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x10 *Node
            var x11 *Node
            x10 = x9.Children[ 0 ]
            x11 = x9.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE5Create( root, x11, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x10, CharLitCreate( new( Node ), 103 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE6Create( root, x11, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x11 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x11 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x12 *Node
            var x13 *Node
            x12 = x11.Children[ 0 ]
            x13 = x11.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE7Create( root, x13, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x12, CharLitCreate( new( Node ), 104 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE8Create( root, x13, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x13 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x13 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x13.GetConstructor(  ){
        case -1:
            RedirectCreate( x13, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x14 *Node
            var x15 *Node
            x14 = x13.Children[ 0 ]
            x15 = x13.Children[ 1 ]
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE9Create( root, x15, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x14, CharLitCreate( new( Node ), 116 ) ) )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_COMPLEXCASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x18 *Node
    x15 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x18 = root.Children[ 4 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE10Create( root, x15, x1, x5, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247_CASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x15 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247__Hashlambda251Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 11 ) ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__implHashreadsPrecHashPrelude_ReadHashPrelude_Either__Hashlambda244__Hashlambda247__Hashlambda251( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_RightCreate( new( Node ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude__implHashreadListHashPrelude_ReadHashPrelude_Either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__defHashreadListHashPrelude_ReadCreate( root, Prelude__instHashPrelude_ReadHashPrelude_EitherCreate( new( Node ), x1, x2 ) )
    return
}

func Prelude__instHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__DictHashEqCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ), Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0Create( root, x2, x3 )
            return
        case 1:
            var x8 *Node
            x8 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1Create( root, x2, x8 )
            return
        case 2:
            var x13 *Node
            x13 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2Create( root, x2, x13 )
            return
        case 3:
            var x18 *Node
            x18 = x1.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3Create( root, x2, x18 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x18 *Node
    x2 = root.Children[ 0 ]
    x18 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            var x22 *Node
            x22 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x18, x22 )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x13 *Node
    x2 = root.Children[ 0 ]
    x13 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            var x16 *Node
            x16 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x13, x16 )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x8 *Node
    x2 = root.Children[ 0 ]
    x8 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x8, x10 )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashEqEqHashPrelude_EqHashPrelude_IOError_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_IOErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_UserErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), ChoiceCreate( new( Node ), Prelude_FailErrorCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_NondetErrorCreate( new( Node ), FreeCreate( new( Node ) ) ) ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x2.Children[ 0 ]
            Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( root, Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x3, x4 )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
        case 2:
            Prelude_FalseCreate( root )
            return
        case 3:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude__implHashSlashEqHashPrelude_EqHashPrelude_IOError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude__defHashSlashEqHashPrelude_EqCreate( root, Prelude__instHashPrelude_EqHashPrelude_IOErrorCreate( new( Node ) ) )
    return
}

func Prelude_eqChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqCharCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqChar( task *Task )(  ){
    ExternalPrelude_prim_eqChar( task )
    return
}

func Prelude_eqInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqInt( task *Task )(  ){
    ExternalPrelude_prim_eqInt( task )
    return
}

func Prelude_eqFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_eqFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_eqFloat( task *Task )(  ){
    ExternalPrelude_prim_eqFloat( task )
    return
}

func Prelude_ltEqChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqCharCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqChar( task *Task )(  ){
    ExternalPrelude_prim_ltEqChar( task )
    return
}

func Prelude_ltEqInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqInt( task *Task )(  ){
    ExternalPrelude_prim_ltEqInt( task )
    return
}

func Prelude_ltEqFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_ltEqFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_ltEqFloat( task *Task )(  ){
    ExternalPrelude_prim_ltEqFloat( task )
    return
}

func Prelude_shows( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_showsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) )
    return
}

func Prelude_showChar( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_ColCreate( root )
    return
}

func Prelude_showString( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_showCharCreate( new( Node ) ), x2, x1 )
    return
}

func Prelude_showListDefault( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 91 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 93 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x3 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 91 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x1 ), x4 ), Prelude_showListDefault_showl_22Create( new( Node ), x3, x1, x5 ) ) )
            return
    }
}

func Prelude_showListDefault_showl_22( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 93 ), x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_ColCreate( root, CharLitCreate( new( Node ), 44 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showsCreate( new( Node ), x2 ), x4 ), Prelude_showListDefault_showl_22Create( new( Node ), x1, x2, x5 ) ) )
            return
    }
}

func Prelude_showParen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude__Create( root, Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 40 ) ), Prelude__Create( new( Node ), x2, Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 41 ) ) ) )
            return
    }
}

func Prelude_showSigned( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_showSigned_COMPLEXCASE0Create( root, x3, x2, x1, x4, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), x1 ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude_showSigned_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x2 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_showSigned_COMPLEXCASE1Create( root, x2, x4, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_showParenCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x3 ), IntLitCreate( new( Node ), 6 ) ), Prelude__Create( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 45 ) ), Prelude_applyCreate( new( Node ), x2, Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), x4 ) ) ) )
            return
    }
}

func Prelude_showSigned_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, x2, x4 )
            return
    }
}

func Prelude_showTuple( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 40 ) ), Prelude__Create( new( Node ), Prelude_foldr1Create( new( Node ), Prelude_showTuple__Hashlambda253Create( new( Node ) ), x1 ), Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 41 ) ) ) )
    return
}

func Prelude_showTuple__Hashlambda253( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, x1, Prelude__Create( new( Node ), Prelude_applyCreate( new( Node ), Prelude_showCharCreate( new( Node ) ), CharLitCreate( new( Node ), 44 ) ), x2 ) )
    return
}

func Prelude_showCharLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_showCharLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_showCharLiteral( task *Task )(  ){
    ExternalPrelude_prim_showCharLiteral( task )
    return
}

func Prelude_showStringLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_showStringLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_showStringLiteral( task *Task )(  ){
    ExternalPrelude_prim_showStringLiteral( task )
    return
}

func Prelude_showIntLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_showIntLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_showIntLiteral( task *Task )(  ){
    ExternalPrelude_prim_showIntLiteral( task )
    return
}

func Prelude_showFloatLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_showFloatLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_showFloatLiteral( task *Task )(  ){
    ExternalPrelude_prim_showFloatLiteral( task )
    return
}

func Prelude_reads( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_readsPrecCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 0 ) )
    return
}

func Prelude_readListDefault( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude_readListDefault__Hashlambda282Create( new( Node ), x1 ) )
    return
}

func Prelude_readListDefault_readlSQuote_45( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_45__Hashlambda268Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ), Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_45__Hashlambda272Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ) )
    return
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_45__Hashlambda268_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 93 ) ) )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda268_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readListDefault_readlSQuote_45__Hashlambda272_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 44 ) ) )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276__Hashlambda280Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readListDefault_readlSQuote_45Create( new( Node ), x1, x5 ) ), x3 )
            return
    }
}

func Prelude_readListDefault_readlSQuote_45__Hashlambda272__Hashlambda276__Hashlambda280( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_readListDefault_readl_45( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_45__Hashlambda256Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) ), Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_45__Hashlambda260Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude_readListDefault_readl_45__Hashlambda256( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_readListDefault_readl_45__Hashlambda256_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readl_45__Hashlambda256_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readListDefault_readl_45__Hashlambda256_COMPLEXCASE1Create( root, x6, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 93 ) ) )
            return
    }
}

func Prelude_readListDefault_readl_45__Hashlambda256_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    var x9 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x9 = root.Children[ 3 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_readListDefault_readl_45__Hashlambda256_CASE2Create( root, x6, x4, x2 )
            return
    }
}

func Prelude_readListDefault_readl_45__Hashlambda256_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x4 *Node
    var x2 *Node
    x6 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x4 ), x2 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readListDefault_readl_45__Hashlambda260( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readListDefault_readl_45__Hashlambda260__Hashlambda264Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readListDefault_readlSQuote_45Create( new( Node ), x1, x5 ) ), x3 )
            return
    }
}

func Prelude_readListDefault_readl_45__Hashlambda260__Hashlambda264( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda282( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readListDefault__Hashlambda282__Hashlambda285Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readListDefault__Hashlambda282__Hashlambda285_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 91 ) ) )
            return
    }
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_mapCreate( new( Node ), Prelude_readListDefault__Hashlambda282__Hashlambda285__Hashlambda287Create( new( Node ) ), Prelude_readListDefault_readl_45Create( new( Node ), x1, x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readListDefault__Hashlambda282__Hashlambda285__Hashlambda287( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_readParen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_readParen_optional_61Create( root, x2 )
            return
        case 1:
            Prelude_readParen_mandatory_61Create( root, x2 )
            return
    }
}

func Prelude_readParen_optional_61( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, Prelude_applyCreate( new( Node ), x1, x2 ), Prelude_readParen_mandatory_61Create( new( Node ), x1, x2 ) )
    return
}

func Prelude_readParen_mandatory_61( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readParen_mandatory_61__Hashlambda290Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readParen_mandatory_61__Hashlambda290( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readParen_mandatory_61__Hashlambda290_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readParen_mandatory_61__Hashlambda290_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 40 ) ) )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readParen_mandatory_61__Hashlambda290_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readParen_optional_61Create( new( Node ), x1, x5 ) ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE0Create( root, x4, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_COMPLEXCASE1Create( root, x7, x1, x5, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x6, CharLitCreate( new( Node ), 41 ) ) )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    var x10 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x10 = root.Children[ 4 ]
    switch x10.GetConstructor(  ){
        case -1:
            RedirectCreate( x10, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE2Create( root, x7, x1, x5, x3 )
            return
    }
}

func Prelude_readParen_mandatory_61__Hashlambda290__Hashlambda294__Hashlambda298_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x7 *Node
    var x1 *Node
    var x5 *Node
    var x3 *Node
    x7 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x1, x5 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readSigned( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_readParenCreate( root, Prelude_FalseCreate( new( Node ) ), Prelude_readSigned_readSQuote_70Create( new( Node ), x1, x2 ) )
    return
}

func Prelude_readSigned_readSQuoteSQuote_70( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_foldrCreate( root, Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x2 ) )
    return
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314Create( new( Node ), x5 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), x1, x4 ) ), x3 )
            return
    }
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314_CASE0Create( root, x5, x4, x1, x3 )
            return
    }
}

func Prelude_readSigned_readSQuoteSQuote_70__Hashlambda310__Hashlambda314_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x4, x1 ), x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_readSigned_readSQuote_70( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_AddAddCreate( root, Prelude_readSigned_readSQuoteSQuote_70Create( new( Node ), x2, x3 ), Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuote_70__Hashlambda302Create( new( Node ), x1, x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x3 ) ) )
    return
}

func Prelude_readSigned_readSQuote_70__Hashlambda302( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_readSigned_readSQuote_70__Hashlambda302_CASE0Create( root, x5, x1, x2, x6, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x5.Children[ 0 ]
            x8 = x5.Children[ 1 ]
            Prelude_readSigned_readSQuote_70__Hashlambda302_COMPLEXCASE1Create( root, x8, x1, x2, x6, x4, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 45 ) ) )
            return
    }
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    var x11 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    x11 = root.Children[ 5 ]
    switch x11.GetConstructor(  ){
        case -1:
            RedirectCreate( x11, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x4 )
            return
        case 1:
            Prelude_readSigned_readSQuote_70__Hashlambda302_CASE2Create( root, x8, x1, x2, x6, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_70__Hashlambda302_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x8 *Node
    var x1 *Node
    var x2 *Node
    var x6 *Node
    var x4 *Node
    x8 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x4 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_readSigned_readSQuote_70__Hashlambda302__Hashlambda306Create( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_readSigned_readSQuoteSQuote_70Create( new( Node ), x2, x6 ) ), x4 )
            return
        case 1:
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_readSigned_readSQuote_70__Hashlambda302__Hashlambda306( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_negateCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), x1 ) ), x4 ), x5 ), x3 )
            return
    }
}

func Prelude_read( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_read_COMPLEXCASE0Create( root, Prelude_foldrCreate( new( Node ), Prelude_read__Hashlambda318Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_applyCreate( new( Node ), Prelude_readsCreate( new( Node ), x1 ), x2 ) ) )
    return
}

func Prelude_read_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x103 *Node
    x103 = root.Children[ 0 ]
    switch x103.GetConstructor(  ){
        case -1:
            RedirectCreate( x103, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x103.Children[ 0 ]
            x4 = x103.Children[ 1 ]
            Prelude_read_CASE1Create( root, x4, x3 )
            return
    }
}

func Prelude_read_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            ExemptCreate( root )
            return
    }
}

func Prelude_read__Hashlambda318( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_read__Hashlambda318__Hashlambda322Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCreate( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_read__Hashlambda318__Hashlambda322( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_read__Hashlambda318__Hashlambda322_CASE0Create( root, x4, x5, x1, x3 )
            return
    }
}

func Prelude_read__Hashlambda318__Hashlambda322_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x1 *Node
    var x3 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_read__Hashlambda318__Hashlambda322_CASE1Create( root, x5, x1, x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_read__Hashlambda318__Hashlambda322_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x3 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, x1, x3 )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_lex( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_COMPLEXCASE0Create( root, x1, x3, Prelude_isSpaceCreate( new( Node ), x2 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_CASE1Create( root, x1 )
            return
        case 1:
            Prelude_DolCreate( root, Prelude_lexCreate( new( Node ) ), Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x3 ) )
            return
    }
}

func Prelude_lex_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x1.Children[ 0 ]
            x5 = x1.Children[ 1 ]
            Prelude_lex_COMPLEXCASE2Create( root, x4, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE3Create( root, x4, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 34 ) ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda368Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexCharLiteralCreate( new( Node ), x5 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE4Create( root, x4, x5, Prelude_lex_isSingle_86Create( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda372Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexString_86Create( new( Node ), x5 ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE5Create( root, x4, x5, Prelude_lex_isSymbol_86Create( new( Node ), x4 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x4, Prelude_LSbRSbCreate( new( Node ) ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE6Create( root, x4, x5, Prelude_isAlphaCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda376Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_lex_isSymbol_86Create( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE7Create( root, x4, x5, Prelude_isDigitCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda380Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_lex_isIdChar_86Create( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_COMPLEXCASE8Create( root, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex__Hashlambda384Create( new( Node ), x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_COMPLEXCASE8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_lex_isSingle_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 44 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 59 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 40 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 41 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 91 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 93 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 123 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 125 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 95 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 96 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_lex_isSymbol_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 33 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 64 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 35 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 36 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 37 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 42 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 47 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 60 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 61 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 62 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 63 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 94 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 124 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 58 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 45 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 126 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_lex_isIdChar_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isAlphaNumCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x1 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 95 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
    return
}

func Prelude_lex_lexExp_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexExp_86_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 69 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) )
            return
    }
}

func Prelude_lex_lexExp_86_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexExp_86__Hashlambda338Create( new( Node ), x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x3, Prelude_LSbRSbCreate( new( Node ) ) ) ), Prelude_foldrCreate( new( Node ), Prelude_lex_lexExp_86__Hashlambda346Create( new( Node ), x2 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexDigitsCreate( new( Node ), x3 ) ) )
            return
    }
}

func Prelude_lex_lexExp_86__Hashlambda338( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_lex_lexExp_86__Hashlambda338_COMPLEXCASE0Create( new( Node ), x4, x1, x5, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x4 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 43 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 45 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ), x3 )
            return
    }
}

func Prelude_lex_lexExp_86__Hashlambda338_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexExp_86__Hashlambda338__Hashlambda342Create( new( Node ), x4, x1 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexDigitsCreate( new( Node ), x5 ) )
            return
    }
}

func Prelude_lex_lexExp_86__Hashlambda338__Hashlambda342( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_ColCreate( new( Node ), x1, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lex_lexExp_86__Hashlambda346( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex_lexFracExp_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_86Create( root, x1 )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexFracExp_86_COMPLEXCASE0Create( root, x3, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 46 ) ) )
            return
    }
}

func Prelude_lex_lexFracExp_86_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_86Create( root, x1 )
            return
        case 1:
            Prelude_lex_lexFracExp_86_CASE1Create( root, x3, x1 )
            return
    }
}

func Prelude_lex_lexFracExp_86_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_86Create( root, x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lex_lexFracExp_86_COMPLEXCASE2Create( root, x1, x4, x5, Prelude_isDigitCreate( new( Node ), x4 ) )
            return
    }
}

func Prelude_lex_lexFracExp_86_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexExp_86Create( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexFracExp_86__Hashlambda328Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lexDigitsCreate( new( Node ), Prelude_ColCreate( new( Node ), x4, x5 ) ) )
            return
    }
}

func Prelude_lex_lexFracExp_86__Hashlambda328( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexFracExp_86__Hashlambda328__Hashlambda332Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexExp_86Create( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_lex_lexFracExp_86__Hashlambda328__Hashlambda332( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 46 ), Prelude_AddAddCreate( new( Node ), x1, x4 ) ), x5 ), x3 )
            return
    }
}

func Prelude_lex_lexStringItem_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteralCreate( root, x1 )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexStringItem_86_COMPLEXCASE0Create( root, x3, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteralCreate( root, x1 )
            return
        case 1:
            Prelude_lex_lexStringItem_86_CASE1Create( root, x3, x1 )
            return
    }
}

func Prelude_lex_lexStringItem_86_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteralCreate( root, x1 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lex_lexStringItem_86_COMPLEXCASE2Create( root, x4, x1, x5, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x4, CharLitCreate( new( Node ), 38 ) ) )
            return
    }
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lex_lexStringItem_86_COMPLEXCASE3Create( root, x1, x5, Prelude_isSpaceCreate( new( Node ), x4 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_lexStringItem_86_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteralCreate( root, x1 )
            return
        case 1:
            Prelude_foldrCreate( root, Prelude_lex_lexStringItem_86__Hashlambda361Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x5 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
            return
    }
}

func Prelude_lex_lexStringItem_86__Hashlambda361( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex_lexStringItem_86__Hashlambda361_COMPLEXCASE0Create( root, x4, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x3, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lex_lexStringItem_86__Hashlambda361_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 38 ), Prelude_LSbRSbCreate( new( Node ) ) ) ), x4 ), x2 )
            return
    }
}

func Prelude_lex_lexString_86( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_foldrCreate( root, Prelude_lex_lexString_86__Hashlambda352Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexStringItem_86Create( new( Node ), x1 ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lex_lexString_86_COMPLEXCASE0Create( root, x1, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 34 ) ) )
            return
    }
}

func Prelude_lex_lexString_86_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_foldrCreate( root, Prelude_lex_lexString_86__Hashlambda352Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexStringItem_86Create( new( Node ), x1 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex_lexString_86__Hashlambda352( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex_lexString_86__Hashlambda352__Hashlambda356Create( new( Node ), x3 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexString_86Create( new( Node ), x4 ) ), x2 )
            return
    }
}

func Prelude_lex_lexString_86__Hashlambda352__Hashlambda356( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_AddAddCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda368( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex__Hashlambda368_CASE0Create( root, x4, x3, x2 )
            return
    }
}

func Prelude_lex__Hashlambda368_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x2 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lex__Hashlambda368_COMPLEXCASE1Create( root, x3, x6, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex__Hashlambda368_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_lex__Hashlambda368_COMPLEXCASE2Create( new( Node ), x3, x6, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x3 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda368_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_AddAddCreate( new( Node ), x3, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex__Hashlambda372( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda376( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda380( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda384( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex__Hashlambda384__Hashlambda388Create( new( Node ), x1, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexFracExp_86Create( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda384__Hashlambda388( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, Prelude_AddAddCreate( new( Node ), x2, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lex__Hashlambda392( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lex__Hashlambda392_CASE0Create( root, x4, x3, x2 )
            return
    }
}

func Prelude_lex__Hashlambda392_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x3 *Node
    var x2 *Node
    x4 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lex__Hashlambda392_COMPLEXCASE1Create( root, x3, x6, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 39 ) ) )
            return
    }
}

func Prelude_lex__Hashlambda392_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x2 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_AddAddCreate( root, Prelude_lex__Hashlambda392_COMPLEXCASE2Create( new( Node ), x3, x6, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashSlashEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x3 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda392_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_AddAddCreate( new( Node ), x3, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ), x6 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lex__Hashlambda396( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), x3 ), x4 ), x2 )
            return
    }
}

func Prelude_lex__Hashlambda400( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda404( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, x4 ), x5 ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda408( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_AddAddCreate( root, Prelude_foldrCreate( new( Node ), Prelude_lex__Hashlambda408__Hashlambda412Create( new( Node ), x1, x4 ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_lex_lexFracExp_86Create( new( Node ), x5 ) ), x3 )
            return
    }
}

func Prelude_lex__Hashlambda408__Hashlambda412( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            var x6 *Node
            x5 = x3.Children[ 0 ]
            x6 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x1, Prelude_AddAddCreate( new( Node ), x2, x5 ) ), x6 ), x4 )
            return
    }
}

func Prelude_lexCharLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lexCharLiteral_COMPLEXCASE0Create( root, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 92 ) ) )
            return
    }
}

func Prelude_lexCharLiteral_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            Prelude_mapCreate( root, Prelude_lexCharLiteral_prefix_148Create( new( Node ), CharLitCreate( new( Node ), 92 ) ), Prelude_lexCharLiteral_lexEsc_148Create( new( Node ), x3 ) )
            return
    }
}

func Prelude_lexCharLiteral_isCharName_148( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isUpperCreate( new( Node ), x1 ), Prelude_isDigitCreate( new( Node ), x1 ) )
    return
}

func Prelude_lexCharLiteral_prefix_148( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x1, x3 ), x4 )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 102 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 114 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 118 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 92 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 34 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 39 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x21 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x21 = root.Children[ 3 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_LET1Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), x2, Prelude_LSbRSbCreate( new( Node ) ) ), x3 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x4 = x1
    Prelude_lexCharLiteral_lexEsc_148_CASE2Create( root, x4, x1 )
    return
}

func Prelude_lexCharLiteral_lexEsc_148_CASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x4.Children[ 0 ]
            x6 = x4.Children[ 1 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE3Create( root, x6, x5, x4, x1, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 94 ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE3( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x5 *Node
    var x4 *Node
    var x1 *Node
    var x21 *Node
    x6 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE4Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 98 ) ) )
            return
        case 1:
            Prelude_lexCharLiteral_lexEsc_148_CASE11Create( root, x6, x5, x4, x1 )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_CASE11( task *Task )(  ){
    root := task.GetControl(  )
    var x6 *Node
    var x5 *Node
    var x4 *Node
    var x1 *Node
    x6 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE12Create( root, x1, x4, Prelude_isDigitCreate( new( Node ), x5 ) )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x6.Children[ 0 ]
            x8 = x6.Children[ 1 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE16Create( root, x1, x7, x8, Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x7 ), CharLitCreate( new( Node ), 64 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x7, CharLitCreate( new( Node ), 95 ) ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE16( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x7 *Node
    var x8 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x7 = root.Children[ 1 ]
    x8 = root.Children[ 2 ]
    x15 = root.Children[ 3 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_LET17Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 94 ), Prelude_ColCreate( new( Node ), x7, Prelude_LSbRSbCreate( new( Node ) ) ) ), x8 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_LET17( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x9 = x1
    Prelude_lexCharLiteral_lexEsc_148_CASE18Create( root, x1, x9 )
    return
}

func Prelude_lexCharLiteral_lexEsc_148_CASE18( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    x1 = root.Children[ 0 ]
    x9 = root.Children[ 1 ]
    switch x9.GetConstructor(  ){
        case -1:
            RedirectCreate( x9, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x10 *Node
            x10 = x9.Children[ 0 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE19Create( root, x1, x9, Prelude_isDigitCreate( new( Node ), x10 ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE19( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x9 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x9 = root.Children[ 1 ]
    x15 = root.Children[ 2 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_LET20Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x9 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_LET20( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x12 *Node
    x1 = root.Children[ 0 ]
    x12 = x1
    Prelude_lexCharLiteral_lexEsc_148_CASE21Create( root, x12 )
    return
}

func Prelude_lexCharLiteral_lexEsc_148_CASE21( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    x12 = root.Children[ 0 ]
    switch x12.GetConstructor(  ){
        case -1:
            RedirectCreate( x12, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x13 *Node
            x13 = x12.Children[ 0 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE22Create( root, x12, Prelude_isUpperCreate( new( Node ), x13 ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE22( task *Task )(  ){
    root := task.GetControl(  )
    var x12 *Node
    var x14 *Node
    x12 = root.Children[ 0 ]
    x14 = root.Children[ 1 ]
    switch x14.GetConstructor(  ){
        case -1:
            RedirectCreate( x14, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexCharLiteral_isCharName_148Create( new( Node ) ), x12 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE12( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x18 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x18 = root.Children[ 2 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_LET13Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x4 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_LET13( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x15 *Node
    x1 = root.Children[ 0 ]
    x15 = x1
    Prelude_lexCharLiteral_lexEsc_148_CASE14Create( root, x15 )
    return
}

func Prelude_lexCharLiteral_lexEsc_148_CASE14( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    x15 = root.Children[ 0 ]
    switch x15.GetConstructor(  ){
        case -1:
            RedirectCreate( x15, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x16 *Node
            x16 = x15.Children[ 0 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE15Create( root, x15, Prelude_isUpperCreate( new( Node ), x16 ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE15( task *Task )(  ){
    root := task.GetControl(  )
    var x15 *Node
    var x17 *Node
    x15 = root.Children[ 0 ]
    x17 = root.Children[ 1 ]
    switch x17.GetConstructor(  ){
        case -1:
            RedirectCreate( x17, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexCharLiteral_isCharName_148Create( new( Node ) ), x15 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE4( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE5Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 111 ) ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexCharLiteral_prefix_148Create( new( Node ), CharLitCreate( new( Node ), 98 ), Prelude_spanCreate( new( Node ), Prelude_isBinDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE5( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE6Create( root, x5, x1, x4, x6, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x5, CharLitCreate( new( Node ), 120 ) ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexCharLiteral_prefix_148Create( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_spanCreate( new( Node ), Prelude_isOctDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE6( task *Task )(  ){
    root := task.GetControl(  )
    var x5 *Node
    var x1 *Node
    var x4 *Node
    var x6 *Node
    var x21 *Node
    x5 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    x21 = root.Children[ 4 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE7Create( root, x1, x4, Prelude_isDigitCreate( new( Node ), x5 ) )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_lexCharLiteral_prefix_148Create( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_spanCreate( new( Node ), Prelude_isHexDigitCreate( new( Node ) ), x6 ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE7( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x21 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x21 = root.Children[ 2 ]
    switch x21.GetConstructor(  ){
        case -1:
            RedirectCreate( x21, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lexCharLiteral_lexEsc_148_LET8Create( root, x1 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x4 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_LET8( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x18 *Node
    x1 = root.Children[ 0 ]
    x18 = x1
    Prelude_lexCharLiteral_lexEsc_148_CASE9Create( root, x18 )
    return
}

func Prelude_lexCharLiteral_lexEsc_148_CASE9( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    x18 = root.Children[ 0 ]
    switch x18.GetConstructor(  ){
        case -1:
            RedirectCreate( x18, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x19 *Node
            x19 = x18.Children[ 0 ]
            Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE10Create( root, x18, Prelude_isUpperCreate( new( Node ), x19 ) )
            return
    }
}

func Prelude_lexCharLiteral_lexEsc_148_COMPLEXCASE10( task *Task )(  ){
    root := task.GetControl(  )
    var x18 *Node
    var x20 *Node
    x18 = root.Children[ 0 ]
    x20 = root.Children[ 1 ]
    switch x20.GetConstructor(  ){
        case -1:
            RedirectCreate( x20, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_spanCreate( new( Node ), Prelude_lexCharLiteral_isCharName_148Create( new( Node ) ), x18 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_lexDigits( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_lexDigits__Hashlambda433Create( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), Prelude_spanCreate( new( Node ), Prelude_isDigitCreate( new( Node ) ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_lexDigits__Hashlambda433( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_lexDigits__Hashlambda433_CASE0Create( root, x3, x4, x2 )
            return
    }
}

func Prelude_lexDigits__Hashlambda433_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x2 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x3, x4 ), x2 )
            return
    }
}

func Prelude_readCharLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readCharLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readCharLiteral( task *Task )(  ){
    ExternalPrelude_prim_readCharLiteral( task )
    return
}

func Prelude_readStringLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readStringLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readStringLiteral( task *Task )(  ){
    ExternalPrelude_prim_readStringLiteral( task )
    return
}

func Prelude_readNatLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readNatLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readNatLiteral( task *Task )(  ){
    ExternalPrelude_prim_readNatLiteral( task )
    return
}

func Prelude_readFloatLiteral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readFloatLiteralCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readFloatLiteral( task *Task )(  ){
    ExternalPrelude_prim_readFloatLiteral( task )
    return
}

func Prelude_plusInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_plusIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_plusInt( task *Task )(  ){
    ExternalPrelude_prim_plusInt( task )
    return
}

func Prelude_minusInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_minusIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_minusInt( task *Task )(  ){
    ExternalPrelude_prim_minusInt( task )
    return
}

func Prelude_timesInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_timesIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_timesInt( task *Task )(  ){
    ExternalPrelude_prim_timesInt( task )
    return
}

func Prelude_plusFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_plusFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_plusFloat( task *Task )(  ){
    ExternalPrelude_prim_plusFloat( task )
    return
}

func Prelude_minusFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_minusFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_minusFloat( task *Task )(  ){
    ExternalPrelude_prim_minusFloat( task )
    return
}

func Prelude_timesFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_timesFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_timesFloat( task *Task )(  ){
    ExternalPrelude_prim_timesFloat( task )
    return
}

func Prelude_negateFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_negateFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_negateFloat( task *Task )(  ){
    ExternalPrelude_prim_negateFloat( task )
    return
}

func Prelude_intToFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_intToFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_intToFloat( task *Task )(  ){
    ExternalPrelude_prim_intToFloat( task )
    return
}

func Prelude_divFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_divFloatCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_divFloat( task *Task )(  ){
    ExternalPrelude_prim_divFloat( task )
    return
}

func Prelude_even( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x1 ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_remCreate( new( Node ), x1 ), x2 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 2 ) ) ) ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x1 ) ) ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_odd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_notCreate( new( Node ) ), Prelude_evenCreate( new( Node ), x1 ) )
    return
}

func Prelude_fromIntegral( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_fromIntCreate( new( Node ), x2 ), Prelude_toIntCreate( new( Node ), x1 ) )
    return
}

func Prelude_realToFrac( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_fromFloatCreate( new( Node ), x2 ), Prelude_toFloatCreate( new( Node ), x1 ) )
    return
}

func Prelude_divInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_divIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_divInt( task *Task )(  ){
    ExternalPrelude_prim_divInt( task )
    return
}

func Prelude_modInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_modIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_modInt( task *Task )(  ){
    ExternalPrelude_prim_modInt( task )
    return
}

func Prelude_quotInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_quotIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_quotInt( task *Task )(  ){
    ExternalPrelude_prim_quotInt( task )
    return
}

func Prelude_remInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolHashCreate( root, Prelude_DolHashCreate( new( Node ), Prelude_prim_remIntCreate( new( Node ) ), x2 ), x1 )
    return
}

func Prelude_prim_remInt( task *Task )(  ){
    ExternalPrelude_prim_remInt( task )
    return
}

func Prelude_truncateFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_truncateFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_truncateFloat( task *Task )(  ){
    ExternalPrelude_prim_truncateFloat( task )
    return
}

func Prelude_roundFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_roundFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_roundFloat( task *Task )(  ){
    ExternalPrelude_prim_roundFloat( task )
    return
}

func Prelude_logFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_logFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_logFloat( task *Task )(  ){
    ExternalPrelude_prim_logFloat( task )
    return
}

func Prelude_expFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_expFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_expFloat( task *Task )(  ){
    ExternalPrelude_prim_expFloat( task )
    return
}

func Prelude_sqrtFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_sqrtFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_sqrtFloat( task *Task )(  ){
    ExternalPrelude_prim_sqrtFloat( task )
    return
}

func Prelude_sinFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_sinFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_sinFloat( task *Task )(  ){
    ExternalPrelude_prim_sinFloat( task )
    return
}

func Prelude_cosFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_cosFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_cosFloat( task *Task )(  ){
    ExternalPrelude_prim_cosFloat( task )
    return
}

func Prelude_tanFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_tanFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_tanFloat( task *Task )(  ){
    ExternalPrelude_prim_tanFloat( task )
    return
}

func Prelude_asinFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_asinFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_asinFloat( task *Task )(  ){
    ExternalPrelude_prim_asinFloat( task )
    return
}

func Prelude_acosFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_acosFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_acosFloat( task *Task )(  ){
    ExternalPrelude_prim_acosFloat( task )
    return
}

func Prelude_atanFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_atanFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_atanFloat( task *Task )(  ){
    ExternalPrelude_prim_atanFloat( task )
    return
}

func Prelude_sinhFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_sinhFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_sinhFloat( task *Task )(  ){
    ExternalPrelude_prim_sinhFloat( task )
    return
}

func Prelude_coshFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_coshFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_coshFloat( task *Task )(  ){
    ExternalPrelude_prim_coshFloat( task )
    return
}

func Prelude_tanhFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_tanhFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_tanhFloat( task *Task )(  ){
    ExternalPrelude_prim_tanhFloat( task )
    return
}

func Prelude_asinhFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_asinhFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_asinhFloat( task *Task )(  ){
    ExternalPrelude_prim_asinhFloat( task )
    return
}

func Prelude_acoshFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_acoshFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_acoshFloat( task *Task )(  ){
    ExternalPrelude_prim_acoshFloat( task )
    return
}

func Prelude_atanhFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_atanhFloatCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_atanhFloat( task *Task )(  ){
    ExternalPrelude_prim_atanhFloat( task )
    return
}

func Prelude_Pow( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_Pow_COMPLEXCASE0Create( root, x2, x3, x4, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_LtCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
    return
}

func Prelude_Pow_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_COMPLEXCASE1Create( root, x2, x3, x4, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 0 ) ) ) )
            return
        case 1:
            Prelude_errorCreate( root, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 78 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 103 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 97 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 105 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 118 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 120 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 112 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 111 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 101 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 110 ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 116 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
            return
    }
}

func Prelude_Pow_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_COMPLEXCASE2Create( root, x1, x2, x3, x4, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_fromIntCreate( new( Node ), x1 ), IntLitCreate( new( Node ), 1 ) )
            return
    }
}

func Prelude_Pow_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_Pow_f_262Create( root, x1, x2, x3, x4 )
            return
    }
}

func Prelude_Pow_g_262( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    Prelude_Pow_g_262_COMPLEXCASE0Create( root, x1, x3, x4, x2, x5, Prelude_evenCreate( new( Node ), x2, x4 ) )
    return
}

func Prelude_Pow_g_262_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    var x2 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_g_262_COMPLEXCASE1Create( root, x4, x2, x1, x3, x5, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) ) )
            return
        case 1:
            Prelude_Pow_g_262Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotCreate( new( Node ), x2 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 2 ) ) ), x5 )
            return
    }
}

func Prelude_Pow_g_262_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x1 *Node
    var x3 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_g_262_COMPLEXCASE2Create( root, x4, x2, x1, x3, x5, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x5 )
            return
    }
}

func Prelude_Pow_g_262_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x1 *Node
    var x3 *Node
    var x5 *Node
    var x6 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    x6 = root.Children[ 5 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_Pow_g_262Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotCreate( new( Node ), x2 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 2 ) ) ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x5 ) )
            return
    }
}

func Prelude_Pow_f_262( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_Pow_f_262_COMPLEXCASE0Create( root, x1, x3, x4, x2, Prelude_evenCreate( new( Node ), x2, x4 ) )
    return
}

func Prelude_Pow_f_262_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x3 *Node
    var x4 *Node
    var x2 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x2 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_f_262_COMPLEXCASE1Create( root, x1, x4, x2, x3, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), Prelude__superHashPrelude_OrdHashPrelude_EqCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_OrdCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ) ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 1 ) ) ) )
            return
        case 1:
            Prelude_Pow_f_262Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotCreate( new( Node ), x2 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 2 ) ) ) )
            return
    }
}

func Prelude_Pow_f_262_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_Pow_f_262_COMPLEXCASE2Create( root, x1, x4, x2, x3, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_Pow_f_262_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x5 = root.Children[ 4 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_Pow_g_262Create( root, x1, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_MulCreate( new( Node ), x1 ), x3 ), x3 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_quotCreate( new( Node ), x2 ), x4 ), Prelude_applyCreate( new( Node ), Prelude_fromIntCreate( new( Node ), Prelude__superHashPrelude_RealHashPrelude_NumCreate( new( Node ), Prelude__superHashPrelude_IntegralHashPrelude_RealCreate( new( Node ), x2 ) ) ), IntLitCreate( new( Node ), 2 ) ) ), x3 )
            return
    }
}

func Prelude_LtDolGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_fmapCreate( root, x1 )
    return
}

func Prelude_ap( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_ap__Hashlambda437Create( new( Node ), x1, x3 ) )
    return
}

func Prelude_ap__Hashlambda437( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = x3
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_ap__Hashlambda437__Hashlambda439Create( new( Node ), x1, x4 ) )
    return
}

func Prelude_ap__Hashlambda437__Hashlambda439( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = x3
    Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), x2, x4 ) )
    return
}

func Prelude_liftM2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x3 ), Prelude_liftM2__Hashlambda443Create( new( Node ), x1, x4, x2 ) )
    return
}

func Prelude_liftM2__Hashlambda443( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = x4
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x2 ), Prelude_liftM2__Hashlambda443__Hashlambda445Create( new( Node ), x5, x1, x3 ) )
    return
}

func Prelude_liftM2__Hashlambda443__Hashlambda445( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    x5 = x4
    Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x2 ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x3, x1 ), x5 ) )
    return
}

func Prelude_sequence( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x1 ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x1 ), x3 ), Prelude_sequence__Hashlambda449Create( new( Node ), x4, x1 ) )
            return
    }
}

func Prelude_sequence__Hashlambda449( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = x3
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude_GtGtEqCreate( new( Node ), x2 ), Prelude_sequenceCreate( new( Node ), x2, x1 ) ), Prelude_sequence__Hashlambda449__Hashlambda451Create( new( Node ), x4, x2 ) )
    return
}

func Prelude_sequence__Hashlambda449__Hashlambda451( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = x3
    Prelude_applyCreate( root, Prelude_returnCreate( new( Node ), x2 ), Prelude_ColCreate( new( Node ), x1, x4 ) )
    return
}

func Prelude_sequence_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_foldrCreate( root, Prelude_GtGtCreate( new( Node ), x1 ), Prelude_applyCreate( new( Node ), Prelude_returnCreate( new( Node ), x1 ), Prelude_LbRbCreate( new( Node ) ) ) )
    return
}

func Prelude_mapM( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_sequenceCreate( new( Node ), x1 ), Prelude_mapCreate( new( Node ), x2 ) )
    return
}

func Prelude_mapM_( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude__Create( root, Prelude_sequence_Create( new( Node ), x1 ), Prelude_mapCreate( new( Node ), x2 ) )
    return
}

func Prelude_isUpper( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 65 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 90 ) ) )
    return
}

func Prelude_isLower( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 97 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 122 ) ) )
    return
}

func Prelude_isAlpha( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isUpperCreate( new( Node ), x1 ), Prelude_isLowerCreate( new( Node ), x1 ) )
    return
}

func Prelude_isDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 57 ) ) )
    return
}

func Prelude_isAlphaNum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isAlphaCreate( new( Node ), x1 ), Prelude_isDigitCreate( new( Node ), x1 ) )
    return
}

func Prelude_isBinDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 49 ) ) )
    return
}

func Prelude_isOctDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_AndAndCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 48 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 55 ) ) )
    return
}

func Prelude_isHexDigit( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude_isDigitCreate( new( Node ), x1 ), Prelude_StrtStrtCreate( new( Node ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 65 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 70 ) ) ), Prelude_AndAndCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ) ), x1 ), CharLitCreate( new( Node ), 97 ) ), Prelude__implHashLtEqHashPrelude_OrdHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 102 ) ) ) ) )
    return
}

func Prelude_isSpace( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_StrtStrtCreate( root, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 32 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 9 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 10 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 13 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 12 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 11 ) ), Prelude_StrtStrtCreate( new( Node ), Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x1, CharLitCreate( new( Node ), 160 ) ), Prelude_applyCreate( new( Node ), Prelude_elemCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_IntCreate( new( Node ) ), Prelude_ordCreate( new( Node ), x1 ) ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 5760 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 6158 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8192 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8239 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 8287 ), Prelude_ColCreate( new( Node ), IntLitCreate( new( Node ), 12288 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
    return
}

func Prelude_ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_ordCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_ord( task *Task )(  ){
    ExternalPrelude_prim_ord( task )
    return
}

func Prelude_chr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_chr_COMPLEXCASE0Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashLtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_chr_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_chr_COMPLEXCASE1Create( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x1 ), IntLitCreate( new( Node ), 1114111 ) ) )
            return
        case 1:
            Prelude_prim_chrCreate( root, IntLitCreate( new( Node ), 0 ) )
            return
    }
}

func Prelude_chr_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_chr_COMPLEXCASE2Create( root, x1, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_prim_chrCreate( root, IntLitCreate( new( Node ), 1114111 ) )
            return
    }
}

func Prelude_chr_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_DolHashCreate( root, Prelude_prim_chrCreate( new( Node ) ), x1 )
            return
    }
}

func Prelude_prim_chr( task *Task )(  ){
    ExternalPrelude_prim_chr( task )
    return
}

func Prelude_lines( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_lines_LET0Create( root, x1 )
            return
    }
}

func Prelude_lines_LET0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x4 = Prelude_lines_splitLine_316Create( new( Node ), x1 )
    x5 = Prelude_lines__HashselFP24HashlCreate( new( Node ), x4 )
    x6 = Prelude_lines__HashselFP25HashbsCreate( new( Node ), x4 )
    Prelude_ColCreate( root, x5, Prelude_linesCreate( new( Node ), x6 ) )
    return
}

func Prelude_lines_splitLine_316( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_lines_splitLine_316_COMPLEXCASE0Create( root, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 10 ) ) )
            return
    }
}

func Prelude_lines_splitLine_316_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x7 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    switch x7.GetConstructor(  ){
        case -1:
            RedirectCreate( x7, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lines_splitLine_316_LET1Create( root, x2, x3 )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), x3 )
            return
    }
}

func Prelude_lines_splitLine_316_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = Prelude_lines_splitLine_316Create( new( Node ), x3 )
    x5 = Prelude_lines_splitLine_316__HashselFP21HashdsCreate( new( Node ), x4 )
    x6 = Prelude_lines_splitLine_316__HashselFP22HashesCreate( new( Node ), x4 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x2, x5 ), x6 )
    return
}

func Prelude_lines_splitLine_316__HashselFP21Hashds( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_lines_splitLine_316__HashselFP22Hashes( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_lines__HashselFP24Hashl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_lines__HashselFP25Hashbs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unlines( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_concatMapCreate( root, Prelude_flipCreate( new( Node ), Prelude_AddAddCreate( new( Node ) ), Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 10 ), Prelude_LSbRSbCreate( new( Node ) ) ) ) )
    return
}

func Prelude_words( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = Prelude_dropWhileCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ), x1 )
    Prelude_words_COMPLEXCASE0Create( root, x2, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ), x2, Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_words_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x6 *Node
    x2 = root.Children[ 0 ]
    x6 = root.Children[ 1 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_words_LET1Create( root, x2 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_words_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = Prelude_applyCreate( new( Node ), Prelude_breakCreate( new( Node ), Prelude_isSpaceCreate( new( Node ) ) ), x2 )
    x4 = Prelude_words__HashselFP27HashwCreate( new( Node ), x3 )
    x5 = Prelude_words__HashselFP28Hashs2Create( new( Node ), x3 )
    Prelude_ColCreate( root, x4, Prelude_wordsCreate( new( Node ), x5 ) )
    return
}

func Prelude_words__HashselFP27Hashw( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_words__HashselFP28Hashs2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unwords( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_unwords_COMPLEXCASE0Create( root, x1, Prelude__implHashEqEqHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashLSbRSbCreate( new( Node ), Prelude__instHashPrelude_EqHashPrelude_CharCreate( new( Node ) ) ), x1, Prelude_LSbRSbCreate( new( Node ) ) ) )
    return
}

func Prelude_unwords_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_foldr1Create( root, Prelude_unwords__Hashlambda453Create( new( Node ) ), x1 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_unwords__Hashlambda453( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_AddAddCreate( root, x1, Prelude_ColCreate( new( Node ), CharLitCreate( new( Node ), 32 ), x2 ) )
    return
}

func Prelude_Dol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, x1, x2 )
    return
}

func Prelude_DolExcl( task *Task )(  ){
    ExternalPrelude_DolExcl( task )
    return
}

func Prelude_DolExclExcl( task *Task )(  ){
    ExternalPrelude_DolExclExcl( task )
    return
}

func Prelude_DolHash( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolExclCreate( root, x1, Prelude_ensureNotFreeCreate( new( Node ), x2 ) )
    return
}

func Prelude_DolHashHash( task *Task )(  ){
    ExternalPrelude_DolHashHash( task )
    return
}

func Prelude_seq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_DolExclCreate( root, Prelude_constCreate( new( Node ), x2 ), x1 )
    return
}

func Prelude_ensureNotFree( task *Task )(  ){
    ExternalPrelude_ensureNotFree( task )
    return
}

func Prelude_ensureSpine( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ensureSpine_ensureList_343Create( root, Prelude_ensureNotFreeCreate( new( Node ), x1 ) )
    return
}

func Prelude_ensureSpine_ensureList_343( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_ColCreate( root, x2, Prelude_ensureSpineCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude_normalForm( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolExclExclCreate( root, Prelude_idCreate( new( Node ) ), x1 )
    return
}

func Prelude_groundNormalForm( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_idCreate( new( Node ) ), x1 )
    return
}

func Prelude__( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude____Hashlambda454Create( root, x1, x2 )
    return
}

func Prelude____Hashlambda454( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, x1, Prelude_applyCreate( new( Node ), x2, x3 ) )
    return
}

func Prelude_id( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_const( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    RedirectCreate( root, x1 )
    return
}

func Prelude_asTypeOf( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_constCreate( root )
    return
}

func Prelude_curry( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, x1, Prelude_LbCommaRbCreate( new( Node ), x2, x3 ) )
    return
}

func Prelude_uncurry( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), x4 )
            return
    }
}

func Prelude_flip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), x2 )
    return
}

func Prelude_until( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_until_COMPLEXCASE0Create( root, x1, x2, x3, Prelude_applyCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_until_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_untilCreate( root, x1, x2, Prelude_applyCreate( new( Node ), x2, x3 ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_AndAnd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_FalseCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_StrtStrt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude_not( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude_otherwise( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_TrueCreate( root )
    return
}

func Prelude_ifThenElse( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_fst( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_snd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_head( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_tail( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_null( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_TrueCreate( root )
            return
        case 1:
            Prelude_FalseCreate( root )
            return
    }
}

func Prelude_AddAdd( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ColCreate( root, x3, Prelude_AddAddCreate( new( Node ), x4, x2 ) )
            return
    }
}

func Prelude_length( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            IntLitCreate( root, 0 )
            return
        case 1:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            Prelude__implHashAddHashPrelude_NumHashPrelude_IntCreate( root, IntLitCreate( new( Node ), 1 ), Prelude_lengthCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude_ExclExcl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_ExclExcl_COMPLEXCASE0Create( root, x4, x2, x3, Prelude__implHashEqEqHashPrelude_EqHashPrelude_IntCreate( new( Node ), x2, IntLitCreate( new( Node ), 0 ) ) )
            return
    }
}

func Prelude_ExclExcl_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x3 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ExclExcl_COMPLEXCASE1Create( root, x4, x2, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude__implHashGtHashPrelude_OrdHashPrelude_IntCreate( new( Node ) ), x2 ), IntLitCreate( new( Node ), 0 ) ) )
            return
        case 1:
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_ExclExcl_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_ExclExclCreate( root, x4, Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x2, IntLitCreate( new( Node ), 1 ) ) )
            return
    }
}

func Prelude_map( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), Prelude_mapCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_foldl( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_foldlCreate( root, x1, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x2 ), x4 ), x5 )
            return
    }
}

func Prelude_foldl1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_foldlCreate( root, x1, x3, x4 )
            return
    }
}

func Prelude_foldr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x2 )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x4 ), Prelude_foldrCreate( new( Node ), x1, x2, x5 ) )
            return
    }
}

func Prelude_foldr1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_foldr1_CASE0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_foldr1_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x3 )
            return
        case 1:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), x1, x3 ), Prelude_foldr1Create( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_filter( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_filter_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_filter_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_filterCreate( root, x1, x4 )
            return
        case 1:
            Prelude_ColCreate( root, x3, Prelude_filterCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_zip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x1.Children[ 0 ]
            x4 = x1.Children[ 1 ]
            Prelude_zip_CASE0Create( root, x2, x3, x4 )
            return
    }
}

func Prelude_zip_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x2.Children[ 0 ]
            x6 = x2.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaRbCreate( new( Node ), x3, x5 ), Prelude_zipCreate( new( Node ), x4, x6 ) )
            return
    }
}

func Prelude_zip3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x1.Children[ 0 ]
            x5 = x1.Children[ 1 ]
            Prelude_zip3_CASE0Create( root, x2, x3, x4, x5 )
            return
    }
}

func Prelude_zip3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x2.Children[ 0 ]
            x7 = x2.Children[ 1 ]
            Prelude_zip3_CASE1Create( root, x3, x4, x6, x5, x7 )
            return
    }
}

func Prelude_zip3_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x6 *Node
    var x5 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    x7 = root.Children[ 4 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x8 *Node
            var x9 *Node
            x8 = x3.Children[ 0 ]
            x9 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_LbCommaCommaRbCreate( new( Node ), x4, x6, x8 ), Prelude_zip3Create( new( Node ), x5, x7, x9 ) )
            return
    }
}

func Prelude_zipWith( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_zipWith_CASE0Create( root, x3, x4, x1, x5 )
            return
    }
}

func Prelude_zipWith_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x1 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x1 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x6 *Node
            var x7 *Node
            x6 = x3.Children[ 0 ]
            x7 = x3.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x4 ), x6 ), Prelude_zipWithCreate( new( Node ), x1, x5, x7 ) )
            return
    }
}

func Prelude_zipWith3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    var x4 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x4 = root.Children[ 3 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x5 *Node
            var x6 *Node
            x5 = x2.Children[ 0 ]
            x6 = x2.Children[ 1 ]
            Prelude_zipWith3_CASE0Create( root, x3, x4, x5, x1, x6 )
            return
    }
}

func Prelude_zipWith3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x5 *Node
    var x1 *Node
    var x6 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x7 *Node
            var x8 *Node
            x7 = x3.Children[ 0 ]
            x8 = x3.Children[ 1 ]
            Prelude_zipWith3_CASE1Create( root, x4, x5, x7, x1, x6, x8 )
            return
    }
}

func Prelude_zipWith3_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x7 *Node
    var x1 *Node
    var x6 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x7 = root.Children[ 2 ]
    x1 = root.Children[ 3 ]
    x6 = root.Children[ 4 ]
    x8 = root.Children[ 5 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x9 *Node
            var x10 *Node
            x9 = x4.Children[ 0 ]
            x10 = x4.Children[ 1 ]
            Prelude_ColCreate( root, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), x1, x5 ), x7 ), x9 ), Prelude_zipWith3Create( new( Node ), x1, x6, x8, x10 ) )
            return
    }
}

func Prelude_unzip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_unzip_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude_unzip_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            Prelude_unzip_LET1Create( root, x4, x5, x3 )
            return
    }
}

func Prelude_unzip_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x3 *Node
    var x6 *Node
    var x7 *Node
    var x8 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    x6 = Prelude_unzipCreate( new( Node ), x3 )
    x7 = Prelude_unzip__HashselFP30HashxsCreate( new( Node ), x6 )
    x8 = Prelude_unzip__HashselFP31HashysCreate( new( Node ), x6 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x4, x7 ), Prelude_ColCreate( new( Node ), x5, x8 ) )
    return
}

func Prelude_unzip__HashselFP30Hashxs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_unzip__HashselFP31Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unzip3( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_unzip3_CASE0Create( root, x2, x3 )
            return
    }
}

func Prelude_unzip3_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            var x5 *Node
            var x6 *Node
            x4 = x2.Children[ 0 ]
            x5 = x2.Children[ 1 ]
            x6 = x2.Children[ 2 ]
            Prelude_unzip3_LET1Create( root, x4, x5, x6, x3 )
            return
    }
}

func Prelude_unzip3_LET1( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x3 *Node
    var x7 *Node
    var x8 *Node
    var x9 *Node
    var x10 *Node
    x4 = root.Children[ 0 ]
    x5 = root.Children[ 1 ]
    x6 = root.Children[ 2 ]
    x3 = root.Children[ 3 ]
    x7 = Prelude_unzip3Create( new( Node ), x3 )
    x8 = Prelude_unzip3__HashselFP33HashxsCreate( new( Node ), x7 )
    x9 = Prelude_unzip3__HashselFP34HashysCreate( new( Node ), x7 )
    x10 = Prelude_unzip3__HashselFP35HashzsCreate( new( Node ), x7 )
    Prelude_LbCommaCommaRbCreate( root, Prelude_ColCreate( new( Node ), x4, x8 ), Prelude_ColCreate( new( Node ), x5, x9 ), Prelude_ColCreate( new( Node ), x6, x10 ) )
    return
}

func Prelude_unzip3__HashselFP33Hashxs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_unzip3__HashselFP34Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_unzip3__HashselFP35Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_concat( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude_AddAddCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude_concatMap( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_concatCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_iterate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_ColCreate( root, x2, Prelude_iterateCreate( new( Node ), x1, Prelude_applyCreate( new( Node ), x1, x2 ) ) )
    return
}

func Prelude_repeat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_ColCreate( root, x1, Prelude_repeatCreate( new( Node ), x1 ) )
    return
}

func Prelude_replicate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_takeCreate( root, x1, Prelude_repeatCreate( new( Node ), x2 ) )
    return
}

func Prelude_take( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_take_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_take_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_take_takep_528Create( root, x1, x2 )
            return
        case 1:
            Prelude_LSbRSbCreate( root )
            return
    }
}

func Prelude_take_takep_528( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_ColCreate( root, x3, Prelude_takeCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 ) )
            return
    }
}

func Prelude_drop( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_drop_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_drop_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_drop_CASE1Create( root, x2, x1 )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_drop_CASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x1 *Node
    x2 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x4 *Node
            x4 = x2.Children[ 1 ]
            Prelude_dropCreate( root, Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 )
            return
    }
}

func Prelude_splitAt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_splitAt_COMPLEXCASE0Create( root, x1, x2, Prelude__implHashLtEqHashPrelude_OrdHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 0 ) ) )
    return
}

func Prelude_splitAt_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_splitAt_splitAtp_542Create( root, x1, x2 )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), x2 )
            return
    }
}

func Prelude_splitAt_splitAtp_542( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_splitAt_splitAtp_542_LET0Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_splitAt_splitAtp_542_LET0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = Prelude_splitAtCreate( new( Node ), Prelude__implHashSubHashPrelude_NumHashPrelude_IntCreate( new( Node ), x1, IntLitCreate( new( Node ), 1 ) ), x4 )
    x6 = Prelude_splitAt_splitAtp_542__HashselFP37HashysCreate( new( Node ), x5 )
    x7 = Prelude_splitAt_splitAtp_542__HashselFP38HashzsCreate( new( Node ), x5 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x3, x6 ), x7 )
    return
}

func Prelude_splitAt_splitAtp_542__HashselFP37Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_splitAt_splitAtp_542__HashselFP38Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_takeWhile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_takeWhile_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_takeWhile_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            Prelude_ColCreate( root, x3, Prelude_takeWhileCreate( new( Node ), x1, x4 ) )
            return
    }
}

func Prelude_dropWhile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LSbRSbCreate( root )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_dropWhile_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_dropWhile_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_ColCreate( root, x3, x4 )
            return
        case 1:
            Prelude_dropWhileCreate( root, x1, x4 )
            return
    }
}

func Prelude_span( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x2.GetConstructor(  ){
        case -1:
            RedirectCreate( x2, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
        case 1:
            var x3 *Node
            var x4 *Node
            x3 = x2.Children[ 0 ]
            x4 = x2.Children[ 1 ]
            Prelude_span_COMPLEXCASE0Create( root, x3, x1, x4, Prelude_applyCreate( new( Node ), x1, x3 ) )
            return
    }
}

func Prelude_span_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x8 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x8 = root.Children[ 3 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_span_COMPLEXCASE1Create( root, x3, x4, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_span_LET2Create( root, x3, x1, x4 )
            return
    }
}

func Prelude_span_LET2( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x1 *Node
    var x4 *Node
    var x5 *Node
    var x6 *Node
    var x7 *Node
    x3 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x4 = root.Children[ 2 ]
    x5 = Prelude_spanCreate( new( Node ), x1, x4 )
    x6 = Prelude_span__HashselFP40HashysCreate( new( Node ), x5 )
    x7 = Prelude_span__HashselFP41HashzsCreate( new( Node ), x5 )
    Prelude_LbCommaRbCreate( root, Prelude_ColCreate( new( Node ), x3, x6 ), x7 )
    return
}

func Prelude_span_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x3 *Node
    var x4 *Node
    var x5 *Node
    x3 = root.Children[ 0 ]
    x4 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    switch x5.GetConstructor(  ){
        case -1:
            RedirectCreate( x5, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_LbCommaRbCreate( root, Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x3, x4 ) )
            return
    }
}

func Prelude_span__HashselFP40Hashys( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_span__HashselFP41Hashzs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_break( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_spanCreate( root, Prelude__Create( new( Node ), Prelude_notCreate( new( Node ) ), x1 ) )
    return
}

func Prelude_reverse( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldlCreate( root, Prelude_flipCreate( new( Node ), Prelude_ColCreate( new( Node ) ) ), Prelude_LSbRSbCreate( new( Node ) ) )
    return
}

func Prelude_and( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude_AndAndCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) )
    return
}

func Prelude_or( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldrCreate( root, Prelude_StrtStrtCreate( new( Node ) ), Prelude_FalseCreate( new( Node ) ) )
    return
}

func Prelude_any( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_orCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_all( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_andCreate( new( Node ) ), Prelude_mapCreate( new( Node ), x1 ) )
    return
}

func Prelude_elem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_anyCreate( root, Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_notElem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_allCreate( root, Prelude_applyCreate( new( Node ), Prelude_SlashEqCreate( new( Node ), x1 ), x2 ) )
    return
}

func Prelude_lookup( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_NothingCreate( root )
            return
        case 1:
            var x4 *Node
            var x5 *Node
            x4 = x3.Children[ 0 ]
            x5 = x3.Children[ 1 ]
            Prelude_lookup_CASE0Create( root, x4, x1, x2, x5 )
            return
    }
}

func Prelude_lookup_CASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x4 *Node
    var x1 *Node
    var x2 *Node
    var x5 *Node
    x4 = root.Children[ 0 ]
    x1 = root.Children[ 1 ]
    x2 = root.Children[ 2 ]
    x5 = root.Children[ 3 ]
    switch x4.GetConstructor(  ){
        case -1:
            RedirectCreate( x4, Prelude_LbCommaRbCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            var x7 *Node
            x6 = x4.Children[ 0 ]
            x7 = x4.Children[ 1 ]
            Prelude_lookup_COMPLEXCASE1Create( root, x1, x2, x5, x7, Prelude_applyCreate( new( Node ), Prelude_applyCreate( new( Node ), Prelude_EqEqCreate( new( Node ), x1 ), x2 ), x6 ) )
            return
    }
}

func Prelude_lookup_COMPLEXCASE1( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    var x7 *Node
    var x8 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x7 = root.Children[ 3 ]
    x8 = root.Children[ 4 ]
    switch x8.GetConstructor(  ){
        case -1:
            RedirectCreate( x8, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_lookup_COMPLEXCASE2Create( root, x1, x2, x5, Prelude_otherwiseCreate( new( Node ) ) )
            return
        case 1:
            Prelude_JustCreate( root, x7 )
            return
    }
}

func Prelude_lookup_COMPLEXCASE2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x5 *Node
    var x6 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x5 = root.Children[ 2 ]
    x6 = root.Children[ 3 ]
    switch x6.GetConstructor(  ){
        case -1:
            RedirectCreate( x6, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_lookupCreate( root, x1, x2, x5 )
            return
    }
}

func Prelude_maybe( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_NothingCreate( new( Node ) ), Prelude_JustCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            RedirectCreate( root, x1 )
            return
        case 1:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x2, x4 )
            return
    }
}

func Prelude_either( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_LeftCreate( new( Node ), FreeCreate( new( Node ) ) ), Prelude_RightCreate( new( Node ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x1, x4 )
            return
        case 1:
            var x5 *Node
            x5 = x3.Children[ 0 ]
            Prelude_applyCreate( root, x2, x5 )
            return
    }
}

func Prelude_bindIO( task *Task )(  ){
    ExternalPrelude_bindIO( task )
    return
}

func Prelude_seqIO( task *Task )(  ){
    ExternalPrelude_seqIO( task )
    return
}

func Prelude_returnIO( task *Task )(  ){
    ExternalPrelude_returnIO( task )
    return
}

func Prelude_getChar( task *Task )(  ){
    ExternalPrelude_getChar( task )
    return
}

func Prelude_getLine( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_getCharCreate( new( Node ) ) ), Prelude_getLine__Hashlambda458Create( new( Node ) ) )
    return
}

func Prelude_getLine__Hashlambda458( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = x1
    Prelude_getLine__Hashlambda458_COMPLEXCASE0Create( root, x2, Prelude__implHashEqEqHashPrelude_EqHashPrelude_CharCreate( new( Node ), x2, CharLitCreate( new( Node ), 10 ) ) )
    return
}

func Prelude_getLine__Hashlambda458_COMPLEXCASE0( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 0 ]
    x3 = root.Children[ 1 ]
    switch x3.GetConstructor(  ){
        case -1:
            RedirectCreate( x3, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtGtEqHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_getLineCreate( new( Node ) ) ), Prelude_getLine__Hashlambda458__Hashlambda462Create( new( Node ), x2 ) )
            return
        case 1:
            Prelude_applyCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_LSbRSbCreate( new( Node ) ) )
            return
    }
}

func Prelude_getLine__Hashlambda458__Hashlambda462( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    var x3 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    x3 = x2
    Prelude_applyCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_ColCreate( new( Node ), x1, x3 ) )
    return
}

func Prelude_putChar( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashCreate( root, Prelude_prim_putCharCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_putChar( task *Task )(  ){
    ExternalPrelude_prim_putChar( task )
    return
}

func Prelude_putStr( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_LSbRSbCreate( new( Node ) ), Prelude_ColCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) ) )
            return
        case 0:
            Prelude_applyCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) )
            return
        case 1:
            var x2 *Node
            var x3 *Node
            x2 = x1.Children[ 0 ]
            x3 = x1.Children[ 1 ]
            Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_putCharCreate( new( Node ), x2 ) ), Prelude_putStrCreate( new( Node ), x3 ) )
            return
    }
}

func Prelude_putStrLn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_applyCreate( root, Prelude_applyCreate( new( Node ), Prelude__implHashGtGtHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_putStrCreate( new( Node ), x1 ) ), Prelude_putCharCreate( new( Node ), CharLitCreate( new( Node ), 10 ) ) )
    return
}

func Prelude_print( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude__Create( root, Prelude_putStrLnCreate( new( Node ) ), Prelude_showCreate( new( Node ), x1 ) )
    return
}

func Prelude_readFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_readFileCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_readFile( task *Task )(  ){
    ExternalPrelude_prim_readFile( task )
    return
}

func Prelude_prim_readFileContents( task *Task )(  ){
    ExternalPrelude_prim_readFileContents( task )
    return
}

func Prelude_writeFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_DolHashHashCreate( new( Node ), Prelude_prim_writeFileCreate( new( Node ) ), x1 ), x2 )
    return
}

func Prelude_prim_writeFile( task *Task )(  ){
    ExternalPrelude_prim_writeFile( task )
    return
}

func Prelude_appendFile( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    Prelude_applyCreate( root, Prelude_DolHashHashCreate( new( Node ), Prelude_prim_appendFileCreate( new( Node ) ), x1 ), x2 )
    return
}

func Prelude_prim_appendFile( task *Task )(  ){
    ExternalPrelude_prim_appendFile( task )
    return
}

func Prelude_userError( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_UserErrorCreate( root )
    return
}

func Prelude_ioError( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_errorCreate( root, Prelude__implHashshowHashPrelude_ShowHashPrelude_IOErrorCreate( new( Node ), x1 ) )
    return
}

func Prelude_catch( task *Task )(  ){
    ExternalPrelude_catch( task )
    return
}

func Prelude_success( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_TrueCreate( root )
    return
}

func Prelude_solve( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_TrueCreate( root )
            return
    }
}

func Prelude_doSolve( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            Prelude_applyCreate( root, Prelude__implHashreturnHashPrelude_MonadHashPrelude_IOCreate( new( Node ) ), Prelude_LbRbCreate( new( Node ) ) )
            return
    }
}

func Prelude_EqColEq( task *Task )(  ){
    ExternalPrelude_EqColEq( task )
    return
}

func Prelude_EqColLtEq( task *Task )(  ){
    ExternalPrelude_EqColLtEq( task )
    return
}

func Prelude_EqColLtLtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x2 *Node
    var x3 *Node
    x2 = root.Children[ 1 ]
    x3 = root.Children[ 2 ]
    Prelude_unifEqLinearCreate( root, x2, x3 )
    return
}

func Prelude_unifEqLinear( task *Task )(  ){
    ExternalPrelude_unifEqLinear( task )
    return
}

func Prelude_ifVar( task *Task )(  ){
    ExternalPrelude_ifVar( task )
    return
}

func Prelude_And( task *Task )(  ){
    ExternalPrelude_And( task )
    return
}

func Prelude_AndGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, ChoiceCreate( new( Node ), Prelude_FalseCreate( new( Node ) ), Prelude_TrueCreate( new( Node ) ) ) )
            return
        case 0:
            ExemptCreate( root )
            return
        case 1:
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Qstn( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    var x2 *Node
    x1 = root.Children[ 0 ]
    x2 = root.Children[ 1 ]
    ChoiceCreate( root, x1, x2 )
    return
}

func Prelude_anyOf( task *Task )(  ){
    root := task.GetControl(  )
    Prelude_foldr1Create( root, Prelude_QstnCreate( new( Node ) ) )
    return
}

func Prelude_unknown( task *Task )(  ){
    root := task.GetControl(  )
    x2 := FreeCreate( new( Node ) )
    RedirectCreate( root, x2 )
    return
}

func Prelude_failed( task *Task )(  ){
    ExternalPrelude_failed( task )
    return
}

func Prelude_error( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    Prelude_DolHashHashCreate( root, Prelude_prim_errorCreate( new( Node ) ), x1 )
    return
}

func Prelude_prim_error( task *Task )(  ){
    ExternalPrelude_prim_error( task )
    return
}

func Prelude_apply( task *Task )(  ){
    ExternalPrelude_apply( task )
    return
}

func Prelude_cond( task *Task )(  ){
    ExternalPrelude_cond( task )
    return
}

func Prelude_letrec( task *Task )(  ){
    ExternalPrelude_letrec( task )
    return
}

func Prelude_failure( task *Task )(  ){
    ExternalPrelude_failure( task )
    return
}

func Prelude_EqEqEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashDataCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_aValue( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashDataCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_EqEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEqCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_SlashEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEqCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__superHashPrelude_OrdHashPrelude_Eq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_compare( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_Lt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_Gt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_LtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_GtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_min( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_max( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashOrdCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_show( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_showsPrec( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_showList( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashShowCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_readsPrec( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashReadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_readList( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashReadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_minBound( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashBoundedCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_maxBound( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashBoundedCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_succ( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_pred( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_toEnum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fromEnum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_enumFrom( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_enumFromThen( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_enumFromTo( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_enumFromThenTo( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashEnumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_Add( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Sub( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_Mul( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_negate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_abs( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_signum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_fromInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashNumCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude__superHashPrelude_FractionalHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_Slash( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_recip( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fromFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFractionalCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__superHashPrelude_RealHashPrelude_Num( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__superHashPrelude_RealHashPrelude_Ord( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_toFloat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude__superHashPrelude_IntegralHashPrelude_Enum( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__superHashPrelude_IntegralHashPrelude_Real( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_div( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_mod( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_quot( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_rem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_divMod( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_quotRem( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_toInt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashIntegralCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x10 *Node
            x10 = x1.Children[ 8 ]
            RedirectCreate( root, x10 )
            return
    }
}

func Prelude__superHashPrelude_RealFracHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude__superHashPrelude_RealFracHashPrelude_Real( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_properFraction( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_truncate( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_round( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_ceiling( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_floor( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashRealFracCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude__superHashPrelude_FloatingHashPrelude_Fractional( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_pi( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_exp( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_log( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_sqrt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_MulMul( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude_logBase( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x8 *Node
            x8 = x1.Children[ 6 ]
            RedirectCreate( root, x8 )
            return
    }
}

func Prelude_sin( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x9 *Node
            x9 = x1.Children[ 7 ]
            RedirectCreate( root, x9 )
            return
    }
}

func Prelude_cos( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x10 *Node
            x10 = x1.Children[ 8 ]
            RedirectCreate( root, x10 )
            return
    }
}

func Prelude_tan( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x11 *Node
            x11 = x1.Children[ 9 ]
            RedirectCreate( root, x11 )
            return
    }
}

func Prelude_asin( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x12 *Node
            x12 = x1.Children[ 10 ]
            RedirectCreate( root, x12 )
            return
    }
}

func Prelude_acos( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x13 *Node
            x13 = x1.Children[ 11 ]
            RedirectCreate( root, x13 )
            return
    }
}

func Prelude_atan( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x14 *Node
            x14 = x1.Children[ 12 ]
            RedirectCreate( root, x14 )
            return
    }
}

func Prelude_sinh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x15 *Node
            x15 = x1.Children[ 13 ]
            RedirectCreate( root, x15 )
            return
    }
}

func Prelude_cosh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x16 *Node
            x16 = x1.Children[ 14 ]
            RedirectCreate( root, x16 )
            return
    }
}

func Prelude_tanh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x17 *Node
            x17 = x1.Children[ 15 ]
            RedirectCreate( root, x17 )
            return
    }
}

func Prelude_asinh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x18 *Node
            x18 = x1.Children[ 16 ]
            RedirectCreate( root, x18 )
            return
    }
}

func Prelude_acosh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x19 *Node
            x19 = x1.Children[ 17 ]
            RedirectCreate( root, x19 )
            return
    }
}

func Prelude_atanh( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFloatingCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x20 *Node
            x20 = x1.Children[ 18 ]
            RedirectCreate( root, x20 )
            return
    }
}

func Prelude_mempty( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonoidCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_mappend( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonoidCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_mconcat( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonoidCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_fmap( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFunctorCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_LtDol( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashFunctorCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude__superHashPrelude_ApplicativeHashPrelude_Functor( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_pure( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_LtMulGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_MulGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_LtMul( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude_liftA2( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashApplicativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x7 *Node
            x7 = x1.Children[ 5 ]
            RedirectCreate( root, x7 )
            return
    }
}

func Prelude__superHashPrelude_AlternativeHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashAlternativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_empty( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashAlternativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_LtStrtGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashAlternativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_some( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashAlternativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude_many( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashAlternativeCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x6 *Node
            x6 = x1.Children[ 4 ]
            RedirectCreate( root, x6 )
            return
    }
}

func Prelude__superHashPrelude_MonadHashPrelude_Applicative( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_GtGtEq( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

func Prelude_GtGt( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x4 *Node
            x4 = x1.Children[ 2 ]
            RedirectCreate( root, x4 )
            return
    }
}

func Prelude_return( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x5 *Node
            x5 = x1.Children[ 3 ]
            RedirectCreate( root, x5 )
            return
    }
}

func Prelude__superHashPrelude_MonadFailHashPrelude_Monad( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadFailCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x2 *Node
            x2 = x1.Children[ 0 ]
            RedirectCreate( root, x2 )
            return
    }
}

func Prelude_fail( task *Task )(  ){
    root := task.GetControl(  )
    var x1 *Node
    x1 = root.Children[ 0 ]
    switch x1.GetConstructor(  ){
        case -1:
            RedirectCreate( x1, Prelude__DictHashMonadFailCreate( new( Node ), FreeCreate( new( Node ) ), FreeCreate( new( Node ) ) ) )
            return
        case 0:
            var x3 *Node
            x3 = x1.Children[ 1 ]
            RedirectCreate( root, x3 )
            return
    }
}

